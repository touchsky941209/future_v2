/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFarmRewardDistributorV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "EFC"
      | "collectBatch"
      | "feeDistributor"
      | "lockupFreeRates"
      | "rewardTypesDescriptions"
      | "signer"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectorUpdated"
      | "RewardCollected"
      | "RewardLockedAndBurned"
  ): EventFragment;

  encodeFunctionData(functionFragment: "EFC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectBatch",
    values: [AddressLike, BigNumberish, BigNumberish[], BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockupFreeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTypesDescriptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "EFC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockupFreeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTypesDescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace CollectorUpdatedEvent {
  export type InputTuple = [collector: AddressLike, enabled: boolean];
  export type OutputTuple = [collector: string, enabled: boolean];
  export interface OutputObject {
    collector: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardCollectedEvent {
  export type InputTuple = [
    pool: AddressLike,
    account: AddressLike,
    rewardType: BigNumberish,
    referralToken: BigNumberish,
    nonce: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    account: string,
    rewardType: bigint,
    referralToken: bigint,
    nonce: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    pool: string;
    account: string;
    rewardType: bigint;
    referralToken: bigint;
    nonce: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardLockedAndBurnedEvent {
  export type InputTuple = [
    account: AddressLike,
    period: BigNumberish,
    receiver: AddressLike,
    lockedOrUnlockedAmount: BigNumberish,
    burnedAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    period: bigint,
    receiver: string,
    lockedOrUnlockedAmount: bigint,
    burnedAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    period: bigint;
    receiver: string;
    lockedOrUnlockedAmount: bigint;
    burnedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFarmRewardDistributorV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IFarmRewardDistributorV2;
  waitForDeployment(): Promise<this>;

  interface: IFarmRewardDistributorV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EFC: TypedContractMethod<[], [string], "view">;

  collectBatch: TypedContractMethod<
    [
      account: AddressLike,
      nonceAndLockupPeriod: BigNumberish,
      packedPoolRewardValues: BigNumberish[],
      signature: BytesLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  feeDistributor: TypedContractMethod<[], [string], "view">;

  lockupFreeRates: TypedContractMethod<
    [lockupPeriod: BigNumberish],
    [bigint],
    "view"
  >;

  rewardTypesDescriptions: TypedContractMethod<
    [rewardType: BigNumberish],
    [string],
    "view"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EFC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectBatch"
  ): TypedContractMethod<
    [
      account: AddressLike,
      nonceAndLockupPeriod: BigNumberish,
      packedPoolRewardValues: BigNumberish[],
      signature: BytesLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockupFreeRates"
  ): TypedContractMethod<[lockupPeriod: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTypesDescriptions"
  ): TypedContractMethod<[rewardType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CollectorUpdated"
  ): TypedContractEvent<
    CollectorUpdatedEvent.InputTuple,
    CollectorUpdatedEvent.OutputTuple,
    CollectorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardCollected"
  ): TypedContractEvent<
    RewardCollectedEvent.InputTuple,
    RewardCollectedEvent.OutputTuple,
    RewardCollectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardLockedAndBurned"
  ): TypedContractEvent<
    RewardLockedAndBurnedEvent.InputTuple,
    RewardLockedAndBurnedEvent.OutputTuple,
    RewardLockedAndBurnedEvent.OutputObject
  >;

  filters: {
    "CollectorUpdated(address,bool)": TypedContractEvent<
      CollectorUpdatedEvent.InputTuple,
      CollectorUpdatedEvent.OutputTuple,
      CollectorUpdatedEvent.OutputObject
    >;
    CollectorUpdated: TypedContractEvent<
      CollectorUpdatedEvent.InputTuple,
      CollectorUpdatedEvent.OutputTuple,
      CollectorUpdatedEvent.OutputObject
    >;

    "RewardCollected(address,address,uint16,uint16,uint32,address,uint200)": TypedContractEvent<
      RewardCollectedEvent.InputTuple,
      RewardCollectedEvent.OutputTuple,
      RewardCollectedEvent.OutputObject
    >;
    RewardCollected: TypedContractEvent<
      RewardCollectedEvent.InputTuple,
      RewardCollectedEvent.OutputTuple,
      RewardCollectedEvent.OutputObject
    >;

    "RewardLockedAndBurned(address,uint16,address,uint256,uint256)": TypedContractEvent<
      RewardLockedAndBurnedEvent.InputTuple,
      RewardLockedAndBurnedEvent.OutputTuple,
      RewardLockedAndBurnedEvent.OutputObject
    >;
    RewardLockedAndBurned: TypedContractEvent<
      RewardLockedAndBurnedEvent.InputTuple,
      RewardLockedAndBurnedEvent.OutputTuple,
      RewardLockedAndBurnedEvent.OutputObject
    >;
  };
}
