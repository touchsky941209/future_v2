/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ExecutorAssistant {
  export type IndexPerOperationStruct = {
    index: BigNumberish;
    indexNext: BigNumberish;
    indexEnd: BigNumberish;
  };

  export type IndexPerOperationStructOutput = [
    index: bigint,
    indexNext: bigint,
    indexEnd: bigint
  ] & { index: bigint; indexNext: bigint; indexEnd: bigint };
}

export interface ExecutorAssistantInterface extends Interface {
  getFunction(
    nameOrSignature: "calculateNextMulticall" | "positionRouter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateNextMulticall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positionRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateNextMulticall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionRouter",
    data: BytesLike
  ): Result;
}

export interface ExecutorAssistant extends BaseContract {
  connect(runner?: ContractRunner | null): ExecutorAssistant;
  waitForDeployment(): Promise<this>;

  interface: ExecutorAssistantInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateNextMulticall: TypedContractMethod<
    [_max: BigNumberish],
    [
      [
        string[],
        [
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput
        ]
      ] & {
        markets: string[];
        indexPerOperations: [
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput
        ];
      }
    ],
    "view"
  >;

  positionRouter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateNextMulticall"
  ): TypedContractMethod<
    [_max: BigNumberish],
    [
      [
        string[],
        [
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput
        ]
      ] & {
        markets: string[];
        indexPerOperations: [
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput,
          ExecutorAssistant.IndexPerOperationStructOutput
        ];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "positionRouter"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
