/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPythAdaptor {
  export type PythStructsPriceStruct = {
    price: BigNumberish;
    conf: BigNumberish;
    expo: BigNumberish;
    publishTime: BigNumberish;
  };

  export type PythStructsPriceStructOutput = [
    price: bigint,
    conf: bigint,
    expo: bigint,
    publishTime: bigint
  ] & { price: bigint; conf: bigint; expo: bigint; publishTime: bigint };
}

export interface PythAdaptorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PRICE_PER_WORD"
      | "acceptGov"
      | "assetIndex"
      | "assetsIndexes"
      | "assignAssetsIndexes"
      | "changeGov"
      | "clearPrices"
      | "getPriceUnsafe"
      | "gov"
      | "isUpdater"
      | "pendingGov"
      | "setUpdater"
      | "updatePriceFeeds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetIndexAssigned"
      | "ChangeGovStarted"
      | "GovChanged"
      | "LogVaas"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRICE_PER_WORD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetsIndexes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignAssetsIndexes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearPrices",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [BigNumberish[], BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRICE_PER_WORD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignAssetsIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;
}

export namespace AssetIndexAssignedEvent {
  export type InputTuple = [asset: BytesLike, index: BigNumberish];
  export type OutputTuple = [asset: string, index: bigint];
  export interface OutputObject {
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangeGovStartedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovChangedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVaasEvent {
  export type InputTuple = [encodedVaas: BytesLike];
  export type OutputTuple = [encodedVaas: string];
  export interface OutputObject {
    encodedVaas: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PythAdaptor extends BaseContract {
  connect(runner?: ContractRunner | null): PythAdaptor;
  waitForDeployment(): Promise<this>;

  interface: PythAdaptorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PRICE_PER_WORD: TypedContractMethod<[], [bigint], "view">;

  acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  assetIndex: TypedContractMethod<[], [bigint], "view">;

  assetsIndexes: TypedContractMethod<[asset: BytesLike], [bigint], "view">;

  assignAssetsIndexes: TypedContractMethod<
    [_assets: BytesLike[]],
    [void],
    "nonpayable"
  >;

  changeGov: TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;

  clearPrices: TypedContractMethod<
    [_toClear: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getPriceUnsafe: TypedContractMethod<
    [_id: BytesLike],
    [IPythAdaptor.PythStructsPriceStructOutput],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  isUpdater: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  pendingGov: TypedContractMethod<[], [string], "view">;

  setUpdater: TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  updatePriceFeeds: TypedContractMethod<
    [
      _prices: BigNumberish[],
      _minPublishTime: BigNumberish,
      _encodedVaas: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PRICE_PER_WORD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assetIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "assetsIndexes"
  ): TypedContractMethod<[asset: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assignAssetsIndexes"
  ): TypedContractMethod<[_assets: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGov"
  ): TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearPrices"
  ): TypedContractMethod<[_toClear: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPriceUnsafe"
  ): TypedContractMethod<
    [_id: BytesLike],
    [IPythAdaptor.PythStructsPriceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isUpdater"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setUpdater"
  ): TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceFeeds"
  ): TypedContractMethod<
    [
      _prices: BigNumberish[],
      _minPublishTime: BigNumberish,
      _encodedVaas: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;

  getEvent(
    key: "AssetIndexAssigned"
  ): TypedContractEvent<
    AssetIndexAssignedEvent.InputTuple,
    AssetIndexAssignedEvent.OutputTuple,
    AssetIndexAssignedEvent.OutputObject
  >;
  getEvent(
    key: "ChangeGovStarted"
  ): TypedContractEvent<
    ChangeGovStartedEvent.InputTuple,
    ChangeGovStartedEvent.OutputTuple,
    ChangeGovStartedEvent.OutputObject
  >;
  getEvent(
    key: "GovChanged"
  ): TypedContractEvent<
    GovChangedEvent.InputTuple,
    GovChangedEvent.OutputTuple,
    GovChangedEvent.OutputObject
  >;
  getEvent(
    key: "LogVaas"
  ): TypedContractEvent<
    LogVaasEvent.InputTuple,
    LogVaasEvent.OutputTuple,
    LogVaasEvent.OutputObject
  >;

  filters: {
    "AssetIndexAssigned(bytes32,uint256)": TypedContractEvent<
      AssetIndexAssignedEvent.InputTuple,
      AssetIndexAssignedEvent.OutputTuple,
      AssetIndexAssignedEvent.OutputObject
    >;
    AssetIndexAssigned: TypedContractEvent<
      AssetIndexAssignedEvent.InputTuple,
      AssetIndexAssignedEvent.OutputTuple,
      AssetIndexAssignedEvent.OutputObject
    >;

    "ChangeGovStarted(address,address)": TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;
    ChangeGovStarted: TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;

    "GovChanged(address,address)": TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;
    GovChanged: TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;

    "LogVaas(bytes32)": TypedContractEvent<
      LogVaasEvent.InputTuple,
      LogVaasEvent.OutputTuple,
      LogVaasEvent.OutputObject
    >;
    LogVaas: TypedContractEvent<
      LogVaasEvent.InputTuple,
      LogVaasEvent.OutputTuple,
      LogVaasEvent.OutputObject
    >;
  };
}
