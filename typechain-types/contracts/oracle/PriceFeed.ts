/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPriceFeed {
  export type MarketPriceStruct = {
    market: AddressLike;
    priceX96: BigNumberish;
  };

  export type MarketPriceStructOutput = [market: string, priceX96: bigint] & {
    market: string;
    priceX96: bigint;
  };

  export type PricePackStruct = {
    updateTimestamp: BigNumberish;
    maxPriceX96: BigNumberish;
    minPriceX96: BigNumberish;
    updateBlockTimestamp: BigNumberish;
  };

  export type PricePackStructOutput = [
    updateTimestamp: bigint,
    maxPriceX96: bigint,
    minPriceX96: bigint,
    updateBlockTimestamp: bigint
  ] & {
    updateTimestamp: bigint;
    maxPriceX96: bigint;
    minPriceX96: bigint;
    updateBlockTimestamp: bigint;
  };

  export type MarketConfigStruct = {
    refPriceFeed: AddressLike;
    refHeartbeatDuration: BigNumberish;
    maxCumulativeDeltaDiff: BigNumberish;
  };

  export type MarketConfigStructOutput = [
    refPriceFeed: string,
    refHeartbeatDuration: bigint,
    maxCumulativeDeltaDiff: bigint
  ] & {
    refPriceFeed: string;
    refHeartbeatDuration: bigint;
    maxCumulativeDeltaDiff: bigint;
  };

  export type SlotStruct = {
    maxDeviationRatio: BigNumberish;
    cumulativeRoundDuration: BigNumberish;
    refPriceExtraSample: BigNumberish;
    updateTxTimeout: BigNumberish;
  };

  export type SlotStructOutput = [
    maxDeviationRatio: bigint,
    cumulativeRoundDuration: bigint,
    refPriceExtraSample: bigint,
    updateTxTimeout: bigint
  ] & {
    maxDeviationRatio: bigint;
    cumulativeRoundDuration: bigint;
    refPriceExtraSample: bigint;
    updateTxTimeout: bigint;
  };
}

export interface PriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELTA_PRECISION"
      | "GRACE_PERIOD_TIME"
      | "MARKET_DECIMALS"
      | "USD_DECIMALS"
      | "acceptGov"
      | "calculatePriceX96s"
      | "changeGov"
      | "getMaxPriceX96"
      | "getMinPriceX96"
      | "gov"
      | "ignoreReferencePriceFeedError"
      | "isUpdater"
      | "latestPrice"
      | "marketConfig"
      | "pendingGov"
      | "sequencerUptimeFeed"
      | "setCumulativeRoundDuration"
      | "setMaxCumulativeDeltaDiffs"
      | "setMaxDeviationRatio"
      | "setPriceX96s"
      | "setRefHeartbeatDuration"
      | "setRefPriceExtraSample"
      | "setRefPriceFeed"
      | "setSequencerUptimeFeed"
      | "setStableMarketPriceFeed"
      | "setUpdateTxTimeout"
      | "setUpdater"
      | "slot"
      | "stableMarketPriceFeed"
      | "stableMarketPriceFeedHeartBeatDuration"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeGovStarted"
      | "GovChanged"
      | "MaxCumulativeDeltaDiffExceeded"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELTA_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USD_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePriceX96s",
    values: [IPriceFeed.MarketPriceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPriceX96",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinPriceX96",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ignoreReferencePriceFeedError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sequencerUptimeFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeRoundDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceX96s",
    values: [IPriceFeed.MarketPriceStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefHeartbeatDuration",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefPriceExtraSample",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefPriceFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerUptimeFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableMarketPriceFeed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateTxTimeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "slot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stableMarketPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableMarketPriceFeedHeartBeatDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DELTA_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USD_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ignoreReferencePriceFeedError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeRoundDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefHeartbeatDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefPriceExtraSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableMarketPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateTxTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableMarketPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableMarketPriceFeedHeartBeatDuration",
    data: BytesLike
  ): Result;
}

export namespace ChangeGovStartedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovChangedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxCumulativeDeltaDiffExceededEvent {
  export type InputTuple = [
    market: AddressLike,
    priceX96: BigNumberish,
    refPriceX96: BigNumberish,
    cumulativeDelta: BigNumberish,
    cumulativeRefDelta: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    priceX96: bigint,
    refPriceX96: bigint,
    cumulativeDelta: bigint,
    cumulativeRefDelta: bigint
  ];
  export interface OutputObject {
    market: string;
    priceX96: bigint;
    refPriceX96: bigint;
    cumulativeDelta: bigint;
    cumulativeRefDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    market: AddressLike,
    priceX96: BigNumberish,
    minPriceX96: BigNumberish,
    maxPriceX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    priceX96: bigint,
    minPriceX96: bigint,
    maxPriceX96: bigint
  ];
  export interface OutputObject {
    market: string;
    priceX96: bigint;
    minPriceX96: bigint;
    maxPriceX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): PriceFeed;
  waitForDeployment(): Promise<this>;

  interface: PriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELTA_PRECISION: TypedContractMethod<[], [bigint], "view">;

  GRACE_PERIOD_TIME: TypedContractMethod<[], [bigint], "view">;

  MARKET_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  USD_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  calculatePriceX96s: TypedContractMethod<
    [_marketPrices: IPriceFeed.MarketPriceStruct[]],
    [[bigint[], bigint[]] & { minPriceX96s: bigint[]; maxPriceX96s: bigint[] }],
    "view"
  >;

  changeGov: TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;

  getMaxPriceX96: TypedContractMethod<[_market: AddressLike], [bigint], "view">;

  getMinPriceX96: TypedContractMethod<[_market: AddressLike], [bigint], "view">;

  gov: TypedContractMethod<[], [string], "view">;

  ignoreReferencePriceFeedError: TypedContractMethod<[], [boolean], "view">;

  isUpdater: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  latestPrice: TypedContractMethod<
    [market: AddressLike],
    [IPriceFeed.PricePackStructOutput],
    "view"
  >;

  marketConfig: TypedContractMethod<
    [market: AddressLike],
    [IPriceFeed.MarketConfigStructOutput],
    "view"
  >;

  pendingGov: TypedContractMethod<[], [string], "view">;

  sequencerUptimeFeed: TypedContractMethod<[], [string], "view">;

  setCumulativeRoundDuration: TypedContractMethod<
    [_cumulativeRoundDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxCumulativeDeltaDiffs: TypedContractMethod<
    [_market: AddressLike, _maxCumulativeDeltaDiff: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxDeviationRatio: TypedContractMethod<
    [_maxDeviationRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceX96s: TypedContractMethod<
    [_marketPrices: IPriceFeed.MarketPriceStruct[]],
    [void],
    "nonpayable"
  >;

  setRefHeartbeatDuration: TypedContractMethod<
    [_market: AddressLike, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRefPriceExtraSample: TypedContractMethod<
    [_refPriceExtraSample: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRefPriceFeed: TypedContractMethod<
    [_market: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setSequencerUptimeFeed: TypedContractMethod<
    [_sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setStableMarketPriceFeed: TypedContractMethod<
    [
      _stableMarketPriceFeed: AddressLike,
      _stableMarketPriceFeedHeartBeatDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setUpdateTxTimeout: TypedContractMethod<
    [_updateTxTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUpdater: TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  slot: TypedContractMethod<[], [IPriceFeed.SlotStructOutput], "view">;

  stableMarketPriceFeed: TypedContractMethod<[], [string], "view">;

  stableMarketPriceFeedHeartBeatDuration: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELTA_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GRACE_PERIOD_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MARKET_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USD_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculatePriceX96s"
  ): TypedContractMethod<
    [_marketPrices: IPriceFeed.MarketPriceStruct[]],
    [[bigint[], bigint[]] & { minPriceX96s: bigint[]; maxPriceX96s: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeGov"
  ): TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMaxPriceX96"
  ): TypedContractMethod<[_market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinPriceX96"
  ): TypedContractMethod<[_market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ignoreReferencePriceFeedError"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUpdater"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "latestPrice"
  ): TypedContractMethod<
    [market: AddressLike],
    [IPriceFeed.PricePackStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketConfig"
  ): TypedContractMethod<
    [market: AddressLike],
    [IPriceFeed.MarketConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sequencerUptimeFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCumulativeRoundDuration"
  ): TypedContractMethod<
    [_cumulativeRoundDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxCumulativeDeltaDiffs"
  ): TypedContractMethod<
    [_market: AddressLike, _maxCumulativeDeltaDiff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDeviationRatio"
  ): TypedContractMethod<
    [_maxDeviationRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceX96s"
  ): TypedContractMethod<
    [_marketPrices: IPriceFeed.MarketPriceStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefHeartbeatDuration"
  ): TypedContractMethod<
    [_market: AddressLike, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefPriceExtraSample"
  ): TypedContractMethod<
    [_refPriceExtraSample: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRefPriceFeed"
  ): TypedContractMethod<
    [_market: AddressLike, _priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSequencerUptimeFeed"
  ): TypedContractMethod<
    [_sequencerUptimeFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStableMarketPriceFeed"
  ): TypedContractMethod<
    [
      _stableMarketPriceFeed: AddressLike,
      _stableMarketPriceFeedHeartBeatDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpdateTxTimeout"
  ): TypedContractMethod<
    [_updateTxTimeout: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpdater"
  ): TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slot"
  ): TypedContractMethod<[], [IPriceFeed.SlotStructOutput], "view">;
  getFunction(
    nameOrSignature: "stableMarketPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stableMarketPriceFeedHeartBeatDuration"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ChangeGovStarted"
  ): TypedContractEvent<
    ChangeGovStartedEvent.InputTuple,
    ChangeGovStartedEvent.OutputTuple,
    ChangeGovStartedEvent.OutputObject
  >;
  getEvent(
    key: "GovChanged"
  ): TypedContractEvent<
    GovChangedEvent.InputTuple,
    GovChangedEvent.OutputTuple,
    GovChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxCumulativeDeltaDiffExceeded"
  ): TypedContractEvent<
    MaxCumulativeDeltaDiffExceededEvent.InputTuple,
    MaxCumulativeDeltaDiffExceededEvent.OutputTuple,
    MaxCumulativeDeltaDiffExceededEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "ChangeGovStarted(address,address)": TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;
    ChangeGovStarted: TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;

    "GovChanged(address,address)": TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;
    GovChanged: TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;

    "MaxCumulativeDeltaDiffExceeded(address,uint160,uint160,uint64,uint64)": TypedContractEvent<
      MaxCumulativeDeltaDiffExceededEvent.InputTuple,
      MaxCumulativeDeltaDiffExceededEvent.OutputTuple,
      MaxCumulativeDeltaDiffExceededEvent.OutputObject
    >;
    MaxCumulativeDeltaDiffExceeded: TypedContractEvent<
      MaxCumulativeDeltaDiffExceededEvent.InputTuple,
      MaxCumulativeDeltaDiffExceededEvent.OutputTuple,
      MaxCumulativeDeltaDiffExceededEvent.OutputObject
    >;

    "PriceUpdated(address,uint160,uint160,uint160)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
