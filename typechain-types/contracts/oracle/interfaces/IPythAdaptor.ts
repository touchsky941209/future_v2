/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPythAdaptor {
  export type PythStructsPriceStruct = {
    price: BigNumberish;
    conf: BigNumberish;
    expo: BigNumberish;
    publishTime: BigNumberish;
  };

  export type PythStructsPriceStructOutput = [
    price: bigint,
    conf: bigint,
    expo: bigint,
    publishTime: bigint
  ] & { price: bigint; conf: bigint; expo: bigint; publishTime: bigint };
}

export interface IPythAdaptorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignAssetsIndexes"
      | "clearPrices"
      | "getPriceUnsafe"
      | "isUpdater"
      | "setUpdater"
      | "updatePriceFeeds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssetIndexAssigned" | "LogVaas"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assignAssetsIndexes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearPrices",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeeds",
    values: [BigNumberish[], BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "assignAssetsIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeeds",
    data: BytesLike
  ): Result;
}

export namespace AssetIndexAssignedEvent {
  export type InputTuple = [asset: BytesLike, index: BigNumberish];
  export type OutputTuple = [asset: string, index: bigint];
  export interface OutputObject {
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVaasEvent {
  export type InputTuple = [encodedVaas: BytesLike];
  export type OutputTuple = [encodedVaas: string];
  export interface OutputObject {
    encodedVaas: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPythAdaptor extends BaseContract {
  connect(runner?: ContractRunner | null): IPythAdaptor;
  waitForDeployment(): Promise<this>;

  interface: IPythAdaptorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignAssetsIndexes: TypedContractMethod<
    [assets: BytesLike[]],
    [void],
    "nonpayable"
  >;

  clearPrices: TypedContractMethod<
    [toClear: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getPriceUnsafe: TypedContractMethod<
    [id: BytesLike],
    [IPythAdaptor.PythStructsPriceStructOutput],
    "view"
  >;

  isUpdater: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setUpdater: TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  updatePriceFeeds: TypedContractMethod<
    [
      prices: BigNumberish[],
      minPublishTime: BigNumberish,
      encodedVaas: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignAssetsIndexes"
  ): TypedContractMethod<[assets: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearPrices"
  ): TypedContractMethod<[toClear: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPriceUnsafe"
  ): TypedContractMethod<
    [id: BytesLike],
    [IPythAdaptor.PythStructsPriceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUpdater"
  ): TypedContractMethod<[account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setUpdater"
  ): TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceFeeds"
  ): TypedContractMethod<
    [
      prices: BigNumberish[],
      minPublishTime: BigNumberish,
      encodedVaas: BytesLike
    ],
    [string[]],
    "nonpayable"
  >;

  getEvent(
    key: "AssetIndexAssigned"
  ): TypedContractEvent<
    AssetIndexAssignedEvent.InputTuple,
    AssetIndexAssignedEvent.OutputTuple,
    AssetIndexAssignedEvent.OutputObject
  >;
  getEvent(
    key: "LogVaas"
  ): TypedContractEvent<
    LogVaasEvent.InputTuple,
    LogVaasEvent.OutputTuple,
    LogVaasEvent.OutputObject
  >;

  filters: {
    "AssetIndexAssigned(bytes32,uint256)": TypedContractEvent<
      AssetIndexAssignedEvent.InputTuple,
      AssetIndexAssignedEvent.OutputTuple,
      AssetIndexAssignedEvent.OutputObject
    >;
    AssetIndexAssigned: TypedContractEvent<
      AssetIndexAssignedEvent.InputTuple,
      AssetIndexAssignedEvent.OutputTuple,
      AssetIndexAssignedEvent.OutputObject
    >;

    "LogVaas(bytes32)": TypedContractEvent<
      LogVaasEvent.InputTuple,
      LogVaasEvent.OutputTuple,
      LogVaasEvent.OutputObject
    >;
    LogVaas: TypedContractEvent<
      LogVaasEvent.InputTuple,
      LogVaasEvent.OutputTuple,
      LogVaasEvent.OutputObject
    >;
  };
}
