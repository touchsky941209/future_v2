/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPythPriceFeed {
  export type MarketConfigStruct = {
    pythAssetId: BytesLike;
    maxDeviationRatio: BigNumberish;
    validTimePeriod: BigNumberish;
    referencePriceAdjustmentMagnification: BigNumberish;
  };

  export type MarketConfigStructOutput = [
    pythAssetId: string,
    maxDeviationRatio: bigint,
    validTimePeriod: bigint,
    referencePriceAdjustmentMagnification: bigint
  ] & {
    pythAssetId: string;
    maxDeviationRatio: bigint;
    validTimePeriod: bigint;
    referencePriceAdjustmentMagnification: bigint;
  };

  export type PricePackStruct = {
    updateTimestamp: BigNumberish;
    maxPriceX96: BigNumberish;
    minPriceX96: BigNumberish;
    updateBlockTimestamp: BigNumberish;
  };

  export type PricePackStructOutput = [
    updateTimestamp: bigint,
    maxPriceX96: bigint,
    minPriceX96: bigint,
    updateBlockTimestamp: bigint
  ] & {
    updateTimestamp: bigint;
    maxPriceX96: bigint;
    minPriceX96: bigint;
    updateBlockTimestamp: bigint;
  };

  export type MarketPriceStruct = {
    market: AddressLike;
    priceX96: BigNumberish;
  };

  export type MarketPriceStructOutput = [market: string, priceX96: bigint] & {
    market: string;
    priceX96: bigint;
  };
}

export interface PythPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELTA_PRECISION"
      | "MARKET_DECIMALS"
      | "USD_DECIMALS"
      | "acceptGov"
      | "changeGov"
      | "getMaxPriceX96"
      | "getMinPriceX96"
      | "gov"
      | "ignoreReferencePriceFeedError"
      | "isUpdater"
      | "latestPrices"
      | "marketConfigs"
      | "pendingGov"
      | "setMarketConfig"
      | "setPriceX96s"
      | "setUpdater"
      | "stableMarketAssetId"
      | "stableMarketValidTimePeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeGovStarted"
      | "GovChanged"
      | "MarketConfigChanged"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELTA_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USD_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPriceX96",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinPriceX96",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ignoreReferencePriceFeedError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketConfig",
    values: [AddressLike, IPythPriceFeed.MarketConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceX96s",
    values: [IPythPriceFeed.MarketPriceStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stableMarketAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableMarketValidTimePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DELTA_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USD_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ignoreReferencePriceFeedError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableMarketAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableMarketValidTimePeriod",
    data: BytesLike
  ): Result;
}

export namespace ChangeGovStartedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovChangedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newConfig: IPythPriceFeed.MarketConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newConfig: IPythPriceFeed.MarketConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newConfig: IPythPriceFeed.MarketConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    market: AddressLike,
    priceX96: BigNumberish,
    minPriceX96: BigNumberish,
    maxPriceX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    priceX96: bigint,
    minPriceX96: bigint,
    maxPriceX96: bigint
  ];
  export interface OutputObject {
    market: string;
    priceX96: bigint;
    minPriceX96: bigint;
    maxPriceX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PythPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): PythPriceFeed;
  waitForDeployment(): Promise<this>;

  interface: PythPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELTA_PRECISION: TypedContractMethod<[], [bigint], "view">;

  MARKET_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  USD_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  changeGov: TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;

  getMaxPriceX96: TypedContractMethod<[_market: AddressLike], [bigint], "view">;

  getMinPriceX96: TypedContractMethod<[_market: AddressLike], [bigint], "view">;

  gov: TypedContractMethod<[], [string], "view">;

  ignoreReferencePriceFeedError: TypedContractMethod<[], [boolean], "view">;

  isUpdater: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  latestPrices: TypedContractMethod<
    [_market: AddressLike],
    [IPythPriceFeed.PricePackStructOutput],
    "view"
  >;

  marketConfigs: TypedContractMethod<
    [_market: AddressLike],
    [IPythPriceFeed.MarketConfigStructOutput],
    "view"
  >;

  pendingGov: TypedContractMethod<[], [string], "view">;

  setMarketConfig: TypedContractMethod<
    [_market: AddressLike, _marketConfig: IPythPriceFeed.MarketConfigStruct],
    [void],
    "nonpayable"
  >;

  setPriceX96s: TypedContractMethod<
    [
      _marketPrices: IPythPriceFeed.MarketPriceStruct[],
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setUpdater: TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  stableMarketAssetId: TypedContractMethod<[], [string], "view">;

  stableMarketValidTimePeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELTA_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MARKET_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USD_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGov"
  ): TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMaxPriceX96"
  ): TypedContractMethod<[_market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinPriceX96"
  ): TypedContractMethod<[_market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ignoreReferencePriceFeedError"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUpdater"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "latestPrices"
  ): TypedContractMethod<
    [_market: AddressLike],
    [IPythPriceFeed.PricePackStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketConfigs"
  ): TypedContractMethod<
    [_market: AddressLike],
    [IPythPriceFeed.MarketConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMarketConfig"
  ): TypedContractMethod<
    [_market: AddressLike, _marketConfig: IPythPriceFeed.MarketConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceX96s"
  ): TypedContractMethod<
    [
      _marketPrices: IPythPriceFeed.MarketPriceStruct[],
      _timestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpdater"
  ): TypedContractMethod<
    [_account: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stableMarketAssetId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stableMarketValidTimePeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ChangeGovStarted"
  ): TypedContractEvent<
    ChangeGovStartedEvent.InputTuple,
    ChangeGovStartedEvent.OutputTuple,
    ChangeGovStartedEvent.OutputObject
  >;
  getEvent(
    key: "GovChanged"
  ): TypedContractEvent<
    GovChangedEvent.InputTuple,
    GovChangedEvent.OutputTuple,
    GovChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketConfigChanged"
  ): TypedContractEvent<
    MarketConfigChangedEvent.InputTuple,
    MarketConfigChangedEvent.OutputTuple,
    MarketConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "ChangeGovStarted(address,address)": TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;
    ChangeGovStarted: TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;

    "GovChanged(address,address)": TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;
    GovChanged: TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;

    "MarketConfigChanged(address,tuple)": TypedContractEvent<
      MarketConfigChangedEvent.InputTuple,
      MarketConfigChangedEvent.OutputTuple,
      MarketConfigChangedEvent.OutputObject
    >;
    MarketConfigChanged: TypedContractEvent<
      MarketConfigChangedEvent.InputTuple,
      MarketConfigChangedEvent.OutputTuple,
      MarketConfigChangedEvent.OutputObject
    >;

    "PriceUpdated(address,uint160,uint160,uint160)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
