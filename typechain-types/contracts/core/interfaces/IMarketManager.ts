/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IConfigurable {
  export type MarketBaseConfigStruct = {
    minMarginPerLiquidityPosition: BigNumberish;
    maxLeveragePerLiquidityPosition: BigNumberish;
    liquidationFeeRatePerLiquidityPosition: BigNumberish;
    minMarginPerPosition: BigNumberish;
    maxLeveragePerPosition: BigNumberish;
    liquidationFeeRatePerPosition: BigNumberish;
    maxPositionLiquidity: BigNumberish;
    maxPositionValueRate: BigNumberish;
    maxSizeRatePerPosition: BigNumberish;
    liquidationExecutionFee: BigNumberish;
    interestRate: BigNumberish;
    maxFundingRate: BigNumberish;
  };

  export type MarketBaseConfigStructOutput = [
    minMarginPerLiquidityPosition: bigint,
    maxLeveragePerLiquidityPosition: bigint,
    liquidationFeeRatePerLiquidityPosition: bigint,
    minMarginPerPosition: bigint,
    maxLeveragePerPosition: bigint,
    liquidationFeeRatePerPosition: bigint,
    maxPositionLiquidity: bigint,
    maxPositionValueRate: bigint,
    maxSizeRatePerPosition: bigint,
    liquidationExecutionFee: bigint,
    interestRate: bigint,
    maxFundingRate: bigint
  ] & {
    minMarginPerLiquidityPosition: bigint;
    maxLeveragePerLiquidityPosition: bigint;
    liquidationFeeRatePerLiquidityPosition: bigint;
    minMarginPerPosition: bigint;
    maxLeveragePerPosition: bigint;
    liquidationFeeRatePerPosition: bigint;
    maxPositionLiquidity: bigint;
    maxPositionValueRate: bigint;
    maxSizeRatePerPosition: bigint;
    liquidationExecutionFee: bigint;
    interestRate: bigint;
    maxFundingRate: bigint;
  };

  export type MarketFeeRateConfigStruct = {
    tradingFeeRate: BigNumberish;
    protocolFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralDiscountRate: BigNumberish;
  };

  export type MarketFeeRateConfigStructOutput = [
    tradingFeeRate: bigint,
    protocolFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralDiscountRate: bigint
  ] & {
    tradingFeeRate: bigint;
    protocolFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralDiscountRate: bigint;
  };

  export type VertexConfigStruct = {
    balanceRate: BigNumberish;
    premiumRate: BigNumberish;
  };

  export type VertexConfigStructOutput = [
    balanceRate: bigint,
    premiumRate: bigint
  ] & { balanceRate: bigint; premiumRate: bigint };

  export type MarketPriceConfigStruct = {
    maxPriceImpactLiquidity: BigNumberish;
    liquidationVertexIndex: BigNumberish;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type MarketPriceConfigStructOutput = [
    maxPriceImpactLiquidity: bigint,
    liquidationVertexIndex: bigint,
    vertices: IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: bigint;
    liquidationVertexIndex: bigint;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };

  export type MarketConfigStruct = {
    baseConfig: IConfigurable.MarketBaseConfigStruct;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStruct;
    priceConfig: IConfigurable.MarketPriceConfigStruct;
  };

  export type MarketConfigStructOutput = [
    baseConfig: IConfigurable.MarketBaseConfigStructOutput,
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput,
    priceConfig: IConfigurable.MarketPriceConfigStructOutput
  ] & {
    baseConfig: IConfigurable.MarketBaseConfigStructOutput;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
    priceConfig: IConfigurable.MarketPriceConfigStructOutput;
  };
}

export declare namespace IMarketPosition {
  export type GlobalFundingRateSampleStruct = {
    lastAdjustFundingRateTime: BigNumberish;
    sampleCount: BigNumberish;
    cumulativePremiumRateX96: BigNumberish;
  };

  export type GlobalFundingRateSampleStructOutput = [
    lastAdjustFundingRateTime: bigint,
    sampleCount: bigint,
    cumulativePremiumRateX96: bigint
  ] & {
    lastAdjustFundingRateTime: bigint;
    sampleCount: bigint;
    cumulativePremiumRateX96: bigint;
  };

  export type GlobalPositionStruct = {
    longSize: BigNumberish;
    shortSize: BigNumberish;
    maxSize: BigNumberish;
    maxSizePerPosition: BigNumberish;
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type GlobalPositionStructOutput = [
    longSize: bigint,
    shortSize: bigint,
    maxSize: bigint,
    maxSizePerPosition: bigint,
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & {
    longSize: bigint;
    shortSize: bigint;
    maxSize: bigint;
    maxSizePerPosition: bigint;
    longFundingRateGrowthX96: bigint;
    shortFundingRateGrowthX96: bigint;
  };

  export type PositionStruct = {
    margin: BigNumberish;
    size: BigNumberish;
    entryPriceX96: BigNumberish;
    entryFundingRateGrowthX96: BigNumberish;
  };

  export type PositionStructOutput = [
    margin: bigint,
    size: bigint,
    entryPriceX96: bigint,
    entryFundingRateGrowthX96: bigint
  ] & {
    margin: bigint;
    size: bigint;
    entryPriceX96: bigint;
    entryFundingRateGrowthX96: bigint;
  };

  export type PreviousGlobalFundingRateStruct = {
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type PreviousGlobalFundingRateStructOutput = [
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & { longFundingRateGrowthX96: bigint; shortFundingRateGrowthX96: bigint };
}

export declare namespace IMarketManager {
  export type GlobalLiquidationFundStruct = {
    liquidationFund: BigNumberish;
    liquidity: BigNumberish;
  };

  export type GlobalLiquidationFundStructOutput = [
    liquidationFund: bigint,
    liquidity: bigint
  ] & { liquidationFund: bigint; liquidity: bigint };

  export type PriceVertexStruct = {
    size: BigNumberish;
    premiumRateX96: BigNumberish;
  };

  export type PriceVertexStructOutput = [
    size: bigint,
    premiumRateX96: bigint
  ] & { size: bigint; premiumRateX96: bigint };

  export type PriceStateStruct = {
    premiumRateX96: BigNumberish;
    pendingVertexIndex: BigNumberish;
    currentVertexIndex: BigNumberish;
    basisIndexPriceX96: BigNumberish;
    priceVertices: IMarketManager.PriceVertexStruct[];
    liquidationBufferNetSizes: BigNumberish[];
  };

  export type PriceStateStructOutput = [
    premiumRateX96: bigint,
    pendingVertexIndex: bigint,
    currentVertexIndex: bigint,
    basisIndexPriceX96: bigint,
    priceVertices: IMarketManager.PriceVertexStructOutput[],
    liquidationBufferNetSizes: bigint[]
  ] & {
    premiumRateX96: bigint;
    pendingVertexIndex: bigint;
    currentVertexIndex: bigint;
    basisIndexPriceX96: bigint;
    priceVertices: IMarketManager.PriceVertexStructOutput[];
    liquidationBufferNetSizes: bigint[];
  };
}

export declare namespace IMarketLiquidityPosition {
  export type GlobalLiquidityPositionStruct = {
    netSize: BigNumberish;
    liquidationBufferNetSize: BigNumberish;
    previousSPPriceX96: BigNumberish;
    side: BigNumberish;
    liquidity: BigNumberish;
    unrealizedPnLGrowthX64: BigNumberish;
  };

  export type GlobalLiquidityPositionStructOutput = [
    netSize: bigint,
    liquidationBufferNetSize: bigint,
    previousSPPriceX96: bigint,
    side: bigint,
    liquidity: bigint,
    unrealizedPnLGrowthX64: bigint
  ] & {
    netSize: bigint;
    liquidationBufferNetSize: bigint;
    previousSPPriceX96: bigint;
    side: bigint;
    liquidity: bigint;
    unrealizedPnLGrowthX64: bigint;
  };

  export type LiquidityPositionStruct = {
    margin: BigNumberish;
    liquidity: BigNumberish;
    entryUnrealizedPnLGrowthX64: BigNumberish;
  };

  export type LiquidityPositionStructOutput = [
    margin: bigint,
    liquidity: bigint,
    entryUnrealizedPnLGrowthX64: bigint
  ] & {
    margin: bigint;
    liquidity: bigint;
    entryUnrealizedPnLGrowthX64: bigint;
  };
}

export interface IMarketManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USD"
      | "changePriceVertex"
      | "collectProtocolFee"
      | "collectReferralFee"
      | "decreaseLiquidationFundPosition"
      | "decreaseLiquidityPosition"
      | "decreasePosition"
      | "enableMarket"
      | "globalFundingRateSamples"
      | "globalLiquidationFunds"
      | "globalLiquidityPositions"
      | "globalPositions"
      | "govUseLiquidationFund"
      | "increaseLiquidationFundPosition"
      | "increaseLiquidityPosition"
      | "increasePosition"
      | "isEnabledMarket"
      | "liquidateLiquidityPosition"
      | "liquidatePosition"
      | "liquidationFundPositions"
      | "liquidityPositions"
      | "marketBaseConfigs"
      | "marketFeeRateConfigs"
      | "marketPriceConfigs"
      | "marketPriceVertexConfigs"
      | "marketPriceX96s"
      | "positions"
      | "previousGlobalFundingRates"
      | "priceStates"
      | "protocolFees"
      | "referralFees"
      | "sampleAndAdjustFundingRate"
      | "setPriceFeed"
      | "updateMarketBaseConfig"
      | "updateMarketFeeRateConfig"
      | "updateMarketPriceConfig"
      | "usdBalances"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BasisIndexPriceChanged"
      | "FundingRateGrowthAdjusted"
      | "GlobalFundingRateSampleAdjusted"
      | "GlobalLiquidationFundGovUsed"
      | "GlobalLiquidationFundIncreasedByLiquidation"
      | "GlobalLiquidityPositionNetPositionChanged"
      | "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee"
      | "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee"
      | "GlobalPositionSizeChanged"
      | "LiquidationBufferNetSizeChanged"
      | "LiquidationFundPositionDecreased"
      | "LiquidationFundPositionIncreased"
      | "LiquidityPositionDecreased"
      | "LiquidityPositionIncreased"
      | "LiquidityPositionLiquidated"
      | "MarketBaseConfigChanged"
      | "MarketConfigEnabled"
      | "MarketFeeRateConfigChanged"
      | "MarketPriceConfigChanged"
      | "PositionDecreased"
      | "PositionIncreased"
      | "PositionLiquidated"
      | "PremiumRateChanged"
      | "PreviousSPPriceInitialized"
      | "PriceFeedChanged"
      | "PriceVertexChanged"
      | "ProtocolFeeCollected"
      | "ProtocolFeeIncreased"
      | "ReferralFeeCollected"
      | "ReferralFeeIncreased"
      | "SettlementPointReached"
      | "USDEnabled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePriceVertex",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReferralFee",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidationFundPosition",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityPosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMarket",
    values: [AddressLike, IConfigurable.MarketConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFundingRateSamples",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidationFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "govUseLiquidationFund",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidationFundPosition",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityPosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabledMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLiquidityPosition",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFundPositions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBaseConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFeeRateConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceVertexConfigs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceX96s",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousGlobalFundingRates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralFees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sampleAndAdjustFundingRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketBaseConfig",
    values: [AddressLike, IConfigurable.MarketBaseConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFeeRateConfig",
    values: [AddressLike, IConfigurable.MarketFeeRateConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketPriceConfig",
    values: [AddressLike, IConfigurable.MarketPriceConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "usdBalances",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePriceVertex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReferralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidationFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFundingRateSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidationFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "govUseLiquidationFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidationFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFundPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBaseConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFeeRateConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceVertexConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceX96s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousGlobalFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleAndAdjustFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketBaseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFeeRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketPriceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdBalances",
    data: BytesLike
  ): Result;
}

export namespace BasisIndexPriceChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    basisIndexPriceAfterX96: BigNumberish
  ];
  export type OutputTuple = [market: string, basisIndexPriceAfterX96: bigint];
  export interface OutputObject {
    market: string;
    basisIndexPriceAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingRateGrowthAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    fundingRateDeltaX96: BigNumberish,
    longFundingRateGrowthAfterX96: BigNumberish,
    shortFundingRateGrowthAfterX96: BigNumberish,
    lastAdjustFundingRateTime: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    fundingRateDeltaX96: bigint,
    longFundingRateGrowthAfterX96: bigint,
    shortFundingRateGrowthAfterX96: bigint,
    lastAdjustFundingRateTime: bigint
  ];
  export interface OutputObject {
    market: string;
    fundingRateDeltaX96: bigint;
    longFundingRateGrowthAfterX96: bigint;
    shortFundingRateGrowthAfterX96: bigint;
    lastAdjustFundingRateTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalFundingRateSampleAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    sampleCountAfter: BigNumberish,
    cumulativePremiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    sampleCountAfter: bigint,
    cumulativePremiumRateAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    sampleCountAfter: bigint;
    cumulativePremiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidationFundGovUsedEvent {
  export type InputTuple = [
    market: AddressLike,
    receiver: AddressLike,
    liquidationFundDelta: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    receiver: string,
    liquidationFundDelta: bigint
  ];
  export interface OutputObject {
    market: string;
    receiver: string;
    liquidationFundDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidationFundIncreasedByLiquidationEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidationFee: BigNumberish,
    liquidationFundAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    liquidationFee: bigint,
    liquidationFundAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    liquidationFee: bigint;
    liquidationFundAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidityPositionNetPositionChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    sideAfter: BigNumberish,
    netSizeAfter: BigNumberish,
    liquidationBufferNetSizeAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    sideAfter: bigint,
    netSizeAfter: bigint,
    liquidationBufferNetSizeAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    sideAfter: bigint;
    netSizeAfter: bigint;
    liquidationBufferNetSizeAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent {
  export type InputTuple = [
    market: AddressLike,
    unrealizedPnLGrowthAfterX64: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    unrealizedPnLGrowthAfterX64: bigint
  ];
  export interface OutputObject {
    market: string;
    unrealizedPnLGrowthAfterX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidityFee: BigNumberish,
    unrealizedPnLGrowthAfterX64: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    liquidityFee: bigint,
    unrealizedPnLGrowthAfterX64: bigint
  ];
  export interface OutputObject {
    market: string;
    liquidityFee: bigint;
    unrealizedPnLGrowthAfterX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalPositionSizeChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    maxSizeAfter: BigNumberish,
    maxSizePerPositionAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    maxSizeAfter: bigint,
    maxSizePerPositionAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    maxSizeAfter: bigint;
    maxSizePerPositionAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationBufferNetSizeChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    index: BigNumberish,
    netSizeAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    index: bigint,
    netSizeAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    index: bigint;
    netSizeAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationFundPositionDecreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    liquidityAfter: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    liquidityAfter: bigint,
    receiver: string
  ];
  export interface OutputObject {
    market: string;
    account: string;
    liquidityAfter: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationFundPositionIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    liquidityAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    liquidityAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    account: string;
    liquidityAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityPositionDecreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    liquidityAfter: BigNumberish,
    realizedPnLDelta: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    marginDelta: bigint,
    marginAfter: bigint,
    liquidityAfter: bigint,
    realizedPnLDelta: bigint,
    receiver: string
  ];
  export interface OutputObject {
    market: string;
    account: string;
    marginDelta: bigint;
    marginAfter: bigint;
    liquidityAfter: bigint;
    realizedPnLDelta: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityPositionIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    liquidityAfter: BigNumberish,
    realizedPnLDelta: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    marginDelta: bigint,
    marginAfter: bigint,
    liquidityAfter: bigint,
    realizedPnLDelta: bigint
  ];
  export interface OutputObject {
    market: string;
    account: string;
    marginDelta: bigint;
    marginAfter: bigint;
    liquidityAfter: bigint;
    realizedPnLDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityPositionLiquidatedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    liquidator: AddressLike,
    liquidationLoss: BigNumberish,
    unrealizedPnLGrowthAfterX64: BigNumberish,
    feeReceiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    liquidator: string,
    liquidationLoss: bigint,
    unrealizedPnLGrowthAfterX64: bigint,
    feeReceiver: string
  ];
  export interface OutputObject {
    market: string;
    account: string;
    liquidator: string;
    liquidationLoss: bigint;
    unrealizedPnLGrowthAfterX64: bigint;
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketBaseConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketBaseConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketBaseConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketBaseConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketConfigEnabledEvent {
  export type InputTuple = [
    market: AddressLike,
    baseCfg: IConfigurable.MarketBaseConfigStruct,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStruct,
    priceCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    baseCfg: IConfigurable.MarketBaseConfigStructOutput,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput,
    priceCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    baseCfg: IConfigurable.MarketBaseConfigStructOutput;
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput;
    priceCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketFeeRateConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketFeeRateConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPriceConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionDecreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    sizeAfter: BigNumberish,
    tradePriceX96: BigNumberish,
    realizedPnLDelta: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    marginAfter: bigint,
    sizeAfter: bigint,
    tradePriceX96: bigint,
    realizedPnLDelta: bigint,
    fundingFee: bigint,
    tradingFee: bigint,
    receiver: string
  ];
  export interface OutputObject {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    marginAfter: bigint;
    sizeAfter: bigint;
    tradePriceX96: bigint;
    realizedPnLDelta: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    sizeAfter: BigNumberish,
    tradePriceX96: BigNumberish,
    entryPriceAfterX96: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    marginAfter: bigint,
    sizeAfter: bigint,
    tradePriceX96: bigint,
    entryPriceAfterX96: bigint,
    fundingFee: bigint,
    tradingFee: bigint
  ];
  export interface OutputObject {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    marginAfter: bigint;
    sizeAfter: bigint;
    tradePriceX96: bigint;
    entryPriceAfterX96: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLiquidatedEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidator: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    indexPriceX96: BigNumberish,
    tradePriceX96: BigNumberish,
    liquidationPriceX96: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish,
    liquidationFee: BigNumberish,
    liquidationExecutionFee: BigNumberish,
    feeReceiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    liquidator: string,
    account: string,
    side: bigint,
    indexPriceX96: bigint,
    tradePriceX96: bigint,
    liquidationPriceX96: bigint,
    fundingFee: bigint,
    tradingFee: bigint,
    liquidationFee: bigint,
    liquidationExecutionFee: bigint,
    feeReceiver: string
  ];
  export interface OutputObject {
    market: string;
    liquidator: string;
    account: string;
    side: bigint;
    indexPriceX96: bigint;
    tradePriceX96: bigint;
    liquidationPriceX96: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
    liquidationFee: bigint;
    liquidationExecutionFee: bigint;
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumRateChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    premiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [market: string, premiumRateAfterX96: bigint];
  export interface OutputObject {
    market: string;
    premiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreviousSPPriceInitializedEvent {
  export type InputTuple = [
    market: AddressLike,
    previousSPPriceX96: BigNumberish
  ];
  export type OutputTuple = [market: string, previousSPPriceX96: bigint];
  export interface OutputObject {
    market: string;
    previousSPPriceX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedChangedEvent {
  export type InputTuple = [
    priceFeedBefore: AddressLike,
    priceFeedAfter: AddressLike
  ];
  export type OutputTuple = [priceFeedBefore: string, priceFeedAfter: string];
  export interface OutputObject {
    priceFeedBefore: string;
    priceFeedAfter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceVertexChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    index: BigNumberish,
    sizeAfter: BigNumberish,
    premiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    index: bigint,
    sizeAfter: bigint,
    premiumRateAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    index: bigint;
    sizeAfter: bigint;
    premiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeCollectedEvent {
  export type InputTuple = [market: AddressLike, amount: BigNumberish];
  export type OutputTuple = [market: string, amount: bigint];
  export interface OutputObject {
    market: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeIncreasedEvent {
  export type InputTuple = [market: AddressLike, amount: BigNumberish];
  export type OutputTuple = [market: string, amount: bigint];
  export interface OutputObject {
    market: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeeCollectedEvent {
  export type InputTuple = [
    market: AddressLike,
    referralToken: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    referralToken: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    market: string;
    referralToken: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeeIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    referee: AddressLike,
    referralToken: BigNumberish,
    referralFee: BigNumberish,
    referralParentToken: BigNumberish,
    referralParentFee: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    referee: string,
    referralToken: bigint,
    referralFee: bigint,
    referralParentToken: bigint,
    referralParentFee: bigint
  ];
  export interface OutputObject {
    market: string;
    referee: string;
    referralToken: bigint;
    referralFee: bigint;
    referralParentToken: bigint;
    referralParentFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementPointReachedEvent {
  export type InputTuple = [
    market: AddressLike,
    unrealizedPnLGrowthAfterX64: BigNumberish,
    previousSPPriceAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    unrealizedPnLGrowthAfterX64: bigint,
    previousSPPriceAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    unrealizedPnLGrowthAfterX64: bigint;
    previousSPPriceAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDEnabledEvent {
  export type InputTuple = [usd: AddressLike];
  export type OutputTuple = [usd: string];
  export interface OutputObject {
    usd: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMarketManager extends BaseContract {
  connect(runner?: ContractRunner | null): IMarketManager;
  waitForDeployment(): Promise<this>;

  interface: IMarketManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USD: TypedContractMethod<[], [string], "view">;

  changePriceVertex: TypedContractMethod<
    [
      market: AddressLike,
      startExclusive: BigNumberish,
      endInclusive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  collectProtocolFee: TypedContractMethod<
    [market: AddressLike],
    [void],
    "nonpayable"
  >;

  collectReferralFee: TypedContractMethod<
    [market: AddressLike, referralToken: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  decreaseLiquidationFundPosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      liquidityDelta: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  decreaseLiquidityPosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  decreasePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  enableMarket: TypedContractMethod<
    [market: AddressLike, cfg: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;

  globalFundingRateSamples: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalFundingRateSampleStructOutput],
    "view"
  >;

  globalLiquidationFunds: TypedContractMethod<
    [market: AddressLike],
    [IMarketManager.GlobalLiquidationFundStructOutput],
    "view"
  >;

  globalLiquidityPositions: TypedContractMethod<
    [market: AddressLike],
    [IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput],
    "view"
  >;

  globalPositions: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalPositionStructOutput],
    "view"
  >;

  govUseLiquidationFund: TypedContractMethod<
    [
      market: AddressLike,
      receiver: AddressLike,
      liquidationFundDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  increaseLiquidationFundPosition: TypedContractMethod<
    [market: AddressLike, account: AddressLike, liquidityDelta: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseLiquidityPosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  increasePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  isEnabledMarket: TypedContractMethod<
    [market: AddressLike],
    [boolean],
    "view"
  >;

  liquidateLiquidityPosition: TypedContractMethod<
    [market: AddressLike, account: AddressLike, feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidatePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  liquidationFundPositions: TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  liquidityPositions: TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [IMarketLiquidityPosition.LiquidityPositionStructOutput],
    "view"
  >;

  marketBaseConfigs: TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketBaseConfigStructOutput],
    "view"
  >;

  marketFeeRateConfigs: TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketFeeRateConfigStructOutput],
    "view"
  >;

  marketPriceConfigs: TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketPriceConfigStructOutput],
    "view"
  >;

  marketPriceVertexConfigs: TypedContractMethod<
    [market: AddressLike, index: BigNumberish],
    [IConfigurable.VertexConfigStructOutput],
    "view"
  >;

  marketPriceX96s: TypedContractMethod<
    [market: AddressLike, side: BigNumberish],
    [bigint],
    "view"
  >;

  positions: TypedContractMethod<
    [market: AddressLike, account: AddressLike, side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;

  previousGlobalFundingRates: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.PreviousGlobalFundingRateStructOutput],
    "view"
  >;

  priceStates: TypedContractMethod<
    [market: AddressLike],
    [IMarketManager.PriceStateStructOutput],
    "view"
  >;

  protocolFees: TypedContractMethod<[market: AddressLike], [bigint], "view">;

  referralFees: TypedContractMethod<
    [market: AddressLike, referralToken: BigNumberish],
    [bigint],
    "view"
  >;

  sampleAndAdjustFundingRate: TypedContractMethod<
    [market: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMarketBaseConfig: TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketBaseConfigStruct],
    [void],
    "nonpayable"
  >;

  updateMarketFeeRateConfig: TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketFeeRateConfigStruct],
    [void],
    "nonpayable"
  >;

  updateMarketPriceConfig: TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketPriceConfigStruct],
    [void],
    "nonpayable"
  >;

  usdBalances: TypedContractMethod<[market: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changePriceVertex"
  ): TypedContractMethod<
    [
      market: AddressLike,
      startExclusive: BigNumberish,
      endInclusive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectProtocolFee"
  ): TypedContractMethod<[market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectReferralFee"
  ): TypedContractMethod<
    [market: AddressLike, referralToken: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidationFundPosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      liquidityDelta: BigNumberish,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidityPosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableMarket"
  ): TypedContractMethod<
    [market: AddressLike, cfg: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "globalFundingRateSamples"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalFundingRateSampleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalLiquidationFunds"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketManager.GlobalLiquidationFundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalLiquidityPositions"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalPositions"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "govUseLiquidationFund"
  ): TypedContractMethod<
    [
      market: AddressLike,
      receiver: AddressLike,
      liquidationFundDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidationFundPosition"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, liquidityDelta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidityPosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isEnabledMarket"
  ): TypedContractMethod<[market: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateLiquidityPosition"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidatePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationFundPositions"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityPositions"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike],
    [IMarketLiquidityPosition.LiquidityPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketBaseConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketBaseConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketFeeRateConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketFeeRateConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPriceConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [IConfigurable.MarketPriceConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPriceVertexConfigs"
  ): TypedContractMethod<
    [market: AddressLike, index: BigNumberish],
    [IConfigurable.VertexConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPriceX96s"
  ): TypedContractMethod<
    [market: AddressLike, side: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previousGlobalFundingRates"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.PreviousGlobalFundingRateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceStates"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketManager.PriceStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFees"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralFees"
  ): TypedContractMethod<
    [market: AddressLike, referralToken: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "sampleAndAdjustFundingRate"
  ): TypedContractMethod<[market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<[priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketBaseConfig"
  ): TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketBaseConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketFeeRateConfig"
  ): TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketFeeRateConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketPriceConfig"
  ): TypedContractMethod<
    [market: AddressLike, newCfg: IConfigurable.MarketPriceConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdBalances"
  ): TypedContractMethod<[market: AddressLike], [bigint], "view">;

  getEvent(
    key: "BasisIndexPriceChanged"
  ): TypedContractEvent<
    BasisIndexPriceChangedEvent.InputTuple,
    BasisIndexPriceChangedEvent.OutputTuple,
    BasisIndexPriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "FundingRateGrowthAdjusted"
  ): TypedContractEvent<
    FundingRateGrowthAdjustedEvent.InputTuple,
    FundingRateGrowthAdjustedEvent.OutputTuple,
    FundingRateGrowthAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalFundingRateSampleAdjusted"
  ): TypedContractEvent<
    GlobalFundingRateSampleAdjustedEvent.InputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidationFundGovUsed"
  ): TypedContractEvent<
    GlobalLiquidationFundGovUsedEvent.InputTuple,
    GlobalLiquidationFundGovUsedEvent.OutputTuple,
    GlobalLiquidationFundGovUsedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidationFundIncreasedByLiquidation"
  ): TypedContractEvent<
    GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
    GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
    GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidityPositionNetPositionChanged"
  ): TypedContractEvent<
    GlobalLiquidityPositionNetPositionChangedEvent.InputTuple,
    GlobalLiquidityPositionNetPositionChangedEvent.OutputTuple,
    GlobalLiquidityPositionNetPositionChangedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee"
  ): TypedContractEvent<
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee"
  ): TypedContractEvent<
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
  >;
  getEvent(
    key: "GlobalPositionSizeChanged"
  ): TypedContractEvent<
    GlobalPositionSizeChangedEvent.InputTuple,
    GlobalPositionSizeChangedEvent.OutputTuple,
    GlobalPositionSizeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationBufferNetSizeChanged"
  ): TypedContractEvent<
    LiquidationBufferNetSizeChangedEvent.InputTuple,
    LiquidationBufferNetSizeChangedEvent.OutputTuple,
    LiquidationBufferNetSizeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationFundPositionDecreased"
  ): TypedContractEvent<
    LiquidationFundPositionDecreasedEvent.InputTuple,
    LiquidationFundPositionDecreasedEvent.OutputTuple,
    LiquidationFundPositionDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationFundPositionIncreased"
  ): TypedContractEvent<
    LiquidationFundPositionIncreasedEvent.InputTuple,
    LiquidationFundPositionIncreasedEvent.OutputTuple,
    LiquidationFundPositionIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityPositionDecreased"
  ): TypedContractEvent<
    LiquidityPositionDecreasedEvent.InputTuple,
    LiquidityPositionDecreasedEvent.OutputTuple,
    LiquidityPositionDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityPositionIncreased"
  ): TypedContractEvent<
    LiquidityPositionIncreasedEvent.InputTuple,
    LiquidityPositionIncreasedEvent.OutputTuple,
    LiquidityPositionIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityPositionLiquidated"
  ): TypedContractEvent<
    LiquidityPositionLiquidatedEvent.InputTuple,
    LiquidityPositionLiquidatedEvent.OutputTuple,
    LiquidityPositionLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketBaseConfigChanged"
  ): TypedContractEvent<
    MarketBaseConfigChangedEvent.InputTuple,
    MarketBaseConfigChangedEvent.OutputTuple,
    MarketBaseConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketConfigEnabled"
  ): TypedContractEvent<
    MarketConfigEnabledEvent.InputTuple,
    MarketConfigEnabledEvent.OutputTuple,
    MarketConfigEnabledEvent.OutputObject
  >;
  getEvent(
    key: "MarketFeeRateConfigChanged"
  ): TypedContractEvent<
    MarketFeeRateConfigChangedEvent.InputTuple,
    MarketFeeRateConfigChangedEvent.OutputTuple,
    MarketFeeRateConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPriceConfigChanged"
  ): TypedContractEvent<
    MarketPriceConfigChangedEvent.InputTuple,
    MarketPriceConfigChangedEvent.OutputTuple,
    MarketPriceConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "PositionDecreased"
  ): TypedContractEvent<
    PositionDecreasedEvent.InputTuple,
    PositionDecreasedEvent.OutputTuple,
    PositionDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "PositionIncreased"
  ): TypedContractEvent<
    PositionIncreasedEvent.InputTuple,
    PositionIncreasedEvent.OutputTuple,
    PositionIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "PositionLiquidated"
  ): TypedContractEvent<
    PositionLiquidatedEvent.InputTuple,
    PositionLiquidatedEvent.OutputTuple,
    PositionLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumRateChanged"
  ): TypedContractEvent<
    PremiumRateChangedEvent.InputTuple,
    PremiumRateChangedEvent.OutputTuple,
    PremiumRateChangedEvent.OutputObject
  >;
  getEvent(
    key: "PreviousSPPriceInitialized"
  ): TypedContractEvent<
    PreviousSPPriceInitializedEvent.InputTuple,
    PreviousSPPriceInitializedEvent.OutputTuple,
    PreviousSPPriceInitializedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedChanged"
  ): TypedContractEvent<
    PriceFeedChangedEvent.InputTuple,
    PriceFeedChangedEvent.OutputTuple,
    PriceFeedChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceVertexChanged"
  ): TypedContractEvent<
    PriceVertexChangedEvent.InputTuple,
    PriceVertexChangedEvent.OutputTuple,
    PriceVertexChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeCollected"
  ): TypedContractEvent<
    ProtocolFeeCollectedEvent.InputTuple,
    ProtocolFeeCollectedEvent.OutputTuple,
    ProtocolFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeIncreased"
  ): TypedContractEvent<
    ProtocolFeeIncreasedEvent.InputTuple,
    ProtocolFeeIncreasedEvent.OutputTuple,
    ProtocolFeeIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeeCollected"
  ): TypedContractEvent<
    ReferralFeeCollectedEvent.InputTuple,
    ReferralFeeCollectedEvent.OutputTuple,
    ReferralFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeeIncreased"
  ): TypedContractEvent<
    ReferralFeeIncreasedEvent.InputTuple,
    ReferralFeeIncreasedEvent.OutputTuple,
    ReferralFeeIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementPointReached"
  ): TypedContractEvent<
    SettlementPointReachedEvent.InputTuple,
    SettlementPointReachedEvent.OutputTuple,
    SettlementPointReachedEvent.OutputObject
  >;
  getEvent(
    key: "USDEnabled"
  ): TypedContractEvent<
    USDEnabledEvent.InputTuple,
    USDEnabledEvent.OutputTuple,
    USDEnabledEvent.OutputObject
  >;

  filters: {
    "BasisIndexPriceChanged(address,uint160)": TypedContractEvent<
      BasisIndexPriceChangedEvent.InputTuple,
      BasisIndexPriceChangedEvent.OutputTuple,
      BasisIndexPriceChangedEvent.OutputObject
    >;
    BasisIndexPriceChanged: TypedContractEvent<
      BasisIndexPriceChangedEvent.InputTuple,
      BasisIndexPriceChangedEvent.OutputTuple,
      BasisIndexPriceChangedEvent.OutputObject
    >;

    "FundingRateGrowthAdjusted(address,int256,int192,int192,uint64)": TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;
    FundingRateGrowthAdjusted: TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;

    "GlobalFundingRateSampleAdjusted(address,uint16,int176)": TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;
    GlobalFundingRateSampleAdjusted: TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;

    "GlobalLiquidationFundGovUsed(address,address,uint128)": TypedContractEvent<
      GlobalLiquidationFundGovUsedEvent.InputTuple,
      GlobalLiquidationFundGovUsedEvent.OutputTuple,
      GlobalLiquidationFundGovUsedEvent.OutputObject
    >;
    GlobalLiquidationFundGovUsed: TypedContractEvent<
      GlobalLiquidationFundGovUsedEvent.InputTuple,
      GlobalLiquidationFundGovUsedEvent.OutputTuple,
      GlobalLiquidationFundGovUsedEvent.OutputObject
    >;

    "GlobalLiquidationFundIncreasedByLiquidation(address,int256,int256)": TypedContractEvent<
      GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
    >;
    GlobalLiquidationFundIncreasedByLiquidation: TypedContractEvent<
      GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
    >;

    "GlobalLiquidityPositionNetPositionChanged(address,uint8,uint128,uint128)": TypedContractEvent<
      GlobalLiquidityPositionNetPositionChangedEvent.InputTuple,
      GlobalLiquidityPositionNetPositionChangedEvent.OutputTuple,
      GlobalLiquidityPositionNetPositionChangedEvent.OutputObject
    >;
    GlobalLiquidityPositionNetPositionChanged: TypedContractEvent<
      GlobalLiquidityPositionNetPositionChangedEvent.InputTuple,
      GlobalLiquidityPositionNetPositionChangedEvent.OutputTuple,
      GlobalLiquidityPositionNetPositionChangedEvent.OutputObject
    >;

    "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee(address,int256)": TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
    >;
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee: TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
    >;

    "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee(address,uint128,int256)": TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
    >;
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee: TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
    >;

    "GlobalPositionSizeChanged(address,uint128,uint128)": TypedContractEvent<
      GlobalPositionSizeChangedEvent.InputTuple,
      GlobalPositionSizeChangedEvent.OutputTuple,
      GlobalPositionSizeChangedEvent.OutputObject
    >;
    GlobalPositionSizeChanged: TypedContractEvent<
      GlobalPositionSizeChangedEvent.InputTuple,
      GlobalPositionSizeChangedEvent.OutputTuple,
      GlobalPositionSizeChangedEvent.OutputObject
    >;

    "LiquidationBufferNetSizeChanged(address,uint8,uint128)": TypedContractEvent<
      LiquidationBufferNetSizeChangedEvent.InputTuple,
      LiquidationBufferNetSizeChangedEvent.OutputTuple,
      LiquidationBufferNetSizeChangedEvent.OutputObject
    >;
    LiquidationBufferNetSizeChanged: TypedContractEvent<
      LiquidationBufferNetSizeChangedEvent.InputTuple,
      LiquidationBufferNetSizeChangedEvent.OutputTuple,
      LiquidationBufferNetSizeChangedEvent.OutputObject
    >;

    "LiquidationFundPositionDecreased(address,address,uint256,address)": TypedContractEvent<
      LiquidationFundPositionDecreasedEvent.InputTuple,
      LiquidationFundPositionDecreasedEvent.OutputTuple,
      LiquidationFundPositionDecreasedEvent.OutputObject
    >;
    LiquidationFundPositionDecreased: TypedContractEvent<
      LiquidationFundPositionDecreasedEvent.InputTuple,
      LiquidationFundPositionDecreasedEvent.OutputTuple,
      LiquidationFundPositionDecreasedEvent.OutputObject
    >;

    "LiquidationFundPositionIncreased(address,address,uint256)": TypedContractEvent<
      LiquidationFundPositionIncreasedEvent.InputTuple,
      LiquidationFundPositionIncreasedEvent.OutputTuple,
      LiquidationFundPositionIncreasedEvent.OutputObject
    >;
    LiquidationFundPositionIncreased: TypedContractEvent<
      LiquidationFundPositionIncreasedEvent.InputTuple,
      LiquidationFundPositionIncreasedEvent.OutputTuple,
      LiquidationFundPositionIncreasedEvent.OutputObject
    >;

    "LiquidityPositionDecreased(address,address,uint128,uint128,uint128,int256,address)": TypedContractEvent<
      LiquidityPositionDecreasedEvent.InputTuple,
      LiquidityPositionDecreasedEvent.OutputTuple,
      LiquidityPositionDecreasedEvent.OutputObject
    >;
    LiquidityPositionDecreased: TypedContractEvent<
      LiquidityPositionDecreasedEvent.InputTuple,
      LiquidityPositionDecreasedEvent.OutputTuple,
      LiquidityPositionDecreasedEvent.OutputObject
    >;

    "LiquidityPositionIncreased(address,address,uint128,uint128,uint128,int256)": TypedContractEvent<
      LiquidityPositionIncreasedEvent.InputTuple,
      LiquidityPositionIncreasedEvent.OutputTuple,
      LiquidityPositionIncreasedEvent.OutputObject
    >;
    LiquidityPositionIncreased: TypedContractEvent<
      LiquidityPositionIncreasedEvent.InputTuple,
      LiquidityPositionIncreasedEvent.OutputTuple,
      LiquidityPositionIncreasedEvent.OutputObject
    >;

    "LiquidityPositionLiquidated(address,address,address,int256,int256,address)": TypedContractEvent<
      LiquidityPositionLiquidatedEvent.InputTuple,
      LiquidityPositionLiquidatedEvent.OutputTuple,
      LiquidityPositionLiquidatedEvent.OutputObject
    >;
    LiquidityPositionLiquidated: TypedContractEvent<
      LiquidityPositionLiquidatedEvent.InputTuple,
      LiquidityPositionLiquidatedEvent.OutputTuple,
      LiquidityPositionLiquidatedEvent.OutputObject
    >;

    "MarketBaseConfigChanged(address,tuple)": TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;
    MarketBaseConfigChanged: TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;

    "MarketConfigEnabled(address,tuple,tuple,tuple)": TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;
    MarketConfigEnabled: TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;

    "MarketFeeRateConfigChanged(address,tuple)": TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;
    MarketFeeRateConfigChanged: TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;

    "MarketPriceConfigChanged(address,tuple)": TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;
    MarketPriceConfigChanged: TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;

    "PositionDecreased(address,address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)": TypedContractEvent<
      PositionDecreasedEvent.InputTuple,
      PositionDecreasedEvent.OutputTuple,
      PositionDecreasedEvent.OutputObject
    >;
    PositionDecreased: TypedContractEvent<
      PositionDecreasedEvent.InputTuple,
      PositionDecreasedEvent.OutputTuple,
      PositionDecreasedEvent.OutputObject
    >;

    "PositionIncreased(address,address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)": TypedContractEvent<
      PositionIncreasedEvent.InputTuple,
      PositionIncreasedEvent.OutputTuple,
      PositionIncreasedEvent.OutputObject
    >;
    PositionIncreased: TypedContractEvent<
      PositionIncreasedEvent.InputTuple,
      PositionIncreasedEvent.OutputTuple,
      PositionIncreasedEvent.OutputObject
    >;

    "PositionLiquidated(address,address,address,uint8,uint160,uint160,uint160,int256,uint128,uint128,uint64,address)": TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;
    PositionLiquidated: TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;

    "PremiumRateChanged(address,uint128)": TypedContractEvent<
      PremiumRateChangedEvent.InputTuple,
      PremiumRateChangedEvent.OutputTuple,
      PremiumRateChangedEvent.OutputObject
    >;
    PremiumRateChanged: TypedContractEvent<
      PremiumRateChangedEvent.InputTuple,
      PremiumRateChangedEvent.OutputTuple,
      PremiumRateChangedEvent.OutputObject
    >;

    "PreviousSPPriceInitialized(address,uint160)": TypedContractEvent<
      PreviousSPPriceInitializedEvent.InputTuple,
      PreviousSPPriceInitializedEvent.OutputTuple,
      PreviousSPPriceInitializedEvent.OutputObject
    >;
    PreviousSPPriceInitialized: TypedContractEvent<
      PreviousSPPriceInitializedEvent.InputTuple,
      PreviousSPPriceInitializedEvent.OutputTuple,
      PreviousSPPriceInitializedEvent.OutputObject
    >;

    "PriceFeedChanged(address,address)": TypedContractEvent<
      PriceFeedChangedEvent.InputTuple,
      PriceFeedChangedEvent.OutputTuple,
      PriceFeedChangedEvent.OutputObject
    >;
    PriceFeedChanged: TypedContractEvent<
      PriceFeedChangedEvent.InputTuple,
      PriceFeedChangedEvent.OutputTuple,
      PriceFeedChangedEvent.OutputObject
    >;

    "PriceVertexChanged(address,uint8,uint128,uint128)": TypedContractEvent<
      PriceVertexChangedEvent.InputTuple,
      PriceVertexChangedEvent.OutputTuple,
      PriceVertexChangedEvent.OutputObject
    >;
    PriceVertexChanged: TypedContractEvent<
      PriceVertexChangedEvent.InputTuple,
      PriceVertexChangedEvent.OutputTuple,
      PriceVertexChangedEvent.OutputObject
    >;

    "ProtocolFeeCollected(address,uint128)": TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;
    ProtocolFeeCollected: TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;

    "ProtocolFeeIncreased(address,uint128)": TypedContractEvent<
      ProtocolFeeIncreasedEvent.InputTuple,
      ProtocolFeeIncreasedEvent.OutputTuple,
      ProtocolFeeIncreasedEvent.OutputObject
    >;
    ProtocolFeeIncreased: TypedContractEvent<
      ProtocolFeeIncreasedEvent.InputTuple,
      ProtocolFeeIncreasedEvent.OutputTuple,
      ProtocolFeeIncreasedEvent.OutputObject
    >;

    "ReferralFeeCollected(address,uint256,address,uint256)": TypedContractEvent<
      ReferralFeeCollectedEvent.InputTuple,
      ReferralFeeCollectedEvent.OutputTuple,
      ReferralFeeCollectedEvent.OutputObject
    >;
    ReferralFeeCollected: TypedContractEvent<
      ReferralFeeCollectedEvent.InputTuple,
      ReferralFeeCollectedEvent.OutputTuple,
      ReferralFeeCollectedEvent.OutputObject
    >;

    "ReferralFeeIncreased(address,address,uint256,uint128,uint256,uint128)": TypedContractEvent<
      ReferralFeeIncreasedEvent.InputTuple,
      ReferralFeeIncreasedEvent.OutputTuple,
      ReferralFeeIncreasedEvent.OutputObject
    >;
    ReferralFeeIncreased: TypedContractEvent<
      ReferralFeeIncreasedEvent.InputTuple,
      ReferralFeeIncreasedEvent.OutputTuple,
      ReferralFeeIncreasedEvent.OutputObject
    >;

    "SettlementPointReached(address,int256,uint160)": TypedContractEvent<
      SettlementPointReachedEvent.InputTuple,
      SettlementPointReachedEvent.OutputTuple,
      SettlementPointReachedEvent.OutputObject
    >;
    SettlementPointReached: TypedContractEvent<
      SettlementPointReachedEvent.InputTuple,
      SettlementPointReachedEvent.OutputTuple,
      SettlementPointReachedEvent.OutputObject
    >;

    "USDEnabled(address)": TypedContractEvent<
      USDEnabledEvent.InputTuple,
      USDEnabledEvent.OutputTuple,
      USDEnabledEvent.OutputObject
    >;
    USDEnabled: TypedContractEvent<
      USDEnabledEvent.InputTuple,
      USDEnabledEvent.OutputTuple,
      USDEnabledEvent.OutputObject
    >;
  };
}
