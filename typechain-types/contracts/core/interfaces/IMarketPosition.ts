/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IMarketPosition {
  export type GlobalFundingRateSampleStruct = {
    lastAdjustFundingRateTime: BigNumberish;
    sampleCount: BigNumberish;
    cumulativePremiumRateX96: BigNumberish;
  };

  export type GlobalFundingRateSampleStructOutput = [
    lastAdjustFundingRateTime: bigint,
    sampleCount: bigint,
    cumulativePremiumRateX96: bigint
  ] & {
    lastAdjustFundingRateTime: bigint;
    sampleCount: bigint;
    cumulativePremiumRateX96: bigint;
  };

  export type GlobalPositionStruct = {
    longSize: BigNumberish;
    shortSize: BigNumberish;
    maxSize: BigNumberish;
    maxSizePerPosition: BigNumberish;
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type GlobalPositionStructOutput = [
    longSize: bigint,
    shortSize: bigint,
    maxSize: bigint,
    maxSizePerPosition: bigint,
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & {
    longSize: bigint;
    shortSize: bigint;
    maxSize: bigint;
    maxSizePerPosition: bigint;
    longFundingRateGrowthX96: bigint;
    shortFundingRateGrowthX96: bigint;
  };

  export type PositionStruct = {
    margin: BigNumberish;
    size: BigNumberish;
    entryPriceX96: BigNumberish;
    entryFundingRateGrowthX96: BigNumberish;
  };

  export type PositionStructOutput = [
    margin: bigint,
    size: bigint,
    entryPriceX96: bigint,
    entryFundingRateGrowthX96: bigint
  ] & {
    margin: bigint;
    size: bigint;
    entryPriceX96: bigint;
    entryFundingRateGrowthX96: bigint;
  };

  export type PreviousGlobalFundingRateStruct = {
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type PreviousGlobalFundingRateStructOutput = [
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & { longFundingRateGrowthX96: bigint; shortFundingRateGrowthX96: bigint };
}

export interface IMarketPositionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decreasePosition"
      | "globalFundingRateSamples"
      | "globalPositions"
      | "increasePosition"
      | "liquidatePosition"
      | "positions"
      | "previousGlobalFundingRates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundingRateGrowthAdjusted"
      | "GlobalFundingRateSampleAdjusted"
      | "GlobalPositionSizeChanged"
      | "PositionDecreased"
      | "PositionIncreased"
      | "PositionLiquidated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFundingRateSamples",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousGlobalFundingRates",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFundingRateSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousGlobalFundingRates",
    data: BytesLike
  ): Result;
}

export namespace FundingRateGrowthAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    fundingRateDeltaX96: BigNumberish,
    longFundingRateGrowthAfterX96: BigNumberish,
    shortFundingRateGrowthAfterX96: BigNumberish,
    lastAdjustFundingRateTime: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    fundingRateDeltaX96: bigint,
    longFundingRateGrowthAfterX96: bigint,
    shortFundingRateGrowthAfterX96: bigint,
    lastAdjustFundingRateTime: bigint
  ];
  export interface OutputObject {
    market: string;
    fundingRateDeltaX96: bigint;
    longFundingRateGrowthAfterX96: bigint;
    shortFundingRateGrowthAfterX96: bigint;
    lastAdjustFundingRateTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalFundingRateSampleAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    sampleCountAfter: BigNumberish,
    cumulativePremiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    sampleCountAfter: bigint,
    cumulativePremiumRateAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    sampleCountAfter: bigint;
    cumulativePremiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalPositionSizeChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    maxSizeAfter: BigNumberish,
    maxSizePerPositionAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    maxSizeAfter: bigint,
    maxSizePerPositionAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    maxSizeAfter: bigint;
    maxSizePerPositionAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionDecreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    sizeAfter: BigNumberish,
    tradePriceX96: BigNumberish,
    realizedPnLDelta: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish,
    receiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    marginAfter: bigint,
    sizeAfter: bigint,
    tradePriceX96: bigint,
    realizedPnLDelta: bigint,
    fundingFee: bigint,
    tradingFee: bigint,
    receiver: string
  ];
  export interface OutputObject {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    marginAfter: bigint;
    sizeAfter: bigint;
    tradePriceX96: bigint;
    realizedPnLDelta: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    marginAfter: BigNumberish,
    sizeAfter: BigNumberish,
    tradePriceX96: BigNumberish,
    entryPriceAfterX96: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    marginAfter: bigint,
    sizeAfter: bigint,
    tradePriceX96: bigint,
    entryPriceAfterX96: bigint,
    fundingFee: bigint,
    tradingFee: bigint
  ];
  export interface OutputObject {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    marginAfter: bigint;
    sizeAfter: bigint;
    tradePriceX96: bigint;
    entryPriceAfterX96: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionLiquidatedEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidator: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    indexPriceX96: BigNumberish,
    tradePriceX96: BigNumberish,
    liquidationPriceX96: BigNumberish,
    fundingFee: BigNumberish,
    tradingFee: BigNumberish,
    liquidationFee: BigNumberish,
    liquidationExecutionFee: BigNumberish,
    feeReceiver: AddressLike
  ];
  export type OutputTuple = [
    market: string,
    liquidator: string,
    account: string,
    side: bigint,
    indexPriceX96: bigint,
    tradePriceX96: bigint,
    liquidationPriceX96: bigint,
    fundingFee: bigint,
    tradingFee: bigint,
    liquidationFee: bigint,
    liquidationExecutionFee: bigint,
    feeReceiver: string
  ];
  export interface OutputObject {
    market: string;
    liquidator: string;
    account: string;
    side: bigint;
    indexPriceX96: bigint;
    tradePriceX96: bigint;
    liquidationPriceX96: bigint;
    fundingFee: bigint;
    tradingFee: bigint;
    liquidationFee: bigint;
    liquidationExecutionFee: bigint;
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMarketPosition extends BaseContract {
  connect(runner?: ContractRunner | null): IMarketPosition;
  waitForDeployment(): Promise<this>;

  interface: IMarketPositionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decreasePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  globalFundingRateSamples: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalFundingRateSampleStructOutput],
    "view"
  >;

  globalPositions: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalPositionStructOutput],
    "view"
  >;

  increasePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  liquidatePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  positions: TypedContractMethod<
    [market: AddressLike, account: AddressLike, side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;

  previousGlobalFundingRates: TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.PreviousGlobalFundingRateStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decreasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "globalFundingRateSamples"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalFundingRateSampleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalPositions"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.GlobalPositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidatePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "previousGlobalFundingRates"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketPosition.PreviousGlobalFundingRateStructOutput],
    "view"
  >;

  getEvent(
    key: "FundingRateGrowthAdjusted"
  ): TypedContractEvent<
    FundingRateGrowthAdjustedEvent.InputTuple,
    FundingRateGrowthAdjustedEvent.OutputTuple,
    FundingRateGrowthAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalFundingRateSampleAdjusted"
  ): TypedContractEvent<
    GlobalFundingRateSampleAdjustedEvent.InputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalPositionSizeChanged"
  ): TypedContractEvent<
    GlobalPositionSizeChangedEvent.InputTuple,
    GlobalPositionSizeChangedEvent.OutputTuple,
    GlobalPositionSizeChangedEvent.OutputObject
  >;
  getEvent(
    key: "PositionDecreased"
  ): TypedContractEvent<
    PositionDecreasedEvent.InputTuple,
    PositionDecreasedEvent.OutputTuple,
    PositionDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "PositionIncreased"
  ): TypedContractEvent<
    PositionIncreasedEvent.InputTuple,
    PositionIncreasedEvent.OutputTuple,
    PositionIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "PositionLiquidated"
  ): TypedContractEvent<
    PositionLiquidatedEvent.InputTuple,
    PositionLiquidatedEvent.OutputTuple,
    PositionLiquidatedEvent.OutputObject
  >;

  filters: {
    "FundingRateGrowthAdjusted(address,int256,int192,int192,uint64)": TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;
    FundingRateGrowthAdjusted: TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;

    "GlobalFundingRateSampleAdjusted(address,uint16,int176)": TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;
    GlobalFundingRateSampleAdjusted: TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;

    "GlobalPositionSizeChanged(address,uint128,uint128)": TypedContractEvent<
      GlobalPositionSizeChangedEvent.InputTuple,
      GlobalPositionSizeChangedEvent.OutputTuple,
      GlobalPositionSizeChangedEvent.OutputObject
    >;
    GlobalPositionSizeChanged: TypedContractEvent<
      GlobalPositionSizeChangedEvent.InputTuple,
      GlobalPositionSizeChangedEvent.OutputTuple,
      GlobalPositionSizeChangedEvent.OutputObject
    >;

    "PositionDecreased(address,address,uint8,uint128,uint128,uint128,uint160,int256,int256,uint128,address)": TypedContractEvent<
      PositionDecreasedEvent.InputTuple,
      PositionDecreasedEvent.OutputTuple,
      PositionDecreasedEvent.OutputObject
    >;
    PositionDecreased: TypedContractEvent<
      PositionDecreasedEvent.InputTuple,
      PositionDecreasedEvent.OutputTuple,
      PositionDecreasedEvent.OutputObject
    >;

    "PositionIncreased(address,address,uint8,uint128,uint128,uint128,uint160,uint160,int256,uint128)": TypedContractEvent<
      PositionIncreasedEvent.InputTuple,
      PositionIncreasedEvent.OutputTuple,
      PositionIncreasedEvent.OutputObject
    >;
    PositionIncreased: TypedContractEvent<
      PositionIncreasedEvent.InputTuple,
      PositionIncreasedEvent.OutputTuple,
      PositionIncreasedEvent.OutputObject
    >;

    "PositionLiquidated(address,address,address,uint8,uint160,uint160,uint160,int256,uint128,uint128,uint64,address)": TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;
    PositionLiquidated: TypedContractEvent<
      PositionLiquidatedEvent.InputTuple,
      PositionLiquidatedEvent.OutputTuple,
      PositionLiquidatedEvent.OutputObject
    >;
  };
}
