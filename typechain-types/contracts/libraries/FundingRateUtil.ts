/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface FundingRateUtilInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "FundingRateGrowthAdjusted"
      | "GlobalFundingRateSampleAdjusted"
      | "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee"
  ): EventFragment;
}

export namespace FundingRateGrowthAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    fundingRateDeltaX96: BigNumberish,
    longFundingRateGrowthAfterX96: BigNumberish,
    shortFundingRateGrowthAfterX96: BigNumberish,
    lastAdjustFundingRateTime: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    fundingRateDeltaX96: bigint,
    longFundingRateGrowthAfterX96: bigint,
    shortFundingRateGrowthAfterX96: bigint,
    lastAdjustFundingRateTime: bigint
  ];
  export interface OutputObject {
    market: string;
    fundingRateDeltaX96: bigint;
    longFundingRateGrowthAfterX96: bigint;
    shortFundingRateGrowthAfterX96: bigint;
    lastAdjustFundingRateTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalFundingRateSampleAdjustedEvent {
  export type InputTuple = [
    market: AddressLike,
    sampleCountAfter: BigNumberish,
    cumulativePremiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    sampleCountAfter: bigint,
    cumulativePremiumRateAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    sampleCountAfter: bigint;
    cumulativePremiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent {
  export type InputTuple = [
    market: AddressLike,
    unrealizedPnLGrowthAfterX64: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    unrealizedPnLGrowthAfterX64: bigint
  ];
  export interface OutputObject {
    market: string;
    unrealizedPnLGrowthAfterX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundingRateUtil extends BaseContract {
  connect(runner?: ContractRunner | null): FundingRateUtil;
  waitForDeployment(): Promise<this>;

  interface: FundingRateUtilInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "FundingRateGrowthAdjusted"
  ): TypedContractEvent<
    FundingRateGrowthAdjustedEvent.InputTuple,
    FundingRateGrowthAdjustedEvent.OutputTuple,
    FundingRateGrowthAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalFundingRateSampleAdjusted"
  ): TypedContractEvent<
    GlobalFundingRateSampleAdjustedEvent.InputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputTuple,
    GlobalFundingRateSampleAdjustedEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee"
  ): TypedContractEvent<
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
  >;

  filters: {
    "FundingRateGrowthAdjusted(address,int256,int192,int192,uint64)": TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;
    FundingRateGrowthAdjusted: TypedContractEvent<
      FundingRateGrowthAdjustedEvent.InputTuple,
      FundingRateGrowthAdjustedEvent.OutputTuple,
      FundingRateGrowthAdjustedEvent.OutputObject
    >;

    "GlobalFundingRateSampleAdjusted(address,uint16,int176)": TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;
    GlobalFundingRateSampleAdjusted: TypedContractEvent<
      GlobalFundingRateSampleAdjustedEvent.InputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputTuple,
      GlobalFundingRateSampleAdjustedEvent.OutputObject
    >;

    "GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee(address,int256)": TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
    >;
    GlobalLiquidityPositionPnLGrowthIncreasedByFundingFee: TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByFundingFeeEvent.OutputObject
    >;
  };
}
