/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export declare namespace IConfigurable {
  export type MarketBaseConfigStruct = {
    minMarginPerLiquidityPosition: BigNumberish;
    maxLeveragePerLiquidityPosition: BigNumberish;
    liquidationFeeRatePerLiquidityPosition: BigNumberish;
    minMarginPerPosition: BigNumberish;
    maxLeveragePerPosition: BigNumberish;
    liquidationFeeRatePerPosition: BigNumberish;
    maxPositionLiquidity: BigNumberish;
    maxPositionValueRate: BigNumberish;
    maxSizeRatePerPosition: BigNumberish;
    liquidationExecutionFee: BigNumberish;
    interestRate: BigNumberish;
    maxFundingRate: BigNumberish;
  };

  export type MarketBaseConfigStructOutput = [
    minMarginPerLiquidityPosition: bigint,
    maxLeveragePerLiquidityPosition: bigint,
    liquidationFeeRatePerLiquidityPosition: bigint,
    minMarginPerPosition: bigint,
    maxLeveragePerPosition: bigint,
    liquidationFeeRatePerPosition: bigint,
    maxPositionLiquidity: bigint,
    maxPositionValueRate: bigint,
    maxSizeRatePerPosition: bigint,
    liquidationExecutionFee: bigint,
    interestRate: bigint,
    maxFundingRate: bigint
  ] & {
    minMarginPerLiquidityPosition: bigint;
    maxLeveragePerLiquidityPosition: bigint;
    liquidationFeeRatePerLiquidityPosition: bigint;
    minMarginPerPosition: bigint;
    maxLeveragePerPosition: bigint;
    liquidationFeeRatePerPosition: bigint;
    maxPositionLiquidity: bigint;
    maxPositionValueRate: bigint;
    maxSizeRatePerPosition: bigint;
    liquidationExecutionFee: bigint;
    interestRate: bigint;
    maxFundingRate: bigint;
  };

  export type MarketFeeRateConfigStruct = {
    tradingFeeRate: BigNumberish;
    protocolFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralDiscountRate: BigNumberish;
  };

  export type MarketFeeRateConfigStructOutput = [
    tradingFeeRate: bigint,
    protocolFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralDiscountRate: bigint
  ] & {
    tradingFeeRate: bigint;
    protocolFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralDiscountRate: bigint;
  };

  export type VertexConfigStruct = {
    balanceRate: BigNumberish;
    premiumRate: BigNumberish;
  };

  export type VertexConfigStructOutput = [
    balanceRate: bigint,
    premiumRate: bigint
  ] & { balanceRate: bigint; premiumRate: bigint };

  export type MarketPriceConfigStruct = {
    maxPriceImpactLiquidity: BigNumberish;
    liquidationVertexIndex: BigNumberish;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type MarketPriceConfigStructOutput = [
    maxPriceImpactLiquidity: bigint,
    liquidationVertexIndex: bigint,
    vertices: IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: bigint;
    liquidationVertexIndex: bigint;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };
}

export interface ConfigurableUtilInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "MarketBaseConfigChanged"
      | "MarketConfigEnabled"
      | "MarketFeeRateConfigChanged"
      | "MarketPriceConfigChanged"
  ): EventFragment;
}

export namespace MarketBaseConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketBaseConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketBaseConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketBaseConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketConfigEnabledEvent {
  export type InputTuple = [
    market: AddressLike,
    baseCfg: IConfigurable.MarketBaseConfigStruct,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStruct,
    priceCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    baseCfg: IConfigurable.MarketBaseConfigStructOutput,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput,
    priceCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    baseCfg: IConfigurable.MarketBaseConfigStructOutput;
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput;
    priceCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketFeeRateConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketFeeRateConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPriceConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfigurableUtil extends BaseContract {
  connect(runner?: ContractRunner | null): ConfigurableUtil;
  waitForDeployment(): Promise<this>;

  interface: ConfigurableUtilInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "MarketBaseConfigChanged"
  ): TypedContractEvent<
    MarketBaseConfigChangedEvent.InputTuple,
    MarketBaseConfigChangedEvent.OutputTuple,
    MarketBaseConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketConfigEnabled"
  ): TypedContractEvent<
    MarketConfigEnabledEvent.InputTuple,
    MarketConfigEnabledEvent.OutputTuple,
    MarketConfigEnabledEvent.OutputObject
  >;
  getEvent(
    key: "MarketFeeRateConfigChanged"
  ): TypedContractEvent<
    MarketFeeRateConfigChangedEvent.InputTuple,
    MarketFeeRateConfigChangedEvent.OutputTuple,
    MarketFeeRateConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPriceConfigChanged"
  ): TypedContractEvent<
    MarketPriceConfigChangedEvent.InputTuple,
    MarketPriceConfigChangedEvent.OutputTuple,
    MarketPriceConfigChangedEvent.OutputObject
  >;

  filters: {
    "MarketBaseConfigChanged(address,tuple)": TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;
    MarketBaseConfigChanged: TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;

    "MarketConfigEnabled(address,tuple,tuple,tuple)": TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;
    MarketConfigEnabled: TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;

    "MarketFeeRateConfigChanged(address,tuple)": TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;
    MarketFeeRateConfigChanged: TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;

    "MarketPriceConfigChanged(address,tuple)": TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;
    MarketPriceConfigChanged: TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;
  };
}
