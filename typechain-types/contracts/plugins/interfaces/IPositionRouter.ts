/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPositionRouter {
  export type ClosePositionParameterStruct = {
    market: AddressLike;
    side: BigNumberish;
  };

  export type ClosePositionParameterStructOutput = [
    market: string,
    side: bigint
  ] & { market: string; side: bigint };
}

export interface IPositionRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelDecreaseLiquidityPosition"
      | "cancelDecreasePosition"
      | "cancelIncreaseLiquidityPosition"
      | "cancelIncreasePosition"
      | "createCloseLiquidityPositionsBatch"
      | "createClosePositionsBatch"
      | "createDecreaseLiquidityPosition"
      | "createDecreasePosition"
      | "createIncreaseLiquidityPosition"
      | "createIncreasePosition"
      | "executeDecreaseLiquidationFundPosition"
      | "executeDecreaseLiquidityPosition"
      | "executeDecreaseLiquidityPositions"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeIncreaseLiquidationFundPosition"
      | "executeIncreaseLiquidityPosition"
      | "executeIncreaseLiquidityPositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "updateDelayValues"
      | "updateExecutionGasLimit"
      | "updateMinExecutionFee"
      | "updatePositionExecutor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecreaseLiquidityPositionCancelled"
      | "DecreaseLiquidityPositionCreated"
      | "DecreaseLiquidityPositionExecuted"
      | "DecreasePositionCancelled"
      | "DecreasePositionCreated"
      | "DecreasePositionExecuted"
      | "DelayValuesUpdated"
      | "ExecuteFailed"
      | "IncreaseLiquidityPositionCancelled"
      | "IncreaseLiquidityPositionCreated"
      | "IncreaseLiquidityPositionExecuted"
      | "IncreasePositionCancelled"
      | "IncreasePositionCreated"
      | "IncreasePositionExecuted"
      | "MinExecutionFeeUpdated"
      | "PositionExecutorUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelDecreaseLiquidityPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreaseLiquidityPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCloseLiquidityPositionsBatch",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createClosePositionsBatch",
    values: [IPositionRouter.ClosePositionParameterStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreaseLiquidityPosition",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreaseLiquidityPosition",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseLiquidationFundPosition",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseLiquidityPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreaseLiquidityPositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseLiquidationFundPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseLiquidityPosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseLiquidityPositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDelayValues",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutionGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionExecutor",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelDecreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCloseLiquidityPositionsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClosePositionsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseLiquidationFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreaseLiquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseLiquidationFundPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseLiquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutionGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionExecutor",
    data: BytesLike
  ): Result;
}

export namespace DecreaseLiquidityPositionCancelledEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseLiquidityPositionCreatedEvent {
  export type InputTuple = [
    account: AddressLike,
    market: AddressLike,
    marginDelta: BigNumberish,
    liquidityDelta: BigNumberish,
    acceptableMinMargin: BigNumberish,
    receiver: AddressLike,
    executionFee: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    market: string,
    marginDelta: bigint,
    liquidityDelta: bigint,
    acceptableMinMargin: bigint,
    receiver: string,
    executionFee: bigint,
    index: bigint
  ];
  export interface OutputObject {
    account: string;
    market: string;
    marginDelta: bigint;
    liquidityDelta: bigint;
    acceptableMinMargin: bigint;
    receiver: string;
    executionFee: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreaseLiquidityPositionExecutedEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreasePositionCancelledEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreasePositionCreatedEvent {
  export type InputTuple = [
    account: AddressLike,
    market: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    sizeDelta: BigNumberish,
    acceptableTradePriceX96: BigNumberish,
    receiver: AddressLike,
    executionFee: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    market: string,
    side: bigint,
    marginDelta: bigint,
    sizeDelta: bigint,
    acceptableTradePriceX96: bigint,
    receiver: string,
    executionFee: bigint,
    index: bigint
  ];
  export interface OutputObject {
    account: string;
    market: string;
    side: bigint;
    marginDelta: bigint;
    sizeDelta: bigint;
    acceptableTradePriceX96: bigint;
    receiver: string;
    executionFee: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecreasePositionExecutedEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelayValuesUpdatedEvent {
  export type InputTuple = [
    minBlockDelayExecutor: BigNumberish,
    minTimeDelayPublic: BigNumberish,
    maxTimeDelay: BigNumberish
  ];
  export type OutputTuple = [
    minBlockDelayExecutor: bigint,
    minTimeDelayPublic: bigint,
    maxTimeDelay: bigint
  ];
  export interface OutputObject {
    minBlockDelayExecutor: bigint;
    minTimeDelayPublic: bigint;
    maxTimeDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteFailedEvent {
  export type InputTuple = [
    reqType: BigNumberish,
    index: BigNumberish,
    shortenedReason: BytesLike
  ];
  export type OutputTuple = [
    reqType: bigint,
    index: bigint,
    shortenedReason: string
  ];
  export interface OutputObject {
    reqType: bigint;
    index: bigint;
    shortenedReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLiquidityPositionCancelledEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLiquidityPositionCreatedEvent {
  export type InputTuple = [
    account: AddressLike,
    market: AddressLike,
    marginDelta: BigNumberish,
    liquidityDelta: BigNumberish,
    acceptableMinMargin: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    market: string,
    marginDelta: bigint,
    liquidityDelta: bigint,
    acceptableMinMargin: bigint,
    executionFee: bigint,
    index: bigint
  ];
  export interface OutputObject {
    account: string;
    market: string;
    marginDelta: bigint;
    liquidityDelta: bigint;
    acceptableMinMargin: bigint;
    executionFee: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseLiquidityPositionExecutedEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasePositionCancelledEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasePositionCreatedEvent {
  export type InputTuple = [
    account: AddressLike,
    market: AddressLike,
    side: BigNumberish,
    marginDelta: BigNumberish,
    sizeDelta: BigNumberish,
    acceptableTradePriceX96: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    market: string,
    side: bigint,
    marginDelta: bigint,
    sizeDelta: bigint,
    acceptableTradePriceX96: bigint,
    executionFee: bigint,
    index: bigint
  ];
  export interface OutputObject {
    account: string;
    market: string;
    side: bigint;
    marginDelta: bigint;
    sizeDelta: bigint;
    acceptableTradePriceX96: bigint;
    executionFee: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreasePositionExecutedEvent {
  export type InputTuple = [
    index: BigNumberish,
    executionFeeReceiver: AddressLike
  ];
  export type OutputTuple = [index: bigint, executionFeeReceiver: string];
  export interface OutputObject {
    index: bigint;
    executionFeeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinExecutionFeeUpdatedEvent {
  export type InputTuple = [minExecutionFee: BigNumberish];
  export type OutputTuple = [minExecutionFee: bigint];
  export interface OutputObject {
    minExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionExecutorUpdatedEvent {
  export type InputTuple = [account: AddressLike, active: boolean];
  export type OutputTuple = [account: string, active: boolean];
  export interface OutputObject {
    account: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPositionRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IPositionRouter;
  waitForDeployment(): Promise<this>;

  interface: IPositionRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelDecreaseLiquidityPosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelDecreasePosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelIncreaseLiquidityPosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  cancelIncreasePosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  createCloseLiquidityPositionsBatch: TypedContractMethod<
    [markets: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;

  createClosePositionsBatch: TypedContractMethod<
    [
      parameters: IPositionRouter.ClosePositionParameterStruct[],
      receiver: AddressLike
    ],
    [bigint[]],
    "payable"
  >;

  createDecreaseLiquidityPosition: TypedContractMethod<
    [
      market: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      acceptableMinMargin: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  createDecreasePosition: TypedContractMethod<
    [
      market: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      acceptableTradePriceX96: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  createIncreaseLiquidityPosition: TypedContractMethod<
    [
      market: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      acceptableMinMargin: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  createIncreasePosition: TypedContractMethod<
    [
      market: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      acceptableTradePriceX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  executeDecreaseLiquidationFundPosition: TypedContractMethod<
    [market: AddressLike, liquidityDelta: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeDecreaseLiquidityPosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeDecreaseLiquidityPositions: TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeDecreasePosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeDecreasePositions: TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeIncreaseLiquidationFundPosition: TypedContractMethod<
    [market: AddressLike, liquidityDelta: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeIncreaseLiquidityPosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeIncreaseLiquidityPositions: TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  executeIncreasePosition: TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;

  executeIncreasePositions: TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDelayValues: TypedContractMethod<
    [
      minBlockDelayExecutor: BigNumberish,
      minTimeDelayPublic: BigNumberish,
      maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateExecutionGasLimit: TypedContractMethod<
    [executionGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinExecutionFee: TypedContractMethod<
    [minExecutionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePositionExecutor: TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelDecreaseLiquidityPosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelDecreasePosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelIncreaseLiquidityPosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelIncreasePosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCloseLiquidityPositionsBatch"
  ): TypedContractMethod<
    [markets: AddressLike[], receiver: AddressLike],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createClosePositionsBatch"
  ): TypedContractMethod<
    [
      parameters: IPositionRouter.ClosePositionParameterStruct[],
      receiver: AddressLike
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createDecreaseLiquidityPosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      acceptableMinMargin: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createDecreasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      acceptableTradePriceX96: BigNumberish,
      receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreaseLiquidityPosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      marginDelta: BigNumberish,
      liquidityDelta: BigNumberish,
      acceptableMinMargin: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createIncreasePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      side: BigNumberish,
      marginDelta: BigNumberish,
      sizeDelta: BigNumberish,
      acceptableTradePriceX96: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeDecreaseLiquidationFundPosition"
  ): TypedContractMethod<
    [market: AddressLike, liquidityDelta: BigNumberish, receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreaseLiquidityPosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreaseLiquidityPositions"
  ): TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreasePosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeDecreasePositions"
  ): TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreaseLiquidationFundPosition"
  ): TypedContractMethod<
    [market: AddressLike, liquidityDelta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreaseLiquidityPosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreaseLiquidityPositions"
  ): TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePosition"
  ): TypedContractMethod<
    [index: BigNumberish, executionFeeReceiver: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreasePositions"
  ): TypedContractMethod<
    [endIndex: BigNumberish, executionFeeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDelayValues"
  ): TypedContractMethod<
    [
      minBlockDelayExecutor: BigNumberish,
      minTimeDelayPublic: BigNumberish,
      maxTimeDelay: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateExecutionGasLimit"
  ): TypedContractMethod<
    [executionGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinExecutionFee"
  ): TypedContractMethod<[minExecutionFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePositionExecutor"
  ): TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecreaseLiquidityPositionCancelled"
  ): TypedContractEvent<
    DecreaseLiquidityPositionCancelledEvent.InputTuple,
    DecreaseLiquidityPositionCancelledEvent.OutputTuple,
    DecreaseLiquidityPositionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseLiquidityPositionCreated"
  ): TypedContractEvent<
    DecreaseLiquidityPositionCreatedEvent.InputTuple,
    DecreaseLiquidityPositionCreatedEvent.OutputTuple,
    DecreaseLiquidityPositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DecreaseLiquidityPositionExecuted"
  ): TypedContractEvent<
    DecreaseLiquidityPositionExecutedEvent.InputTuple,
    DecreaseLiquidityPositionExecutedEvent.OutputTuple,
    DecreaseLiquidityPositionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "DecreasePositionCancelled"
  ): TypedContractEvent<
    DecreasePositionCancelledEvent.InputTuple,
    DecreasePositionCancelledEvent.OutputTuple,
    DecreasePositionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "DecreasePositionCreated"
  ): TypedContractEvent<
    DecreasePositionCreatedEvent.InputTuple,
    DecreasePositionCreatedEvent.OutputTuple,
    DecreasePositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DecreasePositionExecuted"
  ): TypedContractEvent<
    DecreasePositionExecutedEvent.InputTuple,
    DecreasePositionExecutedEvent.OutputTuple,
    DecreasePositionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "DelayValuesUpdated"
  ): TypedContractEvent<
    DelayValuesUpdatedEvent.InputTuple,
    DelayValuesUpdatedEvent.OutputTuple,
    DelayValuesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteFailed"
  ): TypedContractEvent<
    ExecuteFailedEvent.InputTuple,
    ExecuteFailedEvent.OutputTuple,
    ExecuteFailedEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLiquidityPositionCancelled"
  ): TypedContractEvent<
    IncreaseLiquidityPositionCancelledEvent.InputTuple,
    IncreaseLiquidityPositionCancelledEvent.OutputTuple,
    IncreaseLiquidityPositionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLiquidityPositionCreated"
  ): TypedContractEvent<
    IncreaseLiquidityPositionCreatedEvent.InputTuple,
    IncreaseLiquidityPositionCreatedEvent.OutputTuple,
    IncreaseLiquidityPositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseLiquidityPositionExecuted"
  ): TypedContractEvent<
    IncreaseLiquidityPositionExecutedEvent.InputTuple,
    IncreaseLiquidityPositionExecutedEvent.OutputTuple,
    IncreaseLiquidityPositionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "IncreasePositionCancelled"
  ): TypedContractEvent<
    IncreasePositionCancelledEvent.InputTuple,
    IncreasePositionCancelledEvent.OutputTuple,
    IncreasePositionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "IncreasePositionCreated"
  ): TypedContractEvent<
    IncreasePositionCreatedEvent.InputTuple,
    IncreasePositionCreatedEvent.OutputTuple,
    IncreasePositionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "IncreasePositionExecuted"
  ): TypedContractEvent<
    IncreasePositionExecutedEvent.InputTuple,
    IncreasePositionExecutedEvent.OutputTuple,
    IncreasePositionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "MinExecutionFeeUpdated"
  ): TypedContractEvent<
    MinExecutionFeeUpdatedEvent.InputTuple,
    MinExecutionFeeUpdatedEvent.OutputTuple,
    MinExecutionFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionExecutorUpdated"
  ): TypedContractEvent<
    PositionExecutorUpdatedEvent.InputTuple,
    PositionExecutorUpdatedEvent.OutputTuple,
    PositionExecutorUpdatedEvent.OutputObject
  >;

  filters: {
    "DecreaseLiquidityPositionCancelled(uint128,address)": TypedContractEvent<
      DecreaseLiquidityPositionCancelledEvent.InputTuple,
      DecreaseLiquidityPositionCancelledEvent.OutputTuple,
      DecreaseLiquidityPositionCancelledEvent.OutputObject
    >;
    DecreaseLiquidityPositionCancelled: TypedContractEvent<
      DecreaseLiquidityPositionCancelledEvent.InputTuple,
      DecreaseLiquidityPositionCancelledEvent.OutputTuple,
      DecreaseLiquidityPositionCancelledEvent.OutputObject
    >;

    "DecreaseLiquidityPositionCreated(address,address,uint128,uint256,uint256,address,uint256,uint128)": TypedContractEvent<
      DecreaseLiquidityPositionCreatedEvent.InputTuple,
      DecreaseLiquidityPositionCreatedEvent.OutputTuple,
      DecreaseLiquidityPositionCreatedEvent.OutputObject
    >;
    DecreaseLiquidityPositionCreated: TypedContractEvent<
      DecreaseLiquidityPositionCreatedEvent.InputTuple,
      DecreaseLiquidityPositionCreatedEvent.OutputTuple,
      DecreaseLiquidityPositionCreatedEvent.OutputObject
    >;

    "DecreaseLiquidityPositionExecuted(uint128,address)": TypedContractEvent<
      DecreaseLiquidityPositionExecutedEvent.InputTuple,
      DecreaseLiquidityPositionExecutedEvent.OutputTuple,
      DecreaseLiquidityPositionExecutedEvent.OutputObject
    >;
    DecreaseLiquidityPositionExecuted: TypedContractEvent<
      DecreaseLiquidityPositionExecutedEvent.InputTuple,
      DecreaseLiquidityPositionExecutedEvent.OutputTuple,
      DecreaseLiquidityPositionExecutedEvent.OutputObject
    >;

    "DecreasePositionCancelled(uint128,address)": TypedContractEvent<
      DecreasePositionCancelledEvent.InputTuple,
      DecreasePositionCancelledEvent.OutputTuple,
      DecreasePositionCancelledEvent.OutputObject
    >;
    DecreasePositionCancelled: TypedContractEvent<
      DecreasePositionCancelledEvent.InputTuple,
      DecreasePositionCancelledEvent.OutputTuple,
      DecreasePositionCancelledEvent.OutputObject
    >;

    "DecreasePositionCreated(address,address,uint8,uint128,uint128,uint160,address,uint256,uint128)": TypedContractEvent<
      DecreasePositionCreatedEvent.InputTuple,
      DecreasePositionCreatedEvent.OutputTuple,
      DecreasePositionCreatedEvent.OutputObject
    >;
    DecreasePositionCreated: TypedContractEvent<
      DecreasePositionCreatedEvent.InputTuple,
      DecreasePositionCreatedEvent.OutputTuple,
      DecreasePositionCreatedEvent.OutputObject
    >;

    "DecreasePositionExecuted(uint128,address)": TypedContractEvent<
      DecreasePositionExecutedEvent.InputTuple,
      DecreasePositionExecutedEvent.OutputTuple,
      DecreasePositionExecutedEvent.OutputObject
    >;
    DecreasePositionExecuted: TypedContractEvent<
      DecreasePositionExecutedEvent.InputTuple,
      DecreasePositionExecutedEvent.OutputTuple,
      DecreasePositionExecutedEvent.OutputObject
    >;

    "DelayValuesUpdated(uint32,uint32,uint32)": TypedContractEvent<
      DelayValuesUpdatedEvent.InputTuple,
      DelayValuesUpdatedEvent.OutputTuple,
      DelayValuesUpdatedEvent.OutputObject
    >;
    DelayValuesUpdated: TypedContractEvent<
      DelayValuesUpdatedEvent.InputTuple,
      DelayValuesUpdatedEvent.OutputTuple,
      DelayValuesUpdatedEvent.OutputObject
    >;

    "ExecuteFailed(uint8,uint128,bytes4)": TypedContractEvent<
      ExecuteFailedEvent.InputTuple,
      ExecuteFailedEvent.OutputTuple,
      ExecuteFailedEvent.OutputObject
    >;
    ExecuteFailed: TypedContractEvent<
      ExecuteFailedEvent.InputTuple,
      ExecuteFailedEvent.OutputTuple,
      ExecuteFailedEvent.OutputObject
    >;

    "IncreaseLiquidityPositionCancelled(uint128,address)": TypedContractEvent<
      IncreaseLiquidityPositionCancelledEvent.InputTuple,
      IncreaseLiquidityPositionCancelledEvent.OutputTuple,
      IncreaseLiquidityPositionCancelledEvent.OutputObject
    >;
    IncreaseLiquidityPositionCancelled: TypedContractEvent<
      IncreaseLiquidityPositionCancelledEvent.InputTuple,
      IncreaseLiquidityPositionCancelledEvent.OutputTuple,
      IncreaseLiquidityPositionCancelledEvent.OutputObject
    >;

    "IncreaseLiquidityPositionCreated(address,address,uint128,uint256,uint256,uint256,uint128)": TypedContractEvent<
      IncreaseLiquidityPositionCreatedEvent.InputTuple,
      IncreaseLiquidityPositionCreatedEvent.OutputTuple,
      IncreaseLiquidityPositionCreatedEvent.OutputObject
    >;
    IncreaseLiquidityPositionCreated: TypedContractEvent<
      IncreaseLiquidityPositionCreatedEvent.InputTuple,
      IncreaseLiquidityPositionCreatedEvent.OutputTuple,
      IncreaseLiquidityPositionCreatedEvent.OutputObject
    >;

    "IncreaseLiquidityPositionExecuted(uint128,address)": TypedContractEvent<
      IncreaseLiquidityPositionExecutedEvent.InputTuple,
      IncreaseLiquidityPositionExecutedEvent.OutputTuple,
      IncreaseLiquidityPositionExecutedEvent.OutputObject
    >;
    IncreaseLiquidityPositionExecuted: TypedContractEvent<
      IncreaseLiquidityPositionExecutedEvent.InputTuple,
      IncreaseLiquidityPositionExecutedEvent.OutputTuple,
      IncreaseLiquidityPositionExecutedEvent.OutputObject
    >;

    "IncreasePositionCancelled(uint128,address)": TypedContractEvent<
      IncreasePositionCancelledEvent.InputTuple,
      IncreasePositionCancelledEvent.OutputTuple,
      IncreasePositionCancelledEvent.OutputObject
    >;
    IncreasePositionCancelled: TypedContractEvent<
      IncreasePositionCancelledEvent.InputTuple,
      IncreasePositionCancelledEvent.OutputTuple,
      IncreasePositionCancelledEvent.OutputObject
    >;

    "IncreasePositionCreated(address,address,uint8,uint128,uint128,uint160,uint256,uint128)": TypedContractEvent<
      IncreasePositionCreatedEvent.InputTuple,
      IncreasePositionCreatedEvent.OutputTuple,
      IncreasePositionCreatedEvent.OutputObject
    >;
    IncreasePositionCreated: TypedContractEvent<
      IncreasePositionCreatedEvent.InputTuple,
      IncreasePositionCreatedEvent.OutputTuple,
      IncreasePositionCreatedEvent.OutputObject
    >;

    "IncreasePositionExecuted(uint128,address)": TypedContractEvent<
      IncreasePositionExecutedEvent.InputTuple,
      IncreasePositionExecutedEvent.OutputTuple,
      IncreasePositionExecutedEvent.OutputObject
    >;
    IncreasePositionExecuted: TypedContractEvent<
      IncreasePositionExecutedEvent.InputTuple,
      IncreasePositionExecutedEvent.OutputTuple,
      IncreasePositionExecutedEvent.OutputObject
    >;

    "MinExecutionFeeUpdated(uint256)": TypedContractEvent<
      MinExecutionFeeUpdatedEvent.InputTuple,
      MinExecutionFeeUpdatedEvent.OutputTuple,
      MinExecutionFeeUpdatedEvent.OutputObject
    >;
    MinExecutionFeeUpdated: TypedContractEvent<
      MinExecutionFeeUpdatedEvent.InputTuple,
      MinExecutionFeeUpdatedEvent.OutputTuple,
      MinExecutionFeeUpdatedEvent.OutputObject
    >;

    "PositionExecutorUpdated(address,bool)": TypedContractEvent<
      PositionExecutorUpdatedEvent.InputTuple,
      PositionExecutorUpdatedEvent.OutputTuple,
      PositionExecutorUpdatedEvent.OutputObject
    >;
    PositionExecutorUpdated: TypedContractEvent<
      PositionExecutorUpdatedEvent.InputTuple,
      PositionExecutorUpdatedEvent.OutputTuple,
      PositionExecutorUpdatedEvent.OutputObject
    >;
  };
}
