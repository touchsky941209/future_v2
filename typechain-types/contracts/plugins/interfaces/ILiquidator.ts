/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ILiquidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "liquidateLiquidityPosition"
      | "liquidatePosition"
      | "updateExecutor"
      | "updatePriceFeed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ExecutorUpdated" | "PositionClosedByLiquidator"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "liquidateLiquidityPosition",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "liquidateLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export namespace ExecutorUpdatedEvent {
  export type InputTuple = [account: AddressLike, active: boolean];
  export type OutputTuple = [account: string, active: boolean];
  export interface OutputObject {
    account: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionClosedByLiquidatorEvent {
  export type InputTuple = [
    market: AddressLike,
    account: AddressLike,
    side: BigNumberish,
    liquidationExecutionFee: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    account: string,
    side: bigint,
    liquidationExecutionFee: bigint
  ];
  export interface OutputObject {
    market: string;
    account: string;
    side: bigint;
    liquidationExecutionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILiquidator extends BaseContract {
  connect(runner?: ContractRunner | null): ILiquidator;
  waitForDeployment(): Promise<this>;

  interface: ILiquidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  liquidateLiquidityPosition: TypedContractMethod<
    [market: AddressLike, account: AddressLike, feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidatePosition: TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateExecutor: TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "liquidateLiquidityPosition"
  ): TypedContractMethod<
    [market: AddressLike, account: AddressLike, feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidatePosition"
  ): TypedContractMethod<
    [
      market: AddressLike,
      account: AddressLike,
      side: BigNumberish,
      feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateExecutor"
  ): TypedContractMethod<
    [account: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ExecutorUpdated"
  ): TypedContractEvent<
    ExecutorUpdatedEvent.InputTuple,
    ExecutorUpdatedEvent.OutputTuple,
    ExecutorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionClosedByLiquidator"
  ): TypedContractEvent<
    PositionClosedByLiquidatorEvent.InputTuple,
    PositionClosedByLiquidatorEvent.OutputTuple,
    PositionClosedByLiquidatorEvent.OutputObject
  >;

  filters: {
    "ExecutorUpdated(address,bool)": TypedContractEvent<
      ExecutorUpdatedEvent.InputTuple,
      ExecutorUpdatedEvent.OutputTuple,
      ExecutorUpdatedEvent.OutputObject
    >;
    ExecutorUpdated: TypedContractEvent<
      ExecutorUpdatedEvent.InputTuple,
      ExecutorUpdatedEvent.OutputTuple,
      ExecutorUpdatedEvent.OutputObject
    >;

    "PositionClosedByLiquidator(address,address,uint8,uint64)": TypedContractEvent<
      PositionClosedByLiquidatorEvent.InputTuple,
      PositionClosedByLiquidatorEvent.OutputTuple,
      PositionClosedByLiquidatorEvent.OutputObject
    >;
    PositionClosedByLiquidator: TypedContractEvent<
      PositionClosedByLiquidatorEvent.InputTuple,
      PositionClosedByLiquidatorEvent.OutputTuple,
      PositionClosedByLiquidatorEvent.OutputObject
    >;
  };
}
