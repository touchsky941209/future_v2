/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPluginManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approvePlugin"
      | "isPluginApproved"
      | "isRegisteredLiquidator"
      | "registerLiquidator"
      | "registerPlugin"
      | "registeredPlugins"
      | "revokePlugin"
      | "unregisterLiquidator"
      | "unregisterPlugin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidatorRegistered"
      | "LiquidatorUnregistered"
      | "PluginApproved"
      | "PluginRegistered"
      | "PluginRevoked"
      | "PluginUnregistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approvePlugin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPluginApproved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlugin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPlugins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePlugin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPlugin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPluginApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredPlugins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPlugin",
    data: BytesLike
  ): Result;
}

export namespace LiquidatorRegisteredEvent {
  export type InputTuple = [liquidator: AddressLike];
  export type OutputTuple = [liquidator: string];
  export interface OutputObject {
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatorUnregisteredEvent {
  export type InputTuple = [liquidator: AddressLike];
  export type OutputTuple = [liquidator: string];
  export interface OutputObject {
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginApprovedEvent {
  export type InputTuple = [account: AddressLike, plugin: AddressLike];
  export type OutputTuple = [account: string, plugin: string];
  export interface OutputObject {
    account: string;
    plugin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginRegisteredEvent {
  export type InputTuple = [plugin: AddressLike];
  export type OutputTuple = [plugin: string];
  export interface OutputObject {
    plugin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginRevokedEvent {
  export type InputTuple = [account: AddressLike, plugin: AddressLike];
  export type OutputTuple = [account: string, plugin: string];
  export interface OutputObject {
    account: string;
    plugin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PluginUnregisteredEvent {
  export type InputTuple = [plugin: AddressLike];
  export type OutputTuple = [plugin: string];
  export interface OutputObject {
    plugin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPluginManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPluginManager;
  waitForDeployment(): Promise<this>;

  interface: IPluginManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approvePlugin: TypedContractMethod<
    [plugin: AddressLike],
    [void],
    "nonpayable"
  >;

  isPluginApproved: TypedContractMethod<
    [account: AddressLike, plugin: AddressLike],
    [boolean],
    "view"
  >;

  isRegisteredLiquidator: TypedContractMethod<
    [liquidator: AddressLike],
    [boolean],
    "view"
  >;

  registerLiquidator: TypedContractMethod<
    [liquidator: AddressLike],
    [void],
    "nonpayable"
  >;

  registerPlugin: TypedContractMethod<
    [plugin: AddressLike],
    [void],
    "nonpayable"
  >;

  registeredPlugins: TypedContractMethod<
    [plugin: AddressLike],
    [boolean],
    "view"
  >;

  revokePlugin: TypedContractMethod<
    [plugin: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterLiquidator: TypedContractMethod<
    [liquidator: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterPlugin: TypedContractMethod<
    [plugin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approvePlugin"
  ): TypedContractMethod<[plugin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPluginApproved"
  ): TypedContractMethod<
    [account: AddressLike, plugin: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredLiquidator"
  ): TypedContractMethod<[liquidator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerLiquidator"
  ): TypedContractMethod<[liquidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerPlugin"
  ): TypedContractMethod<[plugin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredPlugins"
  ): TypedContractMethod<[plugin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokePlugin"
  ): TypedContractMethod<[plugin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterLiquidator"
  ): TypedContractMethod<[liquidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterPlugin"
  ): TypedContractMethod<[plugin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LiquidatorRegistered"
  ): TypedContractEvent<
    LiquidatorRegisteredEvent.InputTuple,
    LiquidatorRegisteredEvent.OutputTuple,
    LiquidatorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LiquidatorUnregistered"
  ): TypedContractEvent<
    LiquidatorUnregisteredEvent.InputTuple,
    LiquidatorUnregisteredEvent.OutputTuple,
    LiquidatorUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "PluginApproved"
  ): TypedContractEvent<
    PluginApprovedEvent.InputTuple,
    PluginApprovedEvent.OutputTuple,
    PluginApprovedEvent.OutputObject
  >;
  getEvent(
    key: "PluginRegistered"
  ): TypedContractEvent<
    PluginRegisteredEvent.InputTuple,
    PluginRegisteredEvent.OutputTuple,
    PluginRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PluginRevoked"
  ): TypedContractEvent<
    PluginRevokedEvent.InputTuple,
    PluginRevokedEvent.OutputTuple,
    PluginRevokedEvent.OutputObject
  >;
  getEvent(
    key: "PluginUnregistered"
  ): TypedContractEvent<
    PluginUnregisteredEvent.InputTuple,
    PluginUnregisteredEvent.OutputTuple,
    PluginUnregisteredEvent.OutputObject
  >;

  filters: {
    "LiquidatorRegistered(address)": TypedContractEvent<
      LiquidatorRegisteredEvent.InputTuple,
      LiquidatorRegisteredEvent.OutputTuple,
      LiquidatorRegisteredEvent.OutputObject
    >;
    LiquidatorRegistered: TypedContractEvent<
      LiquidatorRegisteredEvent.InputTuple,
      LiquidatorRegisteredEvent.OutputTuple,
      LiquidatorRegisteredEvent.OutputObject
    >;

    "LiquidatorUnregistered(address)": TypedContractEvent<
      LiquidatorUnregisteredEvent.InputTuple,
      LiquidatorUnregisteredEvent.OutputTuple,
      LiquidatorUnregisteredEvent.OutputObject
    >;
    LiquidatorUnregistered: TypedContractEvent<
      LiquidatorUnregisteredEvent.InputTuple,
      LiquidatorUnregisteredEvent.OutputTuple,
      LiquidatorUnregisteredEvent.OutputObject
    >;

    "PluginApproved(address,address)": TypedContractEvent<
      PluginApprovedEvent.InputTuple,
      PluginApprovedEvent.OutputTuple,
      PluginApprovedEvent.OutputObject
    >;
    PluginApproved: TypedContractEvent<
      PluginApprovedEvent.InputTuple,
      PluginApprovedEvent.OutputTuple,
      PluginApprovedEvent.OutputObject
    >;

    "PluginRegistered(address)": TypedContractEvent<
      PluginRegisteredEvent.InputTuple,
      PluginRegisteredEvent.OutputTuple,
      PluginRegisteredEvent.OutputObject
    >;
    PluginRegistered: TypedContractEvent<
      PluginRegisteredEvent.InputTuple,
      PluginRegisteredEvent.OutputTuple,
      PluginRegisteredEvent.OutputObject
    >;

    "PluginRevoked(address,address)": TypedContractEvent<
      PluginRevokedEvent.InputTuple,
      PluginRevokedEvent.OutputTuple,
      PluginRevokedEvent.OutputObject
    >;
    PluginRevoked: TypedContractEvent<
      PluginRevokedEvent.InputTuple,
      PluginRevokedEvent.OutputTuple,
      PluginRevokedEvent.OutputObject
    >;

    "PluginUnregistered(address)": TypedContractEvent<
      PluginUnregisteredEvent.InputTuple,
      PluginUnregisteredEvent.OutputTuple,
      PluginUnregisteredEvent.OutputObject
    >;
    PluginUnregistered: TypedContractEvent<
      PluginUnregisteredEvent.InputTuple,
      PluginUnregisteredEvent.OutputTuple,
      PluginUnregisteredEvent.OutputObject
    >;
  };
}
