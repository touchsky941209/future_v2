/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IConfigurable {
  export type MarketBaseConfigStruct = {
    minMarginPerLiquidityPosition: BigNumberish;
    maxLeveragePerLiquidityPosition: BigNumberish;
    liquidationFeeRatePerLiquidityPosition: BigNumberish;
    minMarginPerPosition: BigNumberish;
    maxLeveragePerPosition: BigNumberish;
    liquidationFeeRatePerPosition: BigNumberish;
    maxPositionLiquidity: BigNumberish;
    maxPositionValueRate: BigNumberish;
    maxSizeRatePerPosition: BigNumberish;
    liquidationExecutionFee: BigNumberish;
    interestRate: BigNumberish;
    maxFundingRate: BigNumberish;
  };

  export type MarketBaseConfigStructOutput = [
    minMarginPerLiquidityPosition: bigint,
    maxLeveragePerLiquidityPosition: bigint,
    liquidationFeeRatePerLiquidityPosition: bigint,
    minMarginPerPosition: bigint,
    maxLeveragePerPosition: bigint,
    liquidationFeeRatePerPosition: bigint,
    maxPositionLiquidity: bigint,
    maxPositionValueRate: bigint,
    maxSizeRatePerPosition: bigint,
    liquidationExecutionFee: bigint,
    interestRate: bigint,
    maxFundingRate: bigint
  ] & {
    minMarginPerLiquidityPosition: bigint;
    maxLeveragePerLiquidityPosition: bigint;
    liquidationFeeRatePerLiquidityPosition: bigint;
    minMarginPerPosition: bigint;
    maxLeveragePerPosition: bigint;
    liquidationFeeRatePerPosition: bigint;
    maxPositionLiquidity: bigint;
    maxPositionValueRate: bigint;
    maxSizeRatePerPosition: bigint;
    liquidationExecutionFee: bigint;
    interestRate: bigint;
    maxFundingRate: bigint;
  };

  export type MarketFeeRateConfigStruct = {
    tradingFeeRate: BigNumberish;
    protocolFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralDiscountRate: BigNumberish;
  };

  export type MarketFeeRateConfigStructOutput = [
    tradingFeeRate: bigint,
    protocolFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralDiscountRate: bigint
  ] & {
    tradingFeeRate: bigint;
    protocolFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralDiscountRate: bigint;
  };

  export type VertexConfigStruct = {
    balanceRate: BigNumberish;
    premiumRate: BigNumberish;
  };

  export type VertexConfigStructOutput = [
    balanceRate: bigint,
    premiumRate: bigint
  ] & { balanceRate: bigint; premiumRate: bigint };

  export type MarketPriceConfigStruct = {
    maxPriceImpactLiquidity: BigNumberish;
    liquidationVertexIndex: BigNumberish;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type MarketPriceConfigStructOutput = [
    maxPriceImpactLiquidity: bigint,
    liquidationVertexIndex: bigint,
    vertices: IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: bigint;
    liquidationVertexIndex: bigint;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };

  export type MarketConfigStruct = {
    baseConfig: IConfigurable.MarketBaseConfigStruct;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStruct;
    priceConfig: IConfigurable.MarketPriceConfigStruct;
  };

  export type MarketConfigStructOutput = [
    baseConfig: IConfigurable.MarketBaseConfigStructOutput,
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput,
    priceConfig: IConfigurable.MarketPriceConfigStructOutput
  ] & {
    baseConfig: IConfigurable.MarketBaseConfigStructOutput;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
    priceConfig: IConfigurable.MarketPriceConfigStructOutput;
  };
}

export interface MockConfigurableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USD"
      | "acceptGov"
      | "afterMarketBaseConfigChangedCalled"
      | "afterMarketEnabledCalled"
      | "afterMarketPriceConfigChangedCalled"
      | "changeGov"
      | "enableMarket"
      | "gov"
      | "isEnabledMarket"
      | "marketBaseConfigs"
      | "marketConfigs"
      | "marketFeeRateConfigs"
      | "marketPriceConfigs"
      | "marketPriceVertexConfigs"
      | "pendingGov"
      | "updateMarketBaseConfig"
      | "updateMarketFeeRateConfig"
      | "updateMarketPriceConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeGovStarted"
      | "GovChanged"
      | "MarketBaseConfigChanged"
      | "MarketConfigEnabled"
      | "MarketFeeRateConfigChanged"
      | "MarketPriceConfigChanged"
      | "USDEnabled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "afterMarketBaseConfigChangedCalled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterMarketEnabledCalled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "afterMarketPriceConfigChangedCalled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMarket",
    values: [AddressLike, IConfigurable.MarketConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEnabledMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBaseConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketFeeRateConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPriceVertexConfigs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketBaseConfig",
    values: [AddressLike, IConfigurable.MarketBaseConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketFeeRateConfig",
    values: [AddressLike, IConfigurable.MarketFeeRateConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketPriceConfig",
    values: [AddressLike, IConfigurable.MarketPriceConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterMarketBaseConfigChangedCalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterMarketEnabledCalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "afterMarketPriceConfigChangedCalled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnabledMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBaseConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketFeeRateConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPriceVertexConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketBaseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketFeeRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketPriceConfig",
    data: BytesLike
  ): Result;
}

export namespace ChangeGovStartedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovChangedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketBaseConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketBaseConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketBaseConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketBaseConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketConfigEnabledEvent {
  export type InputTuple = [
    market: AddressLike,
    baseCfg: IConfigurable.MarketBaseConfigStruct,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStruct,
    priceCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    baseCfg: IConfigurable.MarketBaseConfigStructOutput,
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput,
    priceCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    baseCfg: IConfigurable.MarketBaseConfigStructOutput;
    feeRateCfg: IConfigurable.MarketFeeRateConfigStructOutput;
    priceCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketFeeRateConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketFeeRateConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketFeeRateConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketPriceConfigChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    newCfg: IConfigurable.MarketPriceConfigStruct
  ];
  export type OutputTuple = [
    market: string,
    newCfg: IConfigurable.MarketPriceConfigStructOutput
  ];
  export interface OutputObject {
    market: string;
    newCfg: IConfigurable.MarketPriceConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace USDEnabledEvent {
  export type InputTuple = [usd: AddressLike];
  export type OutputTuple = [usd: string];
  export interface OutputObject {
    usd: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockConfigurable extends BaseContract {
  connect(runner?: ContractRunner | null): MockConfigurable;
  waitForDeployment(): Promise<this>;

  interface: MockConfigurableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USD: TypedContractMethod<[], [string], "view">;

  acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  afterMarketBaseConfigChangedCalled: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  afterMarketEnabledCalled: TypedContractMethod<[], [boolean], "view">;

  afterMarketPriceConfigChangedCalled: TypedContractMethod<
    [],
    [boolean],
    "view"
  >;

  changeGov: TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;

  enableMarket: TypedContractMethod<
    [_market: AddressLike, _cfg: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  isEnabledMarket: TypedContractMethod<
    [_market: AddressLike],
    [boolean],
    "view"
  >;

  marketBaseConfigs: TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketBaseConfigStructOutput],
    "view"
  >;

  marketConfigs: TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;

  marketFeeRateConfigs: TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketFeeRateConfigStructOutput],
    "view"
  >;

  marketPriceConfigs: TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketPriceConfigStructOutput],
    "view"
  >;

  marketPriceVertexConfigs: TypedContractMethod<
    [_market: AddressLike, _index: BigNumberish],
    [IConfigurable.VertexConfigStructOutput],
    "view"
  >;

  pendingGov: TypedContractMethod<[], [string], "view">;

  updateMarketBaseConfig: TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketBaseConfigStruct],
    [void],
    "nonpayable"
  >;

  updateMarketFeeRateConfig: TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketFeeRateConfigStruct],
    [void],
    "nonpayable"
  >;

  updateMarketPriceConfig: TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketPriceConfigStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USD"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "afterMarketBaseConfigChangedCalled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "afterMarketEnabledCalled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "afterMarketPriceConfigChangedCalled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "changeGov"
  ): TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableMarket"
  ): TypedContractMethod<
    [_market: AddressLike, _cfg: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isEnabledMarket"
  ): TypedContractMethod<[_market: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketBaseConfigs"
  ): TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketBaseConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketFeeRateConfigs"
  ): TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketFeeRateConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPriceConfigs"
  ): TypedContractMethod<
    [_market: AddressLike],
    [IConfigurable.MarketPriceConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPriceVertexConfigs"
  ): TypedContractMethod<
    [_market: AddressLike, _index: BigNumberish],
    [IConfigurable.VertexConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateMarketBaseConfig"
  ): TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketBaseConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketFeeRateConfig"
  ): TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketFeeRateConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMarketPriceConfig"
  ): TypedContractMethod<
    [_market: AddressLike, _newCfg: IConfigurable.MarketPriceConfigStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChangeGovStarted"
  ): TypedContractEvent<
    ChangeGovStartedEvent.InputTuple,
    ChangeGovStartedEvent.OutputTuple,
    ChangeGovStartedEvent.OutputObject
  >;
  getEvent(
    key: "GovChanged"
  ): TypedContractEvent<
    GovChangedEvent.InputTuple,
    GovChangedEvent.OutputTuple,
    GovChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketBaseConfigChanged"
  ): TypedContractEvent<
    MarketBaseConfigChangedEvent.InputTuple,
    MarketBaseConfigChangedEvent.OutputTuple,
    MarketBaseConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketConfigEnabled"
  ): TypedContractEvent<
    MarketConfigEnabledEvent.InputTuple,
    MarketConfigEnabledEvent.OutputTuple,
    MarketConfigEnabledEvent.OutputObject
  >;
  getEvent(
    key: "MarketFeeRateConfigChanged"
  ): TypedContractEvent<
    MarketFeeRateConfigChangedEvent.InputTuple,
    MarketFeeRateConfigChangedEvent.OutputTuple,
    MarketFeeRateConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "MarketPriceConfigChanged"
  ): TypedContractEvent<
    MarketPriceConfigChangedEvent.InputTuple,
    MarketPriceConfigChangedEvent.OutputTuple,
    MarketPriceConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "USDEnabled"
  ): TypedContractEvent<
    USDEnabledEvent.InputTuple,
    USDEnabledEvent.OutputTuple,
    USDEnabledEvent.OutputObject
  >;

  filters: {
    "ChangeGovStarted(address,address)": TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;
    ChangeGovStarted: TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;

    "GovChanged(address,address)": TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;
    GovChanged: TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;

    "MarketBaseConfigChanged(address,tuple)": TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;
    MarketBaseConfigChanged: TypedContractEvent<
      MarketBaseConfigChangedEvent.InputTuple,
      MarketBaseConfigChangedEvent.OutputTuple,
      MarketBaseConfigChangedEvent.OutputObject
    >;

    "MarketConfigEnabled(address,tuple,tuple,tuple)": TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;
    MarketConfigEnabled: TypedContractEvent<
      MarketConfigEnabledEvent.InputTuple,
      MarketConfigEnabledEvent.OutputTuple,
      MarketConfigEnabledEvent.OutputObject
    >;

    "MarketFeeRateConfigChanged(address,tuple)": TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;
    MarketFeeRateConfigChanged: TypedContractEvent<
      MarketFeeRateConfigChangedEvent.InputTuple,
      MarketFeeRateConfigChangedEvent.OutputTuple,
      MarketFeeRateConfigChangedEvent.OutputObject
    >;

    "MarketPriceConfigChanged(address,tuple)": TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;
    MarketPriceConfigChanged: TypedContractEvent<
      MarketPriceConfigChangedEvent.InputTuple,
      MarketPriceConfigChangedEvent.OutputTuple,
      MarketPriceConfigChangedEvent.OutputObject
    >;

    "USDEnabled(address)": TypedContractEvent<
      USDEnabledEvent.InputTuple,
      USDEnabledEvent.OutputTuple,
      USDEnabledEvent.OutputObject
    >;
    USDEnabled: TypedContractEvent<
      USDEnabledEvent.InputTuple,
      USDEnabledEvent.OutputTuple,
      USDEnabledEvent.OutputObject
    >;
  };
}
