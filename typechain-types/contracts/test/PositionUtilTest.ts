/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMarketPosition {
  export type PositionStruct = {
    margin: BigNumberish;
    size: BigNumberish;
    entryPriceX96: BigNumberish;
    entryFundingRateGrowthX96: BigNumberish;
  };

  export type PositionStructOutput = [
    margin: bigint,
    size: bigint,
    entryPriceX96: bigint,
    entryFundingRateGrowthX96: bigint
  ] & {
    margin: bigint;
    size: bigint;
    entryPriceX96: bigint;
    entryFundingRateGrowthX96: bigint;
  };

  export type GlobalPositionStruct = {
    longSize: BigNumberish;
    shortSize: BigNumberish;
    maxSize: BigNumberish;
    maxSizePerPosition: BigNumberish;
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type GlobalPositionStructOutput = [
    longSize: bigint,
    shortSize: bigint,
    maxSize: bigint,
    maxSizePerPosition: bigint,
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & {
    longSize: bigint;
    shortSize: bigint;
    maxSize: bigint;
    maxSizePerPosition: bigint;
    longFundingRateGrowthX96: bigint;
    shortFundingRateGrowthX96: bigint;
  };

  export type PreviousGlobalFundingRateStruct = {
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type PreviousGlobalFundingRateStructOutput = [
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & { longFundingRateGrowthX96: bigint; shortFundingRateGrowthX96: bigint };

  export type GlobalFundingRateSampleStruct = {
    lastAdjustFundingRateTime: BigNumberish;
    sampleCount: BigNumberish;
    cumulativePremiumRateX96: BigNumberish;
  };

  export type GlobalFundingRateSampleStructOutput = [
    lastAdjustFundingRateTime: bigint,
    sampleCount: bigint,
    cumulativePremiumRateX96: bigint
  ] & {
    lastAdjustFundingRateTime: bigint;
    sampleCount: bigint;
    cumulativePremiumRateX96: bigint;
  };
}

export declare namespace PositionUtil {
  export type DecreasePositionParameterStruct = {
    market: AddressLike;
    account: AddressLike;
    side: BigNumberish;
    marginDelta: BigNumberish;
    sizeDelta: BigNumberish;
    EFC: AddressLike;
    priceFeed: AddressLike;
    receiver: AddressLike;
  };

  export type DecreasePositionParameterStructOutput = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    sizeDelta: bigint,
    EFC: string,
    priceFeed: string,
    receiver: string
  ] & {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    sizeDelta: bigint;
    EFC: string;
    priceFeed: string;
    receiver: string;
  };

  export type TradingFeeStateStruct = {
    tradingFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralToken: BigNumberish;
    referralParentToken: BigNumberish;
  };

  export type TradingFeeStateStructOutput = [
    tradingFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralToken: bigint,
    referralParentToken: bigint
  ] & {
    tradingFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralToken: bigint;
    referralParentToken: bigint;
  };

  export type DistributeFeeParameterStruct = {
    market: AddressLike;
    account: AddressLike;
    sizeDelta: BigNumberish;
    tradePriceX96: BigNumberish;
    tradingFeeState: PositionUtil.TradingFeeStateStruct;
    liquidationFee: BigNumberish;
  };

  export type DistributeFeeParameterStructOutput = [
    market: string,
    account: string,
    sizeDelta: bigint,
    tradePriceX96: bigint,
    tradingFeeState: PositionUtil.TradingFeeStateStructOutput,
    liquidationFee: bigint
  ] & {
    market: string;
    account: string;
    sizeDelta: bigint;
    tradePriceX96: bigint;
    tradingFeeState: PositionUtil.TradingFeeStateStructOutput;
    liquidationFee: bigint;
  };

  export type IncreasePositionParameterStruct = {
    market: AddressLike;
    account: AddressLike;
    side: BigNumberish;
    marginDelta: BigNumberish;
    sizeDelta: BigNumberish;
    EFC: AddressLike;
    priceFeed: AddressLike;
  };

  export type IncreasePositionParameterStructOutput = [
    market: string,
    account: string,
    side: bigint,
    marginDelta: bigint,
    sizeDelta: bigint,
    EFC: string,
    priceFeed: string
  ] & {
    market: string;
    account: string;
    side: bigint;
    marginDelta: bigint;
    sizeDelta: bigint;
    EFC: string;
    priceFeed: string;
  };

  export type LiquidatePositionParameterStruct = {
    market: AddressLike;
    account: AddressLike;
    side: BigNumberish;
    EFC: AddressLike;
    priceFeed: AddressLike;
    feeReceiver: AddressLike;
  };

  export type LiquidatePositionParameterStructOutput = [
    market: string,
    account: string,
    side: bigint,
    EFC: string,
    priceFeed: string,
    feeReceiver: string
  ] & {
    market: string;
    account: string;
    side: bigint;
    EFC: string;
    priceFeed: string;
    feeReceiver: string;
  };
}

export declare namespace IConfigurable {
  export type MarketBaseConfigStruct = {
    minMarginPerLiquidityPosition: BigNumberish;
    maxLeveragePerLiquidityPosition: BigNumberish;
    liquidationFeeRatePerLiquidityPosition: BigNumberish;
    minMarginPerPosition: BigNumberish;
    maxLeveragePerPosition: BigNumberish;
    liquidationFeeRatePerPosition: BigNumberish;
    maxPositionLiquidity: BigNumberish;
    maxPositionValueRate: BigNumberish;
    maxSizeRatePerPosition: BigNumberish;
    liquidationExecutionFee: BigNumberish;
    interestRate: BigNumberish;
    maxFundingRate: BigNumberish;
  };

  export type MarketBaseConfigStructOutput = [
    minMarginPerLiquidityPosition: bigint,
    maxLeveragePerLiquidityPosition: bigint,
    liquidationFeeRatePerLiquidityPosition: bigint,
    minMarginPerPosition: bigint,
    maxLeveragePerPosition: bigint,
    liquidationFeeRatePerPosition: bigint,
    maxPositionLiquidity: bigint,
    maxPositionValueRate: bigint,
    maxSizeRatePerPosition: bigint,
    liquidationExecutionFee: bigint,
    interestRate: bigint,
    maxFundingRate: bigint
  ] & {
    minMarginPerLiquidityPosition: bigint;
    maxLeveragePerLiquidityPosition: bigint;
    liquidationFeeRatePerLiquidityPosition: bigint;
    minMarginPerPosition: bigint;
    maxLeveragePerPosition: bigint;
    liquidationFeeRatePerPosition: bigint;
    maxPositionLiquidity: bigint;
    maxPositionValueRate: bigint;
    maxSizeRatePerPosition: bigint;
    liquidationExecutionFee: bigint;
    interestRate: bigint;
    maxFundingRate: bigint;
  };

  export type MarketFeeRateConfigStruct = {
    tradingFeeRate: BigNumberish;
    protocolFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralDiscountRate: BigNumberish;
  };

  export type MarketFeeRateConfigStructOutput = [
    tradingFeeRate: bigint,
    protocolFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralDiscountRate: bigint
  ] & {
    tradingFeeRate: bigint;
    protocolFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralDiscountRate: bigint;
  };

  export type VertexConfigStruct = {
    balanceRate: BigNumberish;
    premiumRate: BigNumberish;
  };

  export type VertexConfigStructOutput = [
    balanceRate: bigint,
    premiumRate: bigint
  ] & { balanceRate: bigint; premiumRate: bigint };

  export type MarketPriceConfigStruct = {
    maxPriceImpactLiquidity: BigNumberish;
    liquidationVertexIndex: BigNumberish;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type MarketPriceConfigStructOutput = [
    maxPriceImpactLiquidity: bigint,
    liquidationVertexIndex: bigint,
    vertices: IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: bigint;
    liquidationVertexIndex: bigint;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };

  export type MarketConfigStruct = {
    baseConfig: IConfigurable.MarketBaseConfigStruct;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStruct;
    priceConfig: IConfigurable.MarketPriceConfigStruct;
  };

  export type MarketConfigStructOutput = [
    baseConfig: IConfigurable.MarketBaseConfigStructOutput,
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput,
    priceConfig: IConfigurable.MarketPriceConfigStructOutput
  ] & {
    baseConfig: IConfigurable.MarketBaseConfigStructOutput;
    feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
    priceConfig: IConfigurable.MarketPriceConfigStructOutput;
  };
}

export declare namespace LiquidityPositionUtil {
  export type IncreaseLiquidityPositionParameterStruct = {
    market: AddressLike;
    account: AddressLike;
    marginDelta: BigNumberish;
    liquidityDelta: BigNumberish;
    priceFeed: AddressLike;
  };

  export type IncreaseLiquidityPositionParameterStructOutput = [
    market: string,
    account: string,
    marginDelta: bigint,
    liquidityDelta: bigint,
    priceFeed: string
  ] & {
    market: string;
    account: string;
    marginDelta: bigint;
    liquidityDelta: bigint;
    priceFeed: string;
  };
}

export declare namespace IMarketLiquidityPosition {
  export type GlobalLiquidityPositionStruct = {
    netSize: BigNumberish;
    liquidationBufferNetSize: BigNumberish;
    previousSPPriceX96: BigNumberish;
    side: BigNumberish;
    liquidity: BigNumberish;
    unrealizedPnLGrowthX64: BigNumberish;
  };

  export type GlobalLiquidityPositionStructOutput = [
    netSize: bigint,
    liquidationBufferNetSize: bigint,
    previousSPPriceX96: bigint,
    side: bigint,
    liquidity: bigint,
    unrealizedPnLGrowthX64: bigint
  ] & {
    netSize: bigint;
    liquidationBufferNetSize: bigint;
    previousSPPriceX96: bigint;
    side: bigint;
    liquidity: bigint;
    unrealizedPnLGrowthX64: bigint;
  };
}

export declare namespace IMarketManager {
  export type PriceVertexStruct = {
    size: BigNumberish;
    premiumRateX96: BigNumberish;
  };

  export type PriceVertexStructOutput = [
    size: bigint,
    premiumRateX96: bigint
  ] & { size: bigint; premiumRateX96: bigint };

  export type PriceStateStruct = {
    premiumRateX96: BigNumberish;
    pendingVertexIndex: BigNumberish;
    currentVertexIndex: BigNumberish;
    basisIndexPriceX96: BigNumberish;
    priceVertices: IMarketManager.PriceVertexStruct[];
    liquidationBufferNetSizes: BigNumberish[];
  };

  export type PriceStateStructOutput = [
    premiumRateX96: bigint,
    pendingVertexIndex: bigint,
    currentVertexIndex: bigint,
    basisIndexPriceX96: bigint,
    priceVertices: IMarketManager.PriceVertexStructOutput[],
    liquidationBufferNetSizes: bigint[]
  ] & {
    premiumRateX96: bigint;
    pendingVertexIndex: bigint;
    currentVertexIndex: bigint;
    basisIndexPriceX96: bigint;
    priceVertices: IMarketManager.PriceVertexStructOutput[];
    liquidationBufferNetSizes: bigint[];
  };

  export type GlobalLiquidationFundStruct = {
    liquidationFund: BigNumberish;
    liquidity: BigNumberish;
  };

  export type GlobalLiquidationFundStructOutput = [
    liquidationFund: bigint,
    liquidity: bigint
  ] & { liquidationFund: bigint; liquidity: bigint };
}

export interface PositionUtilTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adjustedMarginDelta"
      | "calculateFundingFee"
      | "calculateLiquidationFee"
      | "calculateLiquidationPriceX96"
      | "calculateLiquidity"
      | "calculateMaintenanceMargin"
      | "calculateNextEntryPriceX96"
      | "calculateTradingFee"
      | "calculateUnrealizedPnL"
      | "chooseFundingRateGrowthX96"
      | "decreasePosition"
      | "distributeFee"
      | "enableMarket"
      | "gasCost"
      | "getGasCostDecreasePosition"
      | "getGasCostIncreasePosition"
      | "getGasCostLiquidatePosition"
      | "increaseLiquidityPosition"
      | "increasePosition"
      | "liquidatePosition"
      | "marketConfigs"
      | "positions"
      | "priceFeed"
      | "reentrancyStatus"
      | "setGlobalLiquidationFund"
      | "setGlobalLiquidityPosition"
      | "setGlobalPosition"
      | "setMarketBaseConfig"
      | "setMarketFeeRateConfig"
      | "setMarketPriceConfig"
      | "setPosition"
      | "setPreviousGlobalFundingRate"
      | "setPriceFeed"
      | "setPriceState"
      | "state"
      | "tradePriceX96"
      | "tradingFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GlobalLiquidationFundIncreasedByLiquidation"
      | "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee"
      | "PriceVertexChanged"
      | "ProtocolFeeIncreased"
      | "ReferralFeeIncreased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adjustedMarginDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFundingFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationPriceX96",
    values: [
      IMarketPosition.PositionStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaintenanceMargin",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNextEntryPriceX96",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTradingFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnrealizedPnL",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseFundingRateGrowthX96",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [PositionUtil.DecreasePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFee",
    values: [PositionUtil.DistributeFeeParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "enableMarket",
    values: [AddressLike, IConfigurable.MarketConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "gasCost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGasCostDecreasePosition",
    values: [PositionUtil.DecreasePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostIncreasePosition",
    values: [PositionUtil.IncreasePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostLiquidatePosition",
    values: [PositionUtil.LiquidatePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityPosition",
    values: [LiquidityPositionUtil.IncreaseLiquidityPositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [PositionUtil.IncreasePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [PositionUtil.LiquidatePositionParameterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marketConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reentrancyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidationFund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidityPosition",
    values: [IMarketLiquidityPosition.GlobalLiquidityPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalPosition",
    values: [IMarketPosition.GlobalPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketBaseConfig",
    values: [AddressLike, IConfigurable.MarketBaseConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFeeRateConfig",
    values: [AddressLike, IConfigurable.MarketFeeRateConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPriceConfig",
    values: [AddressLike, IConfigurable.MarketPriceConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPosition",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreviousGlobalFundingRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceState",
    values: [IMarketManager.PriceStateStruct]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradePriceX96",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustedMarginDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNextEntryPriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnrealizedPnL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseFundingRateGrowthX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostLiquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reentrancyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidationFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketBaseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFeeRateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPriceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreviousGlobalFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradePriceX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradingFee", data: BytesLike): Result;
}

export namespace GlobalLiquidationFundIncreasedByLiquidationEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidationFee: BigNumberish,
    liquidationFundAfter: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    liquidationFee: bigint,
    liquidationFundAfter: bigint
  ];
  export interface OutputObject {
    market: string;
    liquidationFee: bigint;
    liquidationFundAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent {
  export type InputTuple = [
    market: AddressLike,
    liquidityFee: BigNumberish,
    unrealizedPnLGrowthAfterX64: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    liquidityFee: bigint,
    unrealizedPnLGrowthAfterX64: bigint
  ];
  export interface OutputObject {
    market: string;
    liquidityFee: bigint;
    unrealizedPnLGrowthAfterX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceVertexChangedEvent {
  export type InputTuple = [
    market: AddressLike,
    index: BigNumberish,
    sizeAfter: BigNumberish,
    premiumRateAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    index: bigint,
    sizeAfter: bigint,
    premiumRateAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    index: bigint;
    sizeAfter: bigint;
    premiumRateAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeIncreasedEvent {
  export type InputTuple = [market: AddressLike, amount: BigNumberish];
  export type OutputTuple = [market: string, amount: bigint];
  export interface OutputObject {
    market: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeeIncreasedEvent {
  export type InputTuple = [
    market: AddressLike,
    referee: AddressLike,
    referralToken: BigNumberish,
    referralFee: BigNumberish,
    referralParentToken: BigNumberish,
    referralParentFee: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    referee: string,
    referralToken: bigint,
    referralFee: bigint,
    referralParentToken: bigint,
    referralParentFee: bigint
  ];
  export interface OutputObject {
    market: string;
    referee: string;
    referralToken: bigint;
    referralFee: bigint;
    referralParentToken: bigint;
    referralParentFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionUtilTest extends BaseContract {
  connect(runner?: ContractRunner | null): PositionUtilTest;
  waitForDeployment(): Promise<this>;

  interface: PositionUtilTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adjustedMarginDelta: TypedContractMethod<[], [bigint], "view">;

  calculateFundingFee: TypedContractMethod<
    [
      _globalFundingRateGrowthX96: BigNumberish,
      _positionFundingRateGrowthX96: BigNumberish,
      _positionSize: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateLiquidationFee: TypedContractMethod<
    [
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _liquidationFeeRate: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateLiquidationPriceX96: TypedContractMethod<
    [
      _positionCache: IMarketPosition.PositionStruct,
      _side: BigNumberish,
      _fundingFee: BigNumberish,
      _liquidationFeeRate: BigNumberish,
      _tradingFeeRate: BigNumberish,
      _liquidationExecutionFee: BigNumberish
    ],
    [
      [bigint, bigint] & {
        liquidationPriceX96: bigint;
        adjustedFundingFee: bigint;
      }
    ],
    "view"
  >;

  calculateLiquidity: TypedContractMethod<
    [_size: BigNumberish, _priceX96: BigNumberish],
    [bigint],
    "view"
  >;

  calculateMaintenanceMargin: TypedContractMethod<
    [
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _indexPriceX96: BigNumberish,
      _liquidationFeeRate: BigNumberish,
      _tradingFeeRate: BigNumberish,
      _liquidationExecutionFee: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateNextEntryPriceX96: TypedContractMethod<
    [
      _side: BigNumberish,
      _sizeBefore: BigNumberish,
      _entryPriceBeforeX96: BigNumberish,
      _sizeDelta: BigNumberish,
      _tradePriceX96: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateTradingFee: TypedContractMethod<
    [
      _size: BigNumberish,
      _tradePriceX96: BigNumberish,
      _tradingFeeRate: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateUnrealizedPnL: TypedContractMethod<
    [
      _side: BigNumberish,
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _priceX96: BigNumberish
    ],
    [bigint],
    "view"
  >;

  chooseFundingRateGrowthX96: TypedContractMethod<
    [_side: BigNumberish],
    [bigint],
    "view"
  >;

  decreasePosition: TypedContractMethod<
    [_parameter: PositionUtil.DecreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  distributeFee: TypedContractMethod<
    [_parameter: PositionUtil.DistributeFeeParameterStruct],
    [void],
    "nonpayable"
  >;

  enableMarket: TypedContractMethod<
    [_market: AddressLike, _marketConfig: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;

  gasCost: TypedContractMethod<[], [bigint], "view">;

  getGasCostDecreasePosition: TypedContractMethod<
    [_parameter: PositionUtil.DecreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  getGasCostIncreasePosition: TypedContractMethod<
    [_parameter: PositionUtil.IncreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  getGasCostLiquidatePosition: TypedContractMethod<
    [_parameter: PositionUtil.LiquidatePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  increaseLiquidityPosition: TypedContractMethod<
    [
      _parameter: LiquidityPositionUtil.IncreaseLiquidityPositionParameterStruct
    ],
    [void],
    "nonpayable"
  >;

  increasePosition: TypedContractMethod<
    [_parameter: PositionUtil.IncreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  liquidatePosition: TypedContractMethod<
    [_parameter: PositionUtil.LiquidatePositionParameterStruct],
    [void],
    "nonpayable"
  >;

  marketConfigs: TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;

  positions: TypedContractMethod<
    [_account: AddressLike, _side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;

  priceFeed: TypedContractMethod<[], [string], "view">;

  reentrancyStatus: TypedContractMethod<[], [bigint], "view">;

  setGlobalLiquidationFund: TypedContractMethod<
    [_liquidationFund: BigNumberish, _liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGlobalLiquidityPosition: TypedContractMethod<
    [
      _globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStruct
    ],
    [void],
    "nonpayable"
  >;

  setGlobalPosition: TypedContractMethod<
    [_globalPosition: IMarketPosition.GlobalPositionStruct],
    [void],
    "nonpayable"
  >;

  setMarketBaseConfig: TypedContractMethod<
    [
      _market: AddressLike,
      _marketBaseConfig: IConfigurable.MarketBaseConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  setMarketFeeRateConfig: TypedContractMethod<
    [
      _market: AddressLike,
      _marketFeeRateConfig: IConfigurable.MarketFeeRateConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  setMarketPriceConfig: TypedContractMethod<
    [
      _market: AddressLike,
      _marketPriceConfig: IConfigurable.MarketPriceConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  setPosition: TypedContractMethod<
    [
      _account: AddressLike,
      _side: BigNumberish,
      _margin: BigNumberish,
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _entryFundingRateGrowthX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPreviousGlobalFundingRate: TypedContractMethod<
    [
      _longFundingRateGrowthX96: BigNumberish,
      _shortFundingRateGrowthX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [_priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceState: TypedContractMethod<
    [_priceState: IMarketManager.PriceStateStruct],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<
    [],
    [
      [
        IMarketManager.PriceStateStructOutput,
        bigint,
        bigint,
        IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput,
        IMarketPosition.GlobalPositionStructOutput,
        IMarketPosition.PreviousGlobalFundingRateStructOutput,
        IMarketPosition.GlobalFundingRateSampleStructOutput,
        IMarketManager.GlobalLiquidationFundStructOutput
      ] & {
        priceState: IMarketManager.PriceStateStructOutput;
        usdBalance: bigint;
        protocolFee: bigint;
        globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput;
        globalPosition: IMarketPosition.GlobalPositionStructOutput;
        previousGlobalFundingRate: IMarketPosition.PreviousGlobalFundingRateStructOutput;
        globalFundingRateSample: IMarketPosition.GlobalFundingRateSampleStructOutput;
        globalLiquidationFund: IMarketManager.GlobalLiquidationFundStructOutput;
      }
    ],
    "view"
  >;

  tradePriceX96: TypedContractMethod<[], [bigint], "view">;

  tradingFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adjustedMarginDelta"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateFundingFee"
  ): TypedContractMethod<
    [
      _globalFundingRateGrowthX96: BigNumberish,
      _positionFundingRateGrowthX96: BigNumberish,
      _positionSize: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateLiquidationFee"
  ): TypedContractMethod<
    [
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _liquidationFeeRate: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateLiquidationPriceX96"
  ): TypedContractMethod<
    [
      _positionCache: IMarketPosition.PositionStruct,
      _side: BigNumberish,
      _fundingFee: BigNumberish,
      _liquidationFeeRate: BigNumberish,
      _tradingFeeRate: BigNumberish,
      _liquidationExecutionFee: BigNumberish
    ],
    [
      [bigint, bigint] & {
        liquidationPriceX96: bigint;
        adjustedFundingFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateLiquidity"
  ): TypedContractMethod<
    [_size: BigNumberish, _priceX96: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateMaintenanceMargin"
  ): TypedContractMethod<
    [
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _indexPriceX96: BigNumberish,
      _liquidationFeeRate: BigNumberish,
      _tradingFeeRate: BigNumberish,
      _liquidationExecutionFee: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateNextEntryPriceX96"
  ): TypedContractMethod<
    [
      _side: BigNumberish,
      _sizeBefore: BigNumberish,
      _entryPriceBeforeX96: BigNumberish,
      _sizeDelta: BigNumberish,
      _tradePriceX96: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTradingFee"
  ): TypedContractMethod<
    [
      _size: BigNumberish,
      _tradePriceX96: BigNumberish,
      _tradingFeeRate: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateUnrealizedPnL"
  ): TypedContractMethod<
    [
      _side: BigNumberish,
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _priceX96: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "chooseFundingRateGrowthX96"
  ): TypedContractMethod<[_side: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreasePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.DecreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeFee"
  ): TypedContractMethod<
    [_parameter: PositionUtil.DistributeFeeParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableMarket"
  ): TypedContractMethod<
    [_market: AddressLike, _marketConfig: IConfigurable.MarketConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGasCostDecreasePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.DecreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGasCostIncreasePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.IncreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGasCostLiquidatePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.LiquidatePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseLiquidityPosition"
  ): TypedContractMethod<
    [
      _parameter: LiquidityPositionUtil.IncreaseLiquidityPositionParameterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increasePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.IncreasePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidatePosition"
  ): TypedContractMethod<
    [_parameter: PositionUtil.LiquidatePositionParameterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [_account: AddressLike, _side: BigNumberish],
    [IMarketPosition.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reentrancyStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setGlobalLiquidationFund"
  ): TypedContractMethod<
    [_liquidationFund: BigNumberish, _liquidity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlobalLiquidityPosition"
  ): TypedContractMethod<
    [
      _globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGlobalPosition"
  ): TypedContractMethod<
    [_globalPosition: IMarketPosition.GlobalPositionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketBaseConfig"
  ): TypedContractMethod<
    [
      _market: AddressLike,
      _marketBaseConfig: IConfigurable.MarketBaseConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketFeeRateConfig"
  ): TypedContractMethod<
    [
      _market: AddressLike,
      _marketFeeRateConfig: IConfigurable.MarketFeeRateConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketPriceConfig"
  ): TypedContractMethod<
    [
      _market: AddressLike,
      _marketPriceConfig: IConfigurable.MarketPriceConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPosition"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _side: BigNumberish,
      _margin: BigNumberish,
      _size: BigNumberish,
      _entryPriceX96: BigNumberish,
      _entryFundingRateGrowthX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPreviousGlobalFundingRate"
  ): TypedContractMethod<
    [
      _longFundingRateGrowthX96: BigNumberish,
      _shortFundingRateGrowthX96: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceState"
  ): TypedContractMethod<
    [_priceState: IMarketManager.PriceStateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<
    [],
    [
      [
        IMarketManager.PriceStateStructOutput,
        bigint,
        bigint,
        IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput,
        IMarketPosition.GlobalPositionStructOutput,
        IMarketPosition.PreviousGlobalFundingRateStructOutput,
        IMarketPosition.GlobalFundingRateSampleStructOutput,
        IMarketManager.GlobalLiquidationFundStructOutput
      ] & {
        priceState: IMarketManager.PriceStateStructOutput;
        usdBalance: bigint;
        protocolFee: bigint;
        globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput;
        globalPosition: IMarketPosition.GlobalPositionStructOutput;
        previousGlobalFundingRate: IMarketPosition.PreviousGlobalFundingRateStructOutput;
        globalFundingRateSample: IMarketPosition.GlobalFundingRateSampleStructOutput;
        globalLiquidationFund: IMarketManager.GlobalLiquidationFundStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tradePriceX96"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradingFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "GlobalLiquidationFundIncreasedByLiquidation"
  ): TypedContractEvent<
    GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
    GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
    GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
  >;
  getEvent(
    key: "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee"
  ): TypedContractEvent<
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
  >;
  getEvent(
    key: "PriceVertexChanged"
  ): TypedContractEvent<
    PriceVertexChangedEvent.InputTuple,
    PriceVertexChangedEvent.OutputTuple,
    PriceVertexChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeIncreased"
  ): TypedContractEvent<
    ProtocolFeeIncreasedEvent.InputTuple,
    ProtocolFeeIncreasedEvent.OutputTuple,
    ProtocolFeeIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeeIncreased"
  ): TypedContractEvent<
    ReferralFeeIncreasedEvent.InputTuple,
    ReferralFeeIncreasedEvent.OutputTuple,
    ReferralFeeIncreasedEvent.OutputObject
  >;

  filters: {
    "GlobalLiquidationFundIncreasedByLiquidation(address,int256,int256)": TypedContractEvent<
      GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
    >;
    GlobalLiquidationFundIncreasedByLiquidation: TypedContractEvent<
      GlobalLiquidationFundIncreasedByLiquidationEvent.InputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputTuple,
      GlobalLiquidationFundIncreasedByLiquidationEvent.OutputObject
    >;

    "GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee(address,uint128,int256)": TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
    >;
    GlobalLiquidityPositionPnLGrowthIncreasedByTradingFee: TypedContractEvent<
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.InputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputTuple,
      GlobalLiquidityPositionPnLGrowthIncreasedByTradingFeeEvent.OutputObject
    >;

    "PriceVertexChanged(address,uint8,uint128,uint128)": TypedContractEvent<
      PriceVertexChangedEvent.InputTuple,
      PriceVertexChangedEvent.OutputTuple,
      PriceVertexChangedEvent.OutputObject
    >;
    PriceVertexChanged: TypedContractEvent<
      PriceVertexChangedEvent.InputTuple,
      PriceVertexChangedEvent.OutputTuple,
      PriceVertexChangedEvent.OutputObject
    >;

    "ProtocolFeeIncreased(address,uint128)": TypedContractEvent<
      ProtocolFeeIncreasedEvent.InputTuple,
      ProtocolFeeIncreasedEvent.OutputTuple,
      ProtocolFeeIncreasedEvent.OutputObject
    >;
    ProtocolFeeIncreased: TypedContractEvent<
      ProtocolFeeIncreasedEvent.InputTuple,
      ProtocolFeeIncreasedEvent.OutputTuple,
      ProtocolFeeIncreasedEvent.OutputObject
    >;

    "ReferralFeeIncreased(address,address,uint256,uint128,uint256,uint128)": TypedContractEvent<
      ReferralFeeIncreasedEvent.InputTuple,
      ReferralFeeIncreasedEvent.OutputTuple,
      ReferralFeeIncreasedEvent.OutputObject
    >;
    ReferralFeeIncreased: TypedContractEvent<
      ReferralFeeIncreasedEvent.InputTuple,
      ReferralFeeIncreasedEvent.OutputTuple,
      ReferralFeeIncreasedEvent.OutputObject
    >;
  };
}
