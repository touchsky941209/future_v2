/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IConfigurable {
  export type MarketBaseConfigStruct = {
    minMarginPerLiquidityPosition: BigNumberish;
    maxLeveragePerLiquidityPosition: BigNumberish;
    liquidationFeeRatePerLiquidityPosition: BigNumberish;
    minMarginPerPosition: BigNumberish;
    maxLeveragePerPosition: BigNumberish;
    liquidationFeeRatePerPosition: BigNumberish;
    maxPositionLiquidity: BigNumberish;
    maxPositionValueRate: BigNumberish;
    maxSizeRatePerPosition: BigNumberish;
    liquidationExecutionFee: BigNumberish;
    interestRate: BigNumberish;
    maxFundingRate: BigNumberish;
  };

  export type MarketBaseConfigStructOutput = [
    minMarginPerLiquidityPosition: bigint,
    maxLeveragePerLiquidityPosition: bigint,
    liquidationFeeRatePerLiquidityPosition: bigint,
    minMarginPerPosition: bigint,
    maxLeveragePerPosition: bigint,
    liquidationFeeRatePerPosition: bigint,
    maxPositionLiquidity: bigint,
    maxPositionValueRate: bigint,
    maxSizeRatePerPosition: bigint,
    liquidationExecutionFee: bigint,
    interestRate: bigint,
    maxFundingRate: bigint
  ] & {
    minMarginPerLiquidityPosition: bigint;
    maxLeveragePerLiquidityPosition: bigint;
    liquidationFeeRatePerLiquidityPosition: bigint;
    minMarginPerPosition: bigint;
    maxLeveragePerPosition: bigint;
    liquidationFeeRatePerPosition: bigint;
    maxPositionLiquidity: bigint;
    maxPositionValueRate: bigint;
    maxSizeRatePerPosition: bigint;
    liquidationExecutionFee: bigint;
    interestRate: bigint;
    maxFundingRate: bigint;
  };

  export type MarketFeeRateConfigStruct = {
    tradingFeeRate: BigNumberish;
    protocolFeeRate: BigNumberish;
    referralReturnFeeRate: BigNumberish;
    referralParentReturnFeeRate: BigNumberish;
    referralDiscountRate: BigNumberish;
  };

  export type MarketFeeRateConfigStructOutput = [
    tradingFeeRate: bigint,
    protocolFeeRate: bigint,
    referralReturnFeeRate: bigint,
    referralParentReturnFeeRate: bigint,
    referralDiscountRate: bigint
  ] & {
    tradingFeeRate: bigint;
    protocolFeeRate: bigint;
    referralReturnFeeRate: bigint;
    referralParentReturnFeeRate: bigint;
    referralDiscountRate: bigint;
  };

  export type VertexConfigStruct = {
    balanceRate: BigNumberish;
    premiumRate: BigNumberish;
  };

  export type VertexConfigStructOutput = [
    balanceRate: bigint,
    premiumRate: bigint
  ] & { balanceRate: bigint; premiumRate: bigint };

  export type MarketPriceConfigStruct = {
    maxPriceImpactLiquidity: BigNumberish;
    liquidationVertexIndex: BigNumberish;
    vertices: IConfigurable.VertexConfigStruct[];
  };

  export type MarketPriceConfigStructOutput = [
    maxPriceImpactLiquidity: bigint,
    liquidationVertexIndex: bigint,
    vertices: IConfigurable.VertexConfigStructOutput[]
  ] & {
    maxPriceImpactLiquidity: bigint;
    liquidationVertexIndex: bigint;
    vertices: IConfigurable.VertexConfigStructOutput[];
  };
}

export declare namespace IMarketLiquidityPosition {
  export type GlobalLiquidityPositionStruct = {
    netSize: BigNumberish;
    liquidationBufferNetSize: BigNumberish;
    previousSPPriceX96: BigNumberish;
    side: BigNumberish;
    liquidity: BigNumberish;
    unrealizedPnLGrowthX64: BigNumberish;
  };

  export type GlobalLiquidityPositionStructOutput = [
    netSize: bigint,
    liquidationBufferNetSize: bigint,
    previousSPPriceX96: bigint,
    side: bigint,
    liquidity: bigint,
    unrealizedPnLGrowthX64: bigint
  ] & {
    netSize: bigint;
    liquidationBufferNetSize: bigint;
    previousSPPriceX96: bigint;
    side: bigint;
    liquidity: bigint;
    unrealizedPnLGrowthX64: bigint;
  };
}

export declare namespace IMarketManager {
  export type PriceVertexStruct = {
    size: BigNumberish;
    premiumRateX96: BigNumberish;
  };

  export type PriceVertexStructOutput = [
    size: bigint,
    premiumRateX96: bigint
  ] & { size: bigint; premiumRateX96: bigint };

  export type PriceStateStruct = {
    premiumRateX96: BigNumberish;
    pendingVertexIndex: BigNumberish;
    currentVertexIndex: BigNumberish;
    basisIndexPriceX96: BigNumberish;
    priceVertices: IMarketManager.PriceVertexStruct[];
    liquidationBufferNetSizes: BigNumberish[];
  };

  export type PriceStateStructOutput = [
    premiumRateX96: bigint,
    pendingVertexIndex: bigint,
    currentVertexIndex: bigint,
    basisIndexPriceX96: bigint,
    priceVertices: IMarketManager.PriceVertexStructOutput[],
    liquidationBufferNetSizes: bigint[]
  ] & {
    premiumRateX96: bigint;
    pendingVertexIndex: bigint;
    currentVertexIndex: bigint;
    basisIndexPriceX96: bigint;
    priceVertices: IMarketManager.PriceVertexStructOutput[];
    liquidationBufferNetSizes: bigint[];
  };

  export type GlobalLiquidationFundStruct = {
    liquidationFund: BigNumberish;
    liquidity: BigNumberish;
  };

  export type GlobalLiquidationFundStructOutput = [
    liquidationFund: bigint,
    liquidity: bigint
  ] & { liquidationFund: bigint; liquidity: bigint };
}

export declare namespace IMarketPosition {
  export type GlobalPositionStruct = {
    longSize: BigNumberish;
    shortSize: BigNumberish;
    maxSize: BigNumberish;
    maxSizePerPosition: BigNumberish;
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type GlobalPositionStructOutput = [
    longSize: bigint,
    shortSize: bigint,
    maxSize: bigint,
    maxSizePerPosition: bigint,
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & {
    longSize: bigint;
    shortSize: bigint;
    maxSize: bigint;
    maxSizePerPosition: bigint;
    longFundingRateGrowthX96: bigint;
    shortFundingRateGrowthX96: bigint;
  };

  export type PreviousGlobalFundingRateStruct = {
    longFundingRateGrowthX96: BigNumberish;
    shortFundingRateGrowthX96: BigNumberish;
  };

  export type PreviousGlobalFundingRateStructOutput = [
    longFundingRateGrowthX96: bigint,
    shortFundingRateGrowthX96: bigint
  ] & { longFundingRateGrowthX96: bigint; shortFundingRateGrowthX96: bigint };

  export type GlobalFundingRateSampleStruct = {
    lastAdjustFundingRateTime: BigNumberish;
    sampleCount: BigNumberish;
    cumulativePremiumRateX96: BigNumberish;
  };

  export type GlobalFundingRateSampleStructOutput = [
    lastAdjustFundingRateTime: bigint,
    sampleCount: bigint,
    cumulativePremiumRateX96: bigint
  ] & {
    lastAdjustFundingRateTime: bigint;
    sampleCount: bigint;
    cumulativePremiumRateX96: bigint;
  };
}

export interface MarketUtilTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "marketConfigs"
      | "priceFeed"
      | "setGlobalLiquidityPosition"
      | "setPriceFeed"
      | "setPriceState"
      | "settleLiquidityUnrealizedPnL"
      | "state"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SettlementPointReached"): EventFragment;

  encodeFunctionData(
    functionFragment: "marketConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGlobalLiquidityPosition",
    values: [IMarketLiquidityPosition.GlobalLiquidityPositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceState",
    values: [IMarketManager.PriceStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "settleLiquidityUnrealizedPnL",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "marketConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleLiquidityUnrealizedPnL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
}

export namespace SettlementPointReachedEvent {
  export type InputTuple = [
    market: AddressLike,
    unrealizedPnLGrowthAfterX64: BigNumberish,
    previousSPPriceAfterX96: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    unrealizedPnLGrowthAfterX64: bigint,
    previousSPPriceAfterX96: bigint
  ];
  export interface OutputObject {
    market: string;
    unrealizedPnLGrowthAfterX64: bigint;
    previousSPPriceAfterX96: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketUtilTest extends BaseContract {
  connect(runner?: ContractRunner | null): MarketUtilTest;
  waitForDeployment(): Promise<this>;

  interface: MarketUtilTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  marketConfigs: TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;

  priceFeed: TypedContractMethod<[], [string], "view">;

  setGlobalLiquidityPosition: TypedContractMethod<
    [
      _globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStruct
    ],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [_priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceState: TypedContractMethod<
    [_priceState: IMarketManager.PriceStateStruct],
    [void],
    "nonpayable"
  >;

  settleLiquidityUnrealizedPnL: TypedContractMethod<
    [_market: AddressLike],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<
    [],
    [
      [
        IMarketManager.PriceStateStructOutput,
        bigint,
        bigint,
        IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput,
        IMarketPosition.GlobalPositionStructOutput,
        IMarketPosition.PreviousGlobalFundingRateStructOutput,
        IMarketPosition.GlobalFundingRateSampleStructOutput,
        IMarketManager.GlobalLiquidationFundStructOutput
      ] & {
        priceState: IMarketManager.PriceStateStructOutput;
        usdBalance: bigint;
        protocolFee: bigint;
        globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput;
        globalPosition: IMarketPosition.GlobalPositionStructOutput;
        previousGlobalFundingRate: IMarketPosition.PreviousGlobalFundingRateStructOutput;
        globalFundingRateSample: IMarketPosition.GlobalFundingRateSampleStructOutput;
        globalLiquidationFund: IMarketManager.GlobalLiquidationFundStructOutput;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "marketConfigs"
  ): TypedContractMethod<
    [market: AddressLike],
    [
      [
        IConfigurable.MarketBaseConfigStructOutput,
        IConfigurable.MarketFeeRateConfigStructOutput,
        IConfigurable.MarketPriceConfigStructOutput
      ] & {
        baseConfig: IConfigurable.MarketBaseConfigStructOutput;
        feeRateConfig: IConfigurable.MarketFeeRateConfigStructOutput;
        priceConfig: IConfigurable.MarketPriceConfigStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGlobalLiquidityPosition"
  ): TypedContractMethod<
    [
      _globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceState"
  ): TypedContractMethod<
    [_priceState: IMarketManager.PriceStateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleLiquidityUnrealizedPnL"
  ): TypedContractMethod<[_market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<
    [],
    [
      [
        IMarketManager.PriceStateStructOutput,
        bigint,
        bigint,
        IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput,
        IMarketPosition.GlobalPositionStructOutput,
        IMarketPosition.PreviousGlobalFundingRateStructOutput,
        IMarketPosition.GlobalFundingRateSampleStructOutput,
        IMarketManager.GlobalLiquidationFundStructOutput
      ] & {
        priceState: IMarketManager.PriceStateStructOutput;
        usdBalance: bigint;
        protocolFee: bigint;
        globalLiquidityPosition: IMarketLiquidityPosition.GlobalLiquidityPositionStructOutput;
        globalPosition: IMarketPosition.GlobalPositionStructOutput;
        previousGlobalFundingRate: IMarketPosition.PreviousGlobalFundingRateStructOutput;
        globalFundingRateSample: IMarketPosition.GlobalFundingRateSampleStructOutput;
        globalLiquidationFund: IMarketManager.GlobalLiquidationFundStructOutput;
      }
    ],
    "view"
  >;

  getEvent(
    key: "SettlementPointReached"
  ): TypedContractEvent<
    SettlementPointReachedEvent.InputTuple,
    SettlementPointReachedEvent.OutputTuple,
    SettlementPointReachedEvent.OutputObject
  >;

  filters: {
    "SettlementPointReached(address,int256,uint160)": TypedContractEvent<
      SettlementPointReachedEvent.InputTuple,
      SettlementPointReachedEvent.OutputTuple,
      SettlementPointReachedEvent.OutputObject
    >;
    SettlementPointReached: TypedContractEvent<
      SettlementPointReachedEvent.InputTuple,
      SettlementPointReachedEvent.OutputTuple,
      SettlementPointReachedEvent.OutputObject
    >;
  };
}
