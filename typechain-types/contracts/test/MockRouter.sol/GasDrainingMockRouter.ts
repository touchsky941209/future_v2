/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface GasDrainingMockRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "pluginClosePositionByLiquidator"
      | "pluginDecreaseLiquidityPosition"
      | "pluginDecreasePosition"
      | "pluginIncreaseLiquidityPosition"
      | "pluginIncreasePosition"
      | "pluginSampleAndAdjustFundingRate"
      | "pluginTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "pluginClosePositionByLiquidator",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginDecreaseLiquidityPosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginDecreasePosition",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginIncreaseLiquidityPosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginIncreasePosition",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginSampleAndAdjustFundingRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginTransfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "pluginClosePositionByLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginDecreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginIncreaseLiquidityPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginSampleAndAdjustFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginTransfer",
    data: BytesLike
  ): Result;
}

export interface GasDrainingMockRouter extends BaseContract {
  connect(runner?: ContractRunner | null): GasDrainingMockRouter;
  waitForDeployment(): Promise<this>;

  interface: GasDrainingMockRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  pluginClosePositionByLiquidator: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: AddressLike
    ],
    [bigint],
    "view"
  >;

  pluginDecreaseLiquidityPosition: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: AddressLike
    ],
    [bigint],
    "view"
  >;

  pluginDecreasePosition: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: AddressLike
    ],
    [bigint],
    "view"
  >;

  pluginIncreaseLiquidityPosition: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;

  pluginIncreasePosition: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;

  pluginSampleAndAdjustFundingRate: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "view"
  >;

  pluginTransfer: TypedContractMethod<
    [
      _token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "pluginClosePositionByLiquidator"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginDecreaseLiquidityPosition"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginDecreasePosition"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginIncreaseLiquidityPosition"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginIncreasePosition"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pluginSampleAndAdjustFundingRate"
  ): TypedContractMethod<[arg0: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "pluginTransfer"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
