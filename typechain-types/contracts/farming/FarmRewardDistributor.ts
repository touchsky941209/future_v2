/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FarmRewardDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EFC"
      | "acceptGov"
      | "changeGov"
      | "collectBatch"
      | "collectedReferralRewards"
      | "collectedRewards"
      | "collectors"
      | "distributorV2"
      | "feeDistributor"
      | "gov"
      | "marketIndexer"
      | "nonces"
      | "pendingGov"
      | "setCollector"
      | "signer"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeGovStarted"
      | "CollectorUpdated"
      | "GovChanged"
      | "RewardCollected"
      | "RewardLockedAndBurned"
  ): EventFragment;

  encodeFunctionData(functionFragment: "EFC", values?: undefined): string;
  encodeFunctionData(functionFragment: "acceptGov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeGov",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectBatch",
    values: [AddressLike, BigNumberish, BigNumberish[], BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedReferralRewards",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedRewards",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketIndexer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "pendingGov",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollector",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "EFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedReferralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributorV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketIndexer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace ChangeGovStartedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectorUpdatedEvent {
  export type InputTuple = [collector: AddressLike, enabled: boolean];
  export type OutputTuple = [collector: string, enabled: boolean];
  export interface OutputObject {
    collector: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovChangedEvent {
  export type InputTuple = [previousGov: AddressLike, newGov: AddressLike];
  export type OutputTuple = [previousGov: string, newGov: string];
  export interface OutputObject {
    previousGov: string;
    newGov: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardCollectedEvent {
  export type InputTuple = [
    pool: AddressLike,
    account: AddressLike,
    rewardType: BigNumberish,
    referralToken: BigNumberish,
    nonce: BigNumberish,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    account: string,
    rewardType: bigint,
    referralToken: bigint,
    nonce: bigint,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    pool: string;
    account: string;
    rewardType: bigint;
    referralToken: bigint;
    nonce: bigint;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardLockedAndBurnedEvent {
  export type InputTuple = [
    account: AddressLike,
    period: BigNumberish,
    receiver: AddressLike,
    lockedOrUnlockedAmount: BigNumberish,
    burnedAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    period: bigint,
    receiver: string,
    lockedOrUnlockedAmount: bigint,
    burnedAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    period: bigint;
    receiver: string;
    lockedOrUnlockedAmount: bigint;
    burnedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FarmRewardDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): FarmRewardDistributor;
  waitForDeployment(): Promise<this>;

  interface: FarmRewardDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EFC: TypedContractMethod<[], [string], "view">;

  acceptGov: TypedContractMethod<[], [void], "nonpayable">;

  changeGov: TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;

  collectBatch: TypedContractMethod<
    [
      _account: AddressLike,
      _nonceAndLockupPeriod: BigNumberish,
      _packedMarketRewardValues: BigNumberish[],
      _signature: BytesLike,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  collectedReferralRewards: TypedContractMethod<
    [
      referralToken: BigNumberish,
      market: AddressLike,
      rewardType: BigNumberish
    ],
    [bigint],
    "view"
  >;

  collectedRewards: TypedContractMethod<
    [account: AddressLike, market: AddressLike, rewardType: BigNumberish],
    [bigint],
    "view"
  >;

  collectors: TypedContractMethod<[collector: AddressLike], [boolean], "view">;

  distributorV2: TypedContractMethod<[], [string], "view">;

  feeDistributor: TypedContractMethod<[], [string], "view">;

  gov: TypedContractMethod<[], [string], "view">;

  marketIndexer: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  pendingGov: TypedContractMethod<[], [string], "view">;

  setCollector: TypedContractMethod<
    [_collector: AddressLike, _enabled: boolean],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EFC"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptGov"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeGov"
  ): TypedContractMethod<[_newGov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectBatch"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _nonceAndLockupPeriod: BigNumberish,
      _packedMarketRewardValues: BigNumberish[],
      _signature: BytesLike,
      _receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectedReferralRewards"
  ): TypedContractMethod<
    [
      referralToken: BigNumberish,
      market: AddressLike,
      rewardType: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectedRewards"
  ): TypedContractMethod<
    [account: AddressLike, market: AddressLike, rewardType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectors"
  ): TypedContractMethod<[collector: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "distributorV2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketIndexer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingGov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCollector"
  ): TypedContractMethod<
    [_collector: AddressLike, _enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChangeGovStarted"
  ): TypedContractEvent<
    ChangeGovStartedEvent.InputTuple,
    ChangeGovStartedEvent.OutputTuple,
    ChangeGovStartedEvent.OutputObject
  >;
  getEvent(
    key: "CollectorUpdated"
  ): TypedContractEvent<
    CollectorUpdatedEvent.InputTuple,
    CollectorUpdatedEvent.OutputTuple,
    CollectorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovChanged"
  ): TypedContractEvent<
    GovChangedEvent.InputTuple,
    GovChangedEvent.OutputTuple,
    GovChangedEvent.OutputObject
  >;
  getEvent(
    key: "RewardCollected"
  ): TypedContractEvent<
    RewardCollectedEvent.InputTuple,
    RewardCollectedEvent.OutputTuple,
    RewardCollectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardLockedAndBurned"
  ): TypedContractEvent<
    RewardLockedAndBurnedEvent.InputTuple,
    RewardLockedAndBurnedEvent.OutputTuple,
    RewardLockedAndBurnedEvent.OutputObject
  >;

  filters: {
    "ChangeGovStarted(address,address)": TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;
    ChangeGovStarted: TypedContractEvent<
      ChangeGovStartedEvent.InputTuple,
      ChangeGovStartedEvent.OutputTuple,
      ChangeGovStartedEvent.OutputObject
    >;

    "CollectorUpdated(address,bool)": TypedContractEvent<
      CollectorUpdatedEvent.InputTuple,
      CollectorUpdatedEvent.OutputTuple,
      CollectorUpdatedEvent.OutputObject
    >;
    CollectorUpdated: TypedContractEvent<
      CollectorUpdatedEvent.InputTuple,
      CollectorUpdatedEvent.OutputTuple,
      CollectorUpdatedEvent.OutputObject
    >;

    "GovChanged(address,address)": TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;
    GovChanged: TypedContractEvent<
      GovChangedEvent.InputTuple,
      GovChangedEvent.OutputTuple,
      GovChangedEvent.OutputObject
    >;

    "RewardCollected(address,address,uint16,uint16,uint32,address,uint200)": TypedContractEvent<
      RewardCollectedEvent.InputTuple,
      RewardCollectedEvent.OutputTuple,
      RewardCollectedEvent.OutputObject
    >;
    RewardCollected: TypedContractEvent<
      RewardCollectedEvent.InputTuple,
      RewardCollectedEvent.OutputTuple,
      RewardCollectedEvent.OutputObject
    >;

    "RewardLockedAndBurned(address,uint16,address,uint256,uint256)": TypedContractEvent<
      RewardLockedAndBurnedEvent.InputTuple,
      RewardLockedAndBurnedEvent.OutputTuple,
      RewardLockedAndBurnedEvent.OutputObject
    >;
    RewardLockedAndBurned: TypedContractEvent<
      RewardLockedAndBurnedEvent.InputTuple,
      RewardLockedAndBurnedEvent.OutputTuple,
      RewardLockedAndBurnedEvent.OutputObject
    >;
  };
}
