/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Create2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Create2__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "Configurable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Configurable__factory>;
    getContractFactory(
      name: "IConfigurable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfigurable__factory>;
    getContractFactory(
      name: "IMarketDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketDescriptor__factory>;
    getContractFactory(
      name: "IMarketErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketErrors__factory>;
    getContractFactory(
      name: "IMarketLiquidityPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketLiquidityPosition__factory>;
    getContractFactory(
      name: "IMarketManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketManager__factory>;
    getContractFactory(
      name: "IMarketPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketPosition__factory>;
    getContractFactory(
      name: "MarketDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketDescriptor__factory>;
    getContractFactory(
      name: "MarketDescriptorDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketDescriptorDeployer__factory>;
    getContractFactory(
      name: "MarketIndexer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketIndexer__factory>;
    getContractFactory(
      name: "MarketManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketManager__factory>;
    getContractFactory(
      name: "MarketManagerStates",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketManagerStates__factory>;
    getContractFactory(
      name: "FarmRewardDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmRewardDistributor__factory>;
    getContractFactory(
      name: "Governable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: "IEFC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEFC__factory>;
    getContractFactory(
      name: "IFarmRewardDistributorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFarmRewardDistributorV2__factory>;
    getContractFactory(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributor__factory>;
    getContractFactory(
      name: "IMultiMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiMinter__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "ConfigurableUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfigurableUtil__factory>;
    getContractFactory(
      name: "FundingRateUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateUtil__factory>;
    getContractFactory(
      name: "LiquidityPositionUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPositionUtil__factory>;
    getContractFactory(
      name: "MarketUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketUtil__factory>;
    getContractFactory(
      name: "PositionUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionUtil__factory>;
    getContractFactory(
      name: "ExecutorAssistant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExecutorAssistant__factory>;
    getContractFactory(
      name: "IPositionRouterState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouterState__factory>;
    getContractFactory(
      name: "MixedExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MixedExecutor__factory>;
    getContractFactory(
      name: "MixedExecutorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MixedExecutorV2__factory>;
    getContractFactory(
      name: "IChainLinkAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainLinkAggregator__factory>;
    getContractFactory(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeed__factory>;
    getContractFactory(
      name: "IPythAdaptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythAdaptor__factory>;
    getContractFactory(
      name: "IPythPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythPriceFeed__factory>;
    getContractFactory(
      name: "PriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceFeed__factory>;
    getContractFactory(
      name: "PythAdaptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PythAdaptor__factory>;
    getContractFactory(
      name: "PythPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PythPriceFeed__factory>;
    getContractFactory(
      name: "EquationContractsV1RewardCollectorCompatibility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EquationContractsV1RewardCollectorCompatibility__factory>;
    getContractFactory(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidator__factory>;
    getContractFactory(
      name: "IOrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderBook__factory>;
    getContractFactory(
      name: "IPluginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginManager__factory>;
    getContractFactory(
      name: "IPositionRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouter__factory>;
    getContractFactory(
      name: "Liquidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidator__factory>;
    getContractFactory(
      name: "OrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBook__factory>;
    getContractFactory(
      name: "PluginManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PluginManager__factory>;
    getContractFactory(
      name: "PositionRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionRouter__factory>;
    getContractFactory(
      name: "RewardCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCollector__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "ERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Test__factory>;
    getContractFactory(
      name: "FundingRateUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundingRateUtilTest__factory>;
    getContractFactory(
      name: "MarketUtilHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketUtilHarness__factory>;
    getContractFactory(
      name: "MarketUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketUtilTest__factory>;
    getContractFactory(
      name: "MockConfigurable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockConfigurable__factory>;
    getContractFactory(
      name: "MockEFC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockEFC__factory>;
    getContractFactory(
      name: "MockFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFeeDistributor__factory>;
    getContractFactory(
      name: "MockMarketManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMarketManager__factory>;
    getContractFactory(
      name: "MockPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceFeed__factory>;
    getContractFactory(
      name: "GasDrainingMockRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasDrainingMockRouter__factory>;
    getContractFactory(
      name: "MockRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRouter__factory>;
    getContractFactory(
      name: "PositionUtilTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionUtilTest__factory>;
    getContractFactory(
      name: "PriceUtilHarness",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceUtilHarness__factory>;
    getContractFactory(
      name: "PythAdaptorHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PythAdaptorHelper__factory>;
    getContractFactory(
      name: "RevertedFeeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertedFeeReceiver__factory>;
    getContractFactory(
      name: "TickMathTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TickMathTest__factory>;

    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Create2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Create2>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Multicall",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "Configurable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Configurable>;
    getContractAt(
      name: "IConfigurable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfigurable>;
    getContractAt(
      name: "IMarketDescriptor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketDescriptor>;
    getContractAt(
      name: "IMarketErrors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketErrors>;
    getContractAt(
      name: "IMarketLiquidityPosition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketLiquidityPosition>;
    getContractAt(
      name: "IMarketManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketManager>;
    getContractAt(
      name: "IMarketPosition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketPosition>;
    getContractAt(
      name: "MarketDescriptor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketDescriptor>;
    getContractAt(
      name: "MarketDescriptorDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketDescriptorDeployer>;
    getContractAt(
      name: "MarketIndexer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketIndexer>;
    getContractAt(
      name: "MarketManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketManager>;
    getContractAt(
      name: "MarketManagerStates",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketManagerStates>;
    getContractAt(
      name: "FarmRewardDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmRewardDistributor>;
    getContractAt(
      name: "Governable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Governable>;
    getContractAt(
      name: "IEFC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEFC>;
    getContractAt(
      name: "IFarmRewardDistributorV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFarmRewardDistributorV2>;
    getContractAt(
      name: "IFeeDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributor>;
    getContractAt(
      name: "IMultiMinter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiMinter>;
    getContractAt(
      name: "IRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "ConfigurableUtil",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfigurableUtil>;
    getContractAt(
      name: "FundingRateUtil",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateUtil>;
    getContractAt(
      name: "LiquidityPositionUtil",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPositionUtil>;
    getContractAt(
      name: "MarketUtil",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketUtil>;
    getContractAt(
      name: "PositionUtil",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionUtil>;
    getContractAt(
      name: "ExecutorAssistant",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExecutorAssistant>;
    getContractAt(
      name: "IPositionRouterState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouterState>;
    getContractAt(
      name: "MixedExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MixedExecutor>;
    getContractAt(
      name: "MixedExecutorV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MixedExecutorV2>;
    getContractAt(
      name: "IChainLinkAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainLinkAggregator>;
    getContractAt(
      name: "IPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeed>;
    getContractAt(
      name: "IPythAdaptor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythAdaptor>;
    getContractAt(
      name: "IPythPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythPriceFeed>;
    getContractAt(
      name: "PriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceFeed>;
    getContractAt(
      name: "PythAdaptor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PythAdaptor>;
    getContractAt(
      name: "PythPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PythPriceFeed>;
    getContractAt(
      name: "EquationContractsV1RewardCollectorCompatibility",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EquationContractsV1RewardCollectorCompatibility>;
    getContractAt(
      name: "ILiquidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidator>;
    getContractAt(
      name: "IOrderBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderBook>;
    getContractAt(
      name: "IPluginManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginManager>;
    getContractAt(
      name: "IPositionRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouter>;
    getContractAt(
      name: "Liquidator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidator>;
    getContractAt(
      name: "OrderBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBook>;
    getContractAt(
      name: "PluginManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PluginManager>;
    getContractAt(
      name: "PositionRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionRouter>;
    getContractAt(
      name: "RewardCollector",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCollector>;
    getContractAt(
      name: "Router",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "ERC20Test",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Test>;
    getContractAt(
      name: "FundingRateUtilTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FundingRateUtilTest>;
    getContractAt(
      name: "MarketUtilHarness",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketUtilHarness>;
    getContractAt(
      name: "MarketUtilTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketUtilTest>;
    getContractAt(
      name: "MockConfigurable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockConfigurable>;
    getContractAt(
      name: "MockEFC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockEFC>;
    getContractAt(
      name: "MockFeeDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFeeDistributor>;
    getContractAt(
      name: "MockMarketManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMarketManager>;
    getContractAt(
      name: "MockPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceFeed>;
    getContractAt(
      name: "GasDrainingMockRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasDrainingMockRouter>;
    getContractAt(
      name: "MockRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockRouter>;
    getContractAt(
      name: "PositionUtilTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionUtilTest>;
    getContractAt(
      name: "PriceUtilHarness",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceUtilHarness>;
    getContractAt(
      name: "PythAdaptorHelper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PythAdaptorHelper>;
    getContractAt(
      name: "RevertedFeeReceiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertedFeeReceiver>;
    getContractAt(
      name: "TickMathTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TickMathTest>;

    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Create2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Configurable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Configurable>;
    deployContract(
      name: "IConfigurable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConfigurable>;
    deployContract(
      name: "IMarketDescriptor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketDescriptor>;
    deployContract(
      name: "IMarketErrors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketErrors>;
    deployContract(
      name: "IMarketLiquidityPosition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketLiquidityPosition>;
    deployContract(
      name: "IMarketManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketManager>;
    deployContract(
      name: "IMarketPosition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketPosition>;
    deployContract(
      name: "MarketDescriptor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketDescriptor>;
    deployContract(
      name: "MarketDescriptorDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketDescriptorDeployer>;
    deployContract(
      name: "MarketIndexer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketIndexer>;
    deployContract(
      name: "MarketManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManager>;
    deployContract(
      name: "MarketManagerStates",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManagerStates>;
    deployContract(
      name: "FarmRewardDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FarmRewardDistributor>;
    deployContract(
      name: "Governable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governable>;
    deployContract(
      name: "IEFC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEFC>;
    deployContract(
      name: "IFarmRewardDistributorV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFarmRewardDistributorV2>;
    deployContract(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeDistributor>;
    deployContract(
      name: "IMultiMinter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMultiMinter>;
    deployContract(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRouter>;
    deployContract(
      name: "ConfigurableUtil",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigurableUtil>;
    deployContract(
      name: "FundingRateUtil",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingRateUtil>;
    deployContract(
      name: "LiquidityPositionUtil",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityPositionUtil>;
    deployContract(
      name: "MarketUtil",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtil>;
    deployContract(
      name: "PositionUtil",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionUtil>;
    deployContract(
      name: "ExecutorAssistant",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorAssistant>;
    deployContract(
      name: "IPositionRouterState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPositionRouterState>;
    deployContract(
      name: "MixedExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MixedExecutor>;
    deployContract(
      name: "MixedExecutorV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MixedExecutorV2>;
    deployContract(
      name: "IChainLinkAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainLinkAggregator>;
    deployContract(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeed>;
    deployContract(
      name: "IPythAdaptor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythAdaptor>;
    deployContract(
      name: "IPythPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythPriceFeed>;
    deployContract(
      name: "PriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceFeed>;
    deployContract(
      name: "PythAdaptor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythAdaptor>;
    deployContract(
      name: "PythPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythPriceFeed>;
    deployContract(
      name: "EquationContractsV1RewardCollectorCompatibility",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EquationContractsV1RewardCollectorCompatibility>;
    deployContract(
      name: "ILiquidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidator>;
    deployContract(
      name: "IOrderBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderBook>;
    deployContract(
      name: "IPluginManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPluginManager>;
    deployContract(
      name: "IPositionRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPositionRouter>;
    deployContract(
      name: "Liquidator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Liquidator>;
    deployContract(
      name: "OrderBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderBook>;
    deployContract(
      name: "PluginManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PluginManager>;
    deployContract(
      name: "PositionRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionRouter>;
    deployContract(
      name: "RewardCollector",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardCollector>;
    deployContract(
      name: "Router",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "ERC20Test",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Test>;
    deployContract(
      name: "FundingRateUtilTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingRateUtilTest>;
    deployContract(
      name: "MarketUtilHarness",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtilHarness>;
    deployContract(
      name: "MarketUtilTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtilTest>;
    deployContract(
      name: "MockConfigurable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockConfigurable>;
    deployContract(
      name: "MockEFC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockEFC>;
    deployContract(
      name: "MockFeeDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockFeeDistributor>;
    deployContract(
      name: "MockMarketManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockMarketManager>;
    deployContract(
      name: "MockPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockPriceFeed>;
    deployContract(
      name: "GasDrainingMockRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasDrainingMockRouter>;
    deployContract(
      name: "MockRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRouter>;
    deployContract(
      name: "PositionUtilTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionUtilTest>;
    deployContract(
      name: "PriceUtilHarness",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceUtilHarness>;
    deployContract(
      name: "PythAdaptorHelper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythAdaptorHelper>;
    deployContract(
      name: "RevertedFeeReceiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertedFeeReceiver>;
    deployContract(
      name: "TickMathTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TickMathTest>;

    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Create2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Create2>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Multicall",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Multicall>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Configurable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Configurable>;
    deployContract(
      name: "IConfigurable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConfigurable>;
    deployContract(
      name: "IMarketDescriptor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketDescriptor>;
    deployContract(
      name: "IMarketErrors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketErrors>;
    deployContract(
      name: "IMarketLiquidityPosition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketLiquidityPosition>;
    deployContract(
      name: "IMarketManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketManager>;
    deployContract(
      name: "IMarketPosition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMarketPosition>;
    deployContract(
      name: "MarketDescriptor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketDescriptor>;
    deployContract(
      name: "MarketDescriptorDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketDescriptorDeployer>;
    deployContract(
      name: "MarketIndexer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketIndexer>;
    deployContract(
      name: "MarketManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManager>;
    deployContract(
      name: "MarketManagerStates",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketManagerStates>;
    deployContract(
      name: "FarmRewardDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FarmRewardDistributor>;
    deployContract(
      name: "Governable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governable>;
    deployContract(
      name: "IEFC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEFC>;
    deployContract(
      name: "IFarmRewardDistributorV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFarmRewardDistributorV2>;
    deployContract(
      name: "IFeeDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeDistributor>;
    deployContract(
      name: "IMultiMinter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMultiMinter>;
    deployContract(
      name: "IRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRouter>;
    deployContract(
      name: "ConfigurableUtil",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ConfigurableUtil>;
    deployContract(
      name: "FundingRateUtil",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingRateUtil>;
    deployContract(
      name: "LiquidityPositionUtil",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LiquidityPositionUtil>;
    deployContract(
      name: "MarketUtil",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtil>;
    deployContract(
      name: "PositionUtil",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionUtil>;
    deployContract(
      name: "ExecutorAssistant",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExecutorAssistant>;
    deployContract(
      name: "IPositionRouterState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPositionRouterState>;
    deployContract(
      name: "MixedExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MixedExecutor>;
    deployContract(
      name: "MixedExecutorV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MixedExecutorV2>;
    deployContract(
      name: "IChainLinkAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainLinkAggregator>;
    deployContract(
      name: "IPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeed>;
    deployContract(
      name: "IPythAdaptor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythAdaptor>;
    deployContract(
      name: "IPythPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythPriceFeed>;
    deployContract(
      name: "PriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceFeed>;
    deployContract(
      name: "PythAdaptor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythAdaptor>;
    deployContract(
      name: "PythPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythPriceFeed>;
    deployContract(
      name: "EquationContractsV1RewardCollectorCompatibility",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EquationContractsV1RewardCollectorCompatibility>;
    deployContract(
      name: "ILiquidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILiquidator>;
    deployContract(
      name: "IOrderBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOrderBook>;
    deployContract(
      name: "IPluginManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPluginManager>;
    deployContract(
      name: "IPositionRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPositionRouter>;
    deployContract(
      name: "Liquidator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Liquidator>;
    deployContract(
      name: "OrderBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrderBook>;
    deployContract(
      name: "PluginManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PluginManager>;
    deployContract(
      name: "PositionRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionRouter>;
    deployContract(
      name: "RewardCollector",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardCollector>;
    deployContract(
      name: "Router",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Router>;
    deployContract(
      name: "ERC20Test",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Test>;
    deployContract(
      name: "FundingRateUtilTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FundingRateUtilTest>;
    deployContract(
      name: "MarketUtilHarness",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtilHarness>;
    deployContract(
      name: "MarketUtilTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MarketUtilTest>;
    deployContract(
      name: "MockConfigurable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockConfigurable>;
    deployContract(
      name: "MockEFC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockEFC>;
    deployContract(
      name: "MockFeeDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockFeeDistributor>;
    deployContract(
      name: "MockMarketManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockMarketManager>;
    deployContract(
      name: "MockPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockPriceFeed>;
    deployContract(
      name: "GasDrainingMockRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasDrainingMockRouter>;
    deployContract(
      name: "MockRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockRouter>;
    deployContract(
      name: "PositionUtilTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PositionUtilTest>;
    deployContract(
      name: "PriceUtilHarness",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceUtilHarness>;
    deployContract(
      name: "PythAdaptorHelper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PythAdaptorHelper>;
    deployContract(
      name: "RevertedFeeReceiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertedFeeReceiver>;
    deployContract(
      name: "TickMathTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TickMathTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
