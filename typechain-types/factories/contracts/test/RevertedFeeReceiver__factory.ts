/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RevertedFeeReceiver,
  RevertedFeeReceiverInterface,
} from "../../../contracts/test/RevertedFeeReceiver";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523460135760a1908160198239f35b600080fdfe6080806040523615600f57600080fd5b807f08c379a0000000000000000000000000000000000000000000000000000000006064925260206004820152600860248201527f52657665727465640000000000000000000000000000000000000000000000006044820152fdfea2646970667358221220916bc807f0d31946083b6c847a6dfc73d80e1aceb9028481c4e756c014f639b164736f6c63430008170033";

type RevertedFeeReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertedFeeReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertedFeeReceiver__factory extends ContractFactory {
  constructor(...args: RevertedFeeReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RevertedFeeReceiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RevertedFeeReceiver__factory {
    return super.connect(runner) as RevertedFeeReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertedFeeReceiverInterface {
    return new Interface(_abi) as RevertedFeeReceiverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RevertedFeeReceiver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RevertedFeeReceiver;
  }
}
