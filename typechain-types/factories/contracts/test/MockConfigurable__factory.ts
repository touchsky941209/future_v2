/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockConfigurable,
  MockConfigurableInterface,
} from "../../../contracts/test/MockConfigurable";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_usd",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Forbidden",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "protocolFeeRate",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "referralReturnFeeRate",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "referralParentReturnFeeRate",
        type: "uint32",
      },
    ],
    name: "InvalidFeeRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "interestRate",
        type: "uint32",
      },
    ],
    name: "InvalidInterestRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "invalidLiquidationFeeRatePerLiquidityPosition",
        type: "uint32",
      },
    ],
    name: "InvalidLiquidationFeeRatePerLiquidityPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "liquidationFeeRatePerPosition",
        type: "uint32",
      },
    ],
    name: "InvalidLiquidationFeeRatePerPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "liquidationVertexIndex",
        type: "uint8",
      },
    ],
    name: "InvalidLiquidationVertexIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxFundingRate",
        type: "uint32",
      },
    ],
    name: "InvalidMaxFundingRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxLeveragePerLiquidityPosition",
        type: "uint32",
      },
    ],
    name: "InvalidMaxLeveragePerLiquidityPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxLeveragePerPosition",
        type: "uint32",
      },
    ],
    name: "InvalidMaxLeveragePerPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "maxPositionLiquidity",
        type: "uint128",
      },
    ],
    name: "InvalidMaxPositionLiquidity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxPositionValueRate",
        type: "uint32",
      },
    ],
    name: "InvalidMaxPositionValueRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "maxPriceImpactLiquidity",
        type: "uint128",
      },
    ],
    name: "InvalidMaxPriceImpactLiquidity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "maxSizeRatePerPosition",
        type: "uint32",
      },
    ],
    name: "InvalidMaxSizeRatePerPosition",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "protocolFeeRate",
        type: "uint32",
      },
    ],
    name: "InvalidProtocolFeeRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "referralDiscountRate",
        type: "uint32",
      },
    ],
    name: "InvalidReferralDiscountRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "referralParentReturnFeeRate",
        type: "uint32",
      },
    ],
    name: "InvalidReferralParentReturnFeeRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "referralReturnFeeRate",
        type: "uint32",
      },
    ],
    name: "InvalidReferralReturnFeeRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "tradingFeeRate",
        type: "uint32",
      },
    ],
    name: "InvalidTradingFeeRate",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
    ],
    name: "InvalidVertex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredLength",
        type: "uint256",
      },
    ],
    name: "InvalidVerticesLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
    ],
    name: "MarketAlreadyEnabled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
    ],
    name: "MarketNotEnabled",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "ChangeGovStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousGov",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newGov",
        type: "address",
      },
    ],
    name: "GovChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "minMarginPerLiquidityPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "minMarginPerPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maxPositionLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "maxPositionValueRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxSizeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "liquidationExecutionFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "interestRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxFundingRate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketBaseConfig",
        name: "newCfg",
        type: "tuple",
      },
    ],
    name: "MarketBaseConfigChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "minMarginPerLiquidityPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "minMarginPerPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maxPositionLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "maxPositionValueRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxSizeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "liquidationExecutionFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "interestRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxFundingRate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketBaseConfig",
        name: "baseCfg",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "tradingFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralParentReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralDiscountRate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketFeeRateConfig",
        name: "feeRateCfg",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "priceCfg",
        type: "tuple",
      },
    ],
    name: "MarketConfigEnabled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "tradingFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralParentReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralDiscountRate",
            type: "uint32",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketFeeRateConfig",
        name: "newCfg",
        type: "tuple",
      },
    ],
    name: "MarketFeeRateConfigChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        indexed: false,
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "newCfg",
        type: "tuple",
      },
    ],
    name: "MarketPriceConfigChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "usd",
        type: "address",
      },
    ],
    name: "USDEnabled",
    type: "event",
  },
  {
    inputs: [],
    name: "USD",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "afterMarketBaseConfigChangedCalled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "afterMarketEnabledCalled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "afterMarketPriceConfigChangedCalled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGov",
        type: "address",
      },
    ],
    name: "changeGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint64",
                name: "minMarginPerLiquidityPosition",
                type: "uint64",
              },
              {
                internalType: "uint32",
                name: "maxLeveragePerLiquidityPosition",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "liquidationFeeRatePerLiquidityPosition",
                type: "uint32",
              },
              {
                internalType: "uint64",
                name: "minMarginPerPosition",
                type: "uint64",
              },
              {
                internalType: "uint32",
                name: "maxLeveragePerPosition",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "liquidationFeeRatePerPosition",
                type: "uint32",
              },
              {
                internalType: "uint128",
                name: "maxPositionLiquidity",
                type: "uint128",
              },
              {
                internalType: "uint32",
                name: "maxPositionValueRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "maxSizeRatePerPosition",
                type: "uint32",
              },
              {
                internalType: "uint64",
                name: "liquidationExecutionFee",
                type: "uint64",
              },
              {
                internalType: "uint32",
                name: "interestRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "maxFundingRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.MarketBaseConfig",
            name: "baseConfig",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "tradingFeeRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "protocolFeeRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "referralReturnFeeRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "referralParentReturnFeeRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "referralDiscountRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.MarketFeeRateConfig",
            name: "feeRateConfig",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "maxPriceImpactLiquidity",
                type: "uint128",
              },
              {
                internalType: "uint8",
                name: "liquidationVertexIndex",
                type: "uint8",
              },
              {
                components: [
                  {
                    internalType: "uint32",
                    name: "balanceRate",
                    type: "uint32",
                  },
                  {
                    internalType: "uint32",
                    name: "premiumRate",
                    type: "uint32",
                  },
                ],
                internalType: "struct IConfigurable.VertexConfig[10]",
                name: "vertices",
                type: "tuple[10]",
              },
            ],
            internalType: "struct IConfigurable.MarketPriceConfig",
            name: "priceConfig",
            type: "tuple",
          },
        ],
        internalType: "struct IConfigurable.MarketConfig",
        name: "_cfg",
        type: "tuple",
      },
    ],
    name: "enableMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
    ],
    name: "isEnabledMarket",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
    ],
    name: "marketBaseConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "minMarginPerLiquidityPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "minMarginPerPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maxPositionLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "maxPositionValueRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxSizeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "liquidationExecutionFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "interestRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxFundingRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketBaseConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
    ],
    name: "marketConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "minMarginPerLiquidityPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "minMarginPerPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maxPositionLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "maxPositionValueRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxSizeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "liquidationExecutionFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "interestRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxFundingRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketBaseConfig",
        name: "baseConfig",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "tradingFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralParentReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralDiscountRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketFeeRateConfig",
        name: "feeRateConfig",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "priceConfig",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
    ],
    name: "marketFeeRateConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "tradingFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralParentReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralDiscountRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketFeeRateConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
    ],
    name: "marketPriceConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_index",
        type: "uint8",
      },
    ],
    name: "marketPriceVertexConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "balanceRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "premiumRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.VertexConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingGov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "minMarginPerLiquidityPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerLiquidityPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "minMarginPerPosition",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "maxLeveragePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "liquidationFeeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint128",
            name: "maxPositionLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "maxPositionValueRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxSizeRatePerPosition",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "liquidationExecutionFee",
            type: "uint64",
          },
          {
            internalType: "uint32",
            name: "interestRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "maxFundingRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketBaseConfig",
        name: "_newCfg",
        type: "tuple",
      },
    ],
    name: "updateMarketBaseConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "tradingFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "protocolFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralParentReturnFeeRate",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "referralDiscountRate",
            type: "uint32",
          },
        ],
        internalType: "struct IConfigurable.MarketFeeRateConfig",
        name: "_newCfg",
        type: "tuple",
      },
    ],
    name: "updateMarketFeeRateConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "_newCfg",
        type: "tuple",
      },
    ],
    name: "updateMarketPriceConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100ac57601f6117ee38819003918201601f19168301916001600160401b038311848410176100b1578084926020946040528339810103126100ac57516001600160a01b039081811681036100ac576000543360018060a01b0319821617600055604051923391167f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac2600080a3600160025560805261172690816100c88239608051816110d30152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081630ddae14b146111485750806312d43a51146110f75780631bf6c21b1461108857806325240810146110355780632d91fbae14610dd957806338e9625914610c675780636056527f14610add57806378023a5014610a9a5780637bc6729b146109c35780638a4aa56e146108f75780638ac242c3146108b757806393f468731461084c578063a962ef1e1461079f578063b36e5fed14610576578063bd3533ff146103a4578063d3ccfac6146102a0578063de8977391461012f5763f0a804c3146100ea57600080fd5b3461012c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012c575060ff6020925460101c1690519015158152f35b80fd5b50903461029c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c5761029a6101e8826101809473ffffffffffffffffffffffffffffffffffffffff610188611227565b826101608551610197816112c5565b82815282602082015282878201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015282610140820152015216815260036020522061133f565b9151809267ffffffffffffffff80825116835260208201519063ffffffff80921660208501528160408401511660408501528060608401511660608501528160808401511660808501528160a08401511660a08501526fffffffffffffffffffffffffffffffff60c08401511660c08501528160e08401511660e08501526101008281850151169085015261012090818401511690840152610140818184015116908401526101608092015116910152565bf35b5080fd5b503461012c576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c576102d9611227565b9083516102e5816112a9565b83815283602082015284519161014080840184811067ffffffffffffffff821117610376578752855b818110610355576102c08861029a61034c8c838c73ffffffffffffffffffffffffffffffffffffffff8d8d848e01521681526003602052200161145a565b915180926114ea565b82908851610362816112e2565b60008152600083820152818701520161030e565b6041897f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b50823461029c576102e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c576103de611227565b6102c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126105725761041161166c565b6104196116a5565b73__$a1f2ab01d928b132890dcf6bf514391fc1$__93843b1561056e5773ffffffffffffffffffffffffffffffffffffffff8151927fcbbad83a0000000000000000000000000000000000000000000000000000000084526003858501521660248301526024356fffffffffffffffffffffffffffffffff811680910361056957604483015260443560ff811680910361056957606483015260848201946064956000905b600a8210610533575050908483610304818396955af490811561052a5750610516575b5050620100007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff825416179055600160025580f35b61051f9061124a565b61029c5781836104e1565b513d84823e3d90fd5b83806001928a63ffffffff806105488361155a565b168352610558602080930161155a565b1690820152019801910190966104be565b600080fd5b8380fd5b8280fd5b50823461029c576105007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c576105b0611227565b6104e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610572576105e361166c565b6105eb6116a5565b73__$a1f2ab01d928b132890dcf6bf514391fc1$__93843b1561056e5773ffffffffffffffffffffffffffffffffffffffff8151927fe3fee30a00000000000000000000000000000000000000000000000000000000845260038585015216602483015261065b6044830161156b565b63ffffffff946101c46101a43587811690819003610569578185015235868116809103610569576101e4908185015235868116809103610569576102049081850152358681168091036105695761022490818501523586811680910361056957610244908185015261026490356fffffffffffffffffffffffffffffffff811680910361056957818501523560ff81168091036105695761028490818501526102a484016000905b600a821061076e57505050908483610524818396955af490811561052a575061075a575b505060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055600160025580f35b6107639061124a565b61029c578183610727565b84806001928b61077d8761155a565b16815260208c61078e82890161155a565b169082015201930191019091610703565b50823461029c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c573573ffffffffffffffffffffffffffffffffffffffff808216809203610572576107f86116a5565b817fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001558254167fb9911e2099e372c216862258dc462bb65da46a2c854536c8b1acae619d0d62ed8380a380f35b50903461029c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c5763ffffffff8160209373ffffffffffffffffffffffffffffffffffffffff6108a3611227565b1681526003855220548251921c1615158152f35b503461012c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012c575060ff602092541690519015158152f35b50903461029c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c5761029a61098360038360a09573ffffffffffffffffffffffffffffffffffffffff610951611227565b826080855161095f8161128d565b828152826020820152828782015282606082015201521681528260205220016113ef565b915180926080908163ffffffff91828151168552826020820151166020860152826040820151166040860152826060820151166060860152015116910152565b5091903461057257827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610572576001549173ffffffffffffffffffffffffffffffffffffffff918284163303610a745750507fffffffffffffffffffffffff0000000000000000000000000000000000000000809216600155825491339083161783553391167f3d1e4c3a68fed9f4f8315582b7297cf8fa264bc8e6704287603ba8c72bf05ac28380a380f35b517fee90c468000000000000000000000000000000000000000000000000000000008152fd5b503461012c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012c575060ff6020925460081c1690519015158152f35b509190346105725760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105725780610c5c61029a926104e09573ffffffffffffffffffffffffffffffffffffffff610b38611227565b168152600360205220610c16610b64610b508361133f565b96610b5d600385016113ef565b930161145a565b9351809667ffffffffffffffff80825116835260208201519063ffffffff80921660208501528160408401511660408501528060608401511660608501528160808401511660808501528160a08401511660a08501526fffffffffffffffffffffffffffffffff60c08401511660c08501528160e08401511660e08501526101008281850151169085015261012090818401511690840152610140818184015116908401526101608092015116910152565b805163ffffffff908116610180870152602082015181166101a0870152604082015181166101c0870152606082015181166101e087015260809091015116610200850152565b6102208301906114ea565b5091346105725760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261057257610ca0611227565b9160a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261056e57610cd361166c565b610cdb6116a5565b73__$a1f2ab01d928b132890dcf6bf514391fc1$__92833b15610dd55773ffffffffffffffffffffffffffffffffffffffff9060038351947f74020d250000000000000000000000000000000000000000000000000000000086528501521660248301526024359263ffffffff938481168091036105695760448401526044358481168091036105695760648401526064358481168091036105695760848401526084358481168091036105695760a484015260a435938416809403610569578260e481879693879460c48301525af490811561052a5750610dc1575b50600160025580f35b610dca9061124a565b61012c578038610db8565b8480fd5b50919034610572576101a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261057257610e14611227565b6101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261056e5773ffffffffffffffffffffffffffffffffffffffff90610e5d61166c565b610e656116a5565b16808452600360209081528285206001015483516fffffffffffffffffffffffffffffffff80831693820193845263ffffffff608084811c8216604085015260a09490941c81166060808501919091528352949590949390927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09290610eeb90826112fe565b519020948773__$a1f2ab01d928b132890dcf6bf514391fc1$__91823b1561029c576101c48551809481937fd078727b00000000000000000000000000000000000000000000000000000000835260038d8401526024830152610f506044830161156b565b5af4801561102b57611018575b5060e4359384168403611014576101043583811681036105695761012435938416840361056957610fc7610fd393519485926020840197889160409194936fffffffffffffffffffffffffffffffff606085019616845263ffffffff809216602085015216910152565b039081018352826112fe565b51902003610fe45750600160025580f35b6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff82541617905538610db8565b8680fd5b6110249097919761124a565b9538610f5d565b83513d8a823e3d90fd5b50903461029c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b50903461029c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50903461029c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261029c5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b918491503461012c57837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261012c57611182611227565b6024359360ff851685036105725790826020836111b373ffffffffffffffffffffffffffffffffffffffff956112e2565b8281520152168152600360205283812091600a8410156111fb57846111dc600586860101611435565b61029a825180926020908163ffffffff91828151168552015116910152565b9060326024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361056957565b67ffffffffffffffff811161125e57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761125e57604052565b6060810190811067ffffffffffffffff82111761125e57604052565b610180810190811067ffffffffffffffff82111761125e57604052565b6040810190811067ffffffffffffffff82111761125e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761125e57604052565b9060405161134c816112c5565b6101608193600281549167ffffffffffffffff92838116865263ffffffff93848260401c166020880152848260601c1660408801528160801c166060870152838160c01c16608087015260e01c60a086015260018101546fffffffffffffffffffffffffffffffff811660c0870152838160801c1660e0870152838160a01c1661010087015260c01c610120860152015481811661014085015260201c16910152565b906040516113fc8161128d565b608081935463ffffffff908181168452818160201c166020850152818160401c166040850152818160601c166060850152821c16910152565b90604051611442816112e2565b602081935463ffffffff908181168452821c16910152565b9060405191611468836112a9565b828154916fffffffffffffffffffffffffffffffff8316825260ff60209360801c16602083015260019060405193610140850185811067ffffffffffffffff82111761125e57604052600190910190600090855b600a83106114cf57505050505060400152565b848281926114dc87611435565b8152019401920191926114bc565b80516fffffffffffffffffffffffffffffffff16825260208082015160ff168184015260409182015192909160009181015b600a831061152b575050505050565b83828261154e60019489516020908163ffffffff91828151168552015116910152565b0195019201919361151c565b359063ffffffff8216820361056957565b6024359067ffffffffffffffff918281168091036105695781526044359163ffffffff9283811680910361056957602083015260643583811680910361056957604083015260843581811680910361056957606083015260a43583811680910361056957608083015260c4358381168091036105695760a083015260e4356fffffffffffffffffffffffffffffffff81168091036105695760c0830152610104358381168091036105695760e083015261012435838116809103610569576101008301526101443590811680910361056957610120820152610164358281168091036105695761014082015261018435918216809203610569576101600152565b600280541461167b5760028055565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b73ffffffffffffffffffffffffffffffffffffffff6000541633036116c657565b60046040517fee90c468000000000000000000000000000000000000000000000000000000008152fdfea26469706673582212209b2a5810f103954e8d69443a6823ea0b1dedd4b54266a6def17cc610e95f739f64736f6c63430008170033";

type MockConfigurableConstructorParams =
  | [linkLibraryAddresses: MockConfigurableLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConfigurableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MockConfigurable__factory extends ContractFactory {
  constructor(...args: MockConfigurableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MockConfigurable__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MockConfigurableLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$a1f2ab01d928b132890dcf6bf514391fc1\\$__", "g"),
      linkLibraryAddresses[
        "contracts/libraries/ConfigurableUtil.sol:ConfigurableUtil"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    _usd: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_usd, overrides || {});
  }
  override deploy(
    _usd: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_usd, overrides || {}) as Promise<
      MockConfigurable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockConfigurable__factory {
    return super.connect(runner) as MockConfigurable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockConfigurableInterface {
    return new Interface(_abi) as MockConfigurableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockConfigurable {
    return new Contract(address, _abi, runner) as unknown as MockConfigurable;
  }
}

export interface MockConfigurableLibraryAddresses {
  ["contracts/libraries/ConfigurableUtil.sol:ConfigurableUtil"]: string;
}
