/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MarketUtilHarness,
  MarketUtilHarnessInterface,
} from "../../../contracts/test/MarketUtilHarness";

const _abi = [
  {
    inputs: [],
    name: "MathOverflowedMulDiv",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "bits",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "SafeCastOverflowedUintDowncast",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "SafeCastOverflowedUintToInt",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "previousSPPriceX96",
        type: "uint160",
      },
    ],
    name: "PreviousSPPriceInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "index",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "sizeAfter",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "premiumRateAfterX96",
        type: "uint128",
      },
    ],
    name: "PriceVertexChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IMarketDescriptor",
        name: "market",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "unrealizedPnLGrowthAfterX64",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "previousSPPriceAfterX96",
        type: "uint160",
      },
    ],
    name: "SettlementPointReached",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "maxPriceImpactLiquidity",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "liquidationVertexIndex",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "balanceRate",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "premiumRate",
                type: "uint32",
              },
            ],
            internalType: "struct IConfigurable.VertexConfig[10]",
            name: "vertices",
            type: "tuple[10]",
          },
        ],
        internalType: "struct IConfigurable.MarketPriceConfig",
        name: "_cfg",
        type: "tuple",
      },
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "_indexPriceX96",
        type: "uint160",
      },
    ],
    name: "changePriceVertices",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPriceFeed",
        name: "_priceFeed",
        type: "address",
      },
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
    ],
    name: "chooseDecreaseIndexPriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPriceFeed",
        name: "_priceFeed",
        type: "address",
      },
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "Side",
        name: "_side",
        type: "uint8",
      },
    ],
    name: "chooseIndexPriceX96",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_liquidityDelta",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "decreaseLiquidationFundPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "globalLiquidationFund",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "liquidationFund",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
        ],
        internalType: "struct IMarketManager.GlobalLiquidationFund",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "globalLiquidityPosition",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "netSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liquidationBufferNetSize",
            type: "uint128",
          },
          {
            internalType: "uint160",
            name: "previousSPPriceX96",
            type: "uint160",
          },
          {
            internalType: "Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "int256",
            name: "unrealizedPnLGrowthX64",
            type: "int256",
          },
        ],
        internalType: "struct IMarketLiquidityPosition.GlobalLiquidityPosition",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_liquidityDelta",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "govUseLiquidationFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "_liquidityDelta",
        type: "uint128",
      },
    ],
    name: "increaseLiquidationFundPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
      {
        internalType: "uint160",
        name: "_indexPriceX96",
        type: "uint160",
      },
    ],
    name: "initializePreviousSPPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "liquidationFundPositions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceConfig",
    outputs: [
      {
        internalType: "uint128",
        name: "maxPriceImpactLiquidity",
        type: "uint128",
      },
      {
        internalType: "uint8",
        name: "liquidationVertexIndex",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceState",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "premiumRateX96",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "pendingVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "currentVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint160",
            name: "basisIndexPriceX96",
            type: "uint160",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "size",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "premiumRateX96",
                type: "uint128",
              },
            ],
            internalType: "struct IMarketManager.PriceVertex[10]",
            name: "priceVertices",
            type: "tuple[10]",
          },
          {
            internalType: "uint128[10]",
            name: "liquidationBufferNetSizes",
            type: "uint128[10]",
          },
        ],
        internalType: "struct IMarketManager.PriceState",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "netSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liquidationBufferNetSize",
            type: "uint128",
          },
          {
            internalType: "uint160",
            name: "previousSPPriceX96",
            type: "uint160",
          },
          {
            internalType: "Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "int256",
            name: "unrealizedPnLGrowthX64",
            type: "int256",
          },
        ],
        internalType: "struct IMarketLiquidityPosition.GlobalLiquidityPosition",
        name: "_value",
        type: "tuple",
      },
    ],
    name: "setGlobalLiquidityPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_value",
        type: "int256",
      },
    ],
    name: "setLiquidationFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "premiumRateX96",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "pendingVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "currentVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint160",
            name: "basisIndexPriceX96",
            type: "uint160",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "size",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "premiumRateX96",
                type: "uint128",
              },
            ],
            internalType: "struct IMarketManager.PriceVertex[10]",
            name: "priceVertices",
            type: "tuple[10]",
          },
          {
            internalType: "uint128[10]",
            name: "liquidationBufferNetSizes",
            type: "uint128[10]",
          },
        ],
        internalType: "struct IMarketManager.PriceState",
        name: "_value",
        type: "tuple",
      },
    ],
    name: "setPriceState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPriceFeed",
        name: "_priceFeed",
        type: "address",
      },
      {
        internalType: "contract IMarketDescriptor",
        name: "_market",
        type: "address",
      },
    ],
    name: "settleLiquidityUnrealizedPnL",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "premiumRateX96",
            type: "uint128",
          },
          {
            internalType: "uint8",
            name: "pendingVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "currentVertexIndex",
            type: "uint8",
          },
          {
            internalType: "uint160",
            name: "basisIndexPriceX96",
            type: "uint160",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "size",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "premiumRateX96",
                type: "uint128",
              },
            ],
            internalType: "struct IMarketManager.PriceVertex[10]",
            name: "priceVertices",
            type: "tuple[10]",
          },
          {
            internalType: "uint128[10]",
            name: "liquidationBufferNetSizes",
            type: "uint128[10]",
          },
        ],
        internalType: "struct IMarketManager.PriceState",
        name: "priceState",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "usdBalance",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "protocolFee",
        type: "uint128",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "netSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liquidationBufferNetSize",
            type: "uint128",
          },
          {
            internalType: "uint160",
            name: "previousSPPriceX96",
            type: "uint160",
          },
          {
            internalType: "Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "int256",
            name: "unrealizedPnLGrowthX64",
            type: "int256",
          },
        ],
        internalType: "struct IMarketLiquidityPosition.GlobalLiquidityPosition",
        name: "globalLiquidityPosition",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "longSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "shortSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "maxSize",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "maxSizePerPosition",
            type: "uint128",
          },
          {
            internalType: "int192",
            name: "longFundingRateGrowthX96",
            type: "int192",
          },
          {
            internalType: "int192",
            name: "shortFundingRateGrowthX96",
            type: "int192",
          },
        ],
        internalType: "struct IMarketPosition.GlobalPosition",
        name: "globalPosition",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int192",
            name: "longFundingRateGrowthX96",
            type: "int192",
          },
          {
            internalType: "int192",
            name: "shortFundingRateGrowthX96",
            type: "int192",
          },
        ],
        internalType: "struct IMarketPosition.PreviousGlobalFundingRate",
        name: "previousGlobalFundingRate",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "lastAdjustFundingRateTime",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "sampleCount",
            type: "uint16",
          },
          {
            internalType: "int176",
            name: "cumulativePremiumRateX96",
            type: "int176",
          },
        ],
        internalType: "struct IMarketPosition.GlobalFundingRateSample",
        name: "globalFundingRateSample",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "liquidationFund",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
        ],
        internalType: "struct IMarketManager.GlobalLiquidationFund",
        name: "globalLiquidationFund",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657611ea3908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c9081631783abf314611332575080631f117f4b146112f957806327dc0a4514610da557806334a7608a14610d4c57806350c4f1ee14610c8a5780635dc9747114610c1d5780636409aa7b14610abd57806367431bd0146109bc5780637d0c7327146108d35780638509aa0114610693578063a85fc2a9146105bf578063b4f7c4a614610573578063b9578bc914610463578063be4ea3621461044f578063c19d93fb14610185578063d642698f146101225763f7ba5bf8146100dc57600080fd5b3461011f5760206101016100fb6100f236611556565b92909192611d5e565b91611c18565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b80fd5b503461011f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f57604060209173ffffffffffffffffffffffffffffffffffffffff610174611426565b168152602283522054604051908152f35b503461011f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f576101bc611698565b601154906101c8611792565b604051926101d5846115dc565b6018546fffffffffffffffffffffffffffffffff8116855260801c60208501526019546fffffffffffffffffffffffffffffffff8116604086015260801c6060850152601a5460170b6080850152601b5460170b60a08501526040519361023b856115c0565b601c5460170b8552601d5460170b60208601526040516060810181811067ffffffffffffffff821117610420576106e09660a060409461034560209889958852601e5467ffffffffffffffff8116885261ffff818a1c168789015260501d60150b888801528751986102ac8a6115c0565b86548a52602154878b01526102c38951809d61146c565b6fffffffffffffffffffffffffffffffff8181166104408e0152608091821c6104608e0152825181166104808e0152602083015181166104a08e0152604083015173ffffffffffffffffffffffffffffffffffffffff166104c08e0152606083015160ff166104e08e015290820151166105008c015260a001516105208b0152565b6fffffffffffffffffffffffffffffffff8151166105408a01526fffffffffffffffffffffffffffffffff84820151166105608a01526fffffffffffffffffffffffffffffffff86820151166105808a01526fffffffffffffffffffffffffffffffff6060820151166105a08a0152608081015160170b6105c08a0152015160170b6105e0880152805160170b610600880152015160170b61062086015267ffffffffffffffff81511661064086015261ffff8482015116610660860152015160150b61068084015280516106a084015201516106c0820152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b503461011f5760206101016100fb36611556565b503461011f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f5761049b611426565b6024356fffffffffffffffffffffffffffffffff811680910361056e576044359173ffffffffffffffffffffffffffffffffffffffff80841680940361056e57849373__$6633ebe8291297d9afa6dd52cba1e90df9$__92833b1561056a57859360849260405196879586947f11b8599d000000000000000000000000000000000000000000000000000000008652886004870152166024850152604484015260648301525af4801561055f5761054f5750f35b610558906115f8565b61011f5780f35b6040513d84823e3d90fd5b8580fd5b600080fd5b503461011f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f576105bc6105ae611426565b6105b6611449565b906118b8565b80f35b503461011f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f5760a06040516105fc816115dc565b828152826020820152826040820152826060820152826080820152015260c0610623611792565b610691604051809260a080916fffffffffffffffffffffffffffffffff80825116855280602083015116602086015273ffffffffffffffffffffffffffffffffffffffff604083015116604086015260ff606083015116606086015260808201511660808501520151910152565bf35b503461011f576104407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f576fffffffffffffffffffffffffffffffff806106de6117ff565b16907fffffffffffffffffffffffffffffffff000000000000000000000000000000009182600054161760005561075961071661183b565b7fffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff70ff000000000000000000000000000000006000549260801b16911617600055565b60443560ff8116810361056e577fffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffff71ff000000000000000000000000000000000085549260881b1691161783556064359173ffffffffffffffffffffffffffffffffffffffff831680930361056e57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909317835560029084828560845b600a841061085f575050505050610304845b6005811061081a578580f35b849086875b858110610832575081600c01550161080e565b939192906020906108428461181e565b9088808860071b9316831b921b191617920193019086929161081f565b6040818861086d859461181e565b16878654161785556108c56108846020830161181e565b86546fffffffffffffffffffffffffffffffff1660809190911b7fffffffffffffffffffffffffffffffff0000000000000000000000000000000016178655565b0192019201919086906107fc565b503461011f5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f578061090c611426565b610914611449565b61091c611537565b9173__$6633ebe8291297d9afa6dd52cba1e90df9$__803b156109b85784926084916fffffffffffffffffffffffffffffffff60405196879586947f5570b95000000000000000000000000000000000000000000000000000000000865288600487015273ffffffffffffffffffffffffffffffffffffffff80921660248701521660448501521660648301525af4801561055f5761054f5750f35b8480fd5b503461011f5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011f576109f4611426565b816109fd611449565b91610a06611537565b6064359173ffffffffffffffffffffffffffffffffffffffff928381168091036109b85773__$6633ebe8291297d9afa6dd52cba1e90df9$";

type MarketUtilHarnessConstructorParams =
  | [linkLibraryAddresses: MarketUtilHarnessLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketUtilHarnessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MarketUtilHarness__factory extends ContractFactory {
  constructor(...args: MarketUtilHarnessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MarketUtilHarness__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MarketUtilHarnessLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$6633ebe8291297d9afa6dd52cba1e90df9\\$__", "g"),
      linkLibraryAddresses["contracts/libraries/MarketUtil.sol:MarketUtil"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MarketUtilHarness & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MarketUtilHarness__factory {
    return super.connect(runner) as MarketUtilHarness__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketUtilHarnessInterface {
    return new Interface(_abi) as MarketUtilHarnessInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MarketUtilHarness {
    return new Contract(address, _abi, runner) as unknown as MarketUtilHarness;
  }
}

export interface MarketUtilHarnessLibraryAddresses {
  ["contracts/libraries/MarketUtil.sol:MarketUtil"]: string;
}
