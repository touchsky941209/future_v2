/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TickMathTest,
  TickMathTestInterface,
} from "../../../contracts/test/TickMathTest";

const _abi = [
  {
    inputs: [],
    name: "MAX_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610c80908161001c8239f35b600080fdfe6080806040526004908136101561001557600080fd5b600091823560e01c9182634f76c05814610147575081636d2cc304146100fa578163986cfba314610090575063ee8847ff1461005057600080fd5b3461008d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008d5760206040516401000276a38152f35b80fd5b9050346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65735908160020b820361008d5760206100d8836105f7565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b5080fd5b823461008d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261008d57602060405173fffd8963efd1fc6a506488495d951d5263988d268152f35b8390346100f65760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f65773ffffffffffffffffffffffffffffffffffffffff918335838116928382036105f3576401000276a3841015806105d6575b1561057b575077ffffffffffffffffffffffffffffffffffffffff000000009060201b16806fffffffffffffffffffffffffffffffff811160071b9181831c9267ffffffffffffffff841160061b93841c9363ffffffff851160051b94851c9461ffff86118a1b95861c60ff9687821160031b91821c92600f841160021b93841c94600160038711811b96871c11961717171717171791608083101560001461056757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81820182811161053b571c5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80820191821360011661050f578002607f928392828493841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c80029081881c82881c1c80029283891c84891c1c800294858a1c868a1c1c800296878b1c888b1c1c800298898c1c8a8c1c1c80029a8b8d1c8c821c1c8002809d1c8d821c1c8002809e81901c90821c1c80029e8f80911c911c1c800260cd1c6604000000000000169d60cc1c6608000000000000169c60cb1c6610000000000000169b60ca1c6620000000000000169a60c91c6640000000000000169960c81c6680000000000000169860c71c670100000000000000169760c61c670200000000000000169660c51c670400000000000000169560c41c670800000000000000169460c31c671000000000000000169360c21c672000000000000000169260c11c674000000000000000169160c01c678000000000000000169060401b171717171717171717171717171791693627a301d71055774c85928381029381850514901517156104e3577ffffffffffffffffffffffffffffffffffd709b7e5480fba5a50fed5e62ffc55683018381136001166104b75760801d60020b926fdb2df09e81959a81455e260799a0632f908382820192831291129080158216911516176104b7576020955060801d60020b938385036104995750505090505b6040519060020b8152f35b6104a2856105f7565b161190506104b0575061048e565b905061048e565b6024836011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024826011877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6024846011897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60248560118a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b905081607f03607f811161053b571b61027a565b806020877f08c379a00000000000000000000000000000000000000000000000000000000060649452820152600160248201527f52000000000000000000000000000000000000000000000000000000000000006044820152fd5b5073fffd8963efd1fc6a506488495d951d5263988d2684106101aa565b8280fd5b60020b6000811215610c44577f80000000000000000000000000000000000000000000000000000000000000008114610b8e57806000035b620d89e88111610be6576001811615610bbd5770ffffffffffffffffffffffffffffffffff6ffffcb933bd6fad37aa2d162d1a5940015b169160028216610b62575b600491828116610b36575b60088116610b0a575b60108116610ade575b60208116610ab2575b60408116610a86575b608090818116610a5b575b6101008116610a30575b6102008116610a05575b61040081166109da575b61080081166109af575b6110008116610984575b6120008116610959575b614000811661092e575b6180008116610903575b6201000081166108d8575b6202000081166108ae575b620400008116610857575b62080000166107ff575b506000126107a2575b63ffffffff8260201c9216156000146107995760ff60005b16820180921161076b575073ffffffffffffffffffffffffffffffffffffffff1690565b6011907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b60ff6001610747565b9080156107d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff049061072f565b6012827f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b6b048a170391f7dc42444e8fa293919391828102928184041490151715610829571c916000610726565b6011837f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b936d2216e584f5fa1ea926041bedfe989081810291818304149015171561088057811c9361071c565b6011847f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b936e5d6af8dedb81196699c329225ee6049081810291818304149015171561088057811c93610711565b936f09aa508b5b7a84e1c677de54f3e99bc99081810291818304149015171561088057811c93610706565b936f31be135f97d08fd981231505542fcfa69081810291818304149015171561088057811c936106fb565b936f70d869a156d2a1b890bb3df62baf32f79081810291818304149015171561088057811c936106f1565b936fa9f746462d870fdf8a65dc1f90e061e59081810291818304149015171561088057811c936106e7565b936fd097f3bdfd2022b8845ad8f792aa58259081810291818304149015171561088057811c936106dd565b936fe7159475a2c29b7443b29c7fa6e889d99081810291818304149015171561088057811c936106d3565b936ff3392b0822b70005940c7a398e4b70f39081810291818304149015171561088057811c936106c9565b936ff987a7253ac413176f2b074cf7815e549081810291818304149015171561088057811c936106bf565b936ffcbe86c7900a88aedcffc83b479aa3a49081810291818304149015171561088057811c936106b5565b936ffe5dee046a99a2a811c461f1969c30539081810291818304149015171561088057811c936106ab565b926fff2ea16466c96a3843ec78b326b52861908181029181830414901517156108295760801c926106a0565b926fff973b41fa98c081472e6896dfb254c0908181029181830414901517156108295760801c92610697565b926fffcb9843d60f6159c9db58835c926644908181029181830414901517156108295760801c9261068e565b926fffe5caca7e10e4e61c3624eaa0941cd0908181029181830414901517156108295760801c92610685565b926ffff2e50f5f656932ef12357cf3c7fdcc908181029181830414901517156108295760801c9261067c565b916ffff97272373d413259a46990580e213a90818102918183041490151715610b8e5760801c91610671565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b70ffffffffffffffffffffffffffffffffff700100000000000000000000000000000000610666565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f54000000000000000000000000000000000000000000000000000000000000006044820152fd5b8061062f56fea264697066735822122019417b4d91db4cbe8fc2e14a37c29ebc0626d28d26309ce691ba2ca1366b847664736f6c63430008170033";

type TickMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TickMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TickMathTest__factory extends ContractFactory {
  constructor(...args: TickMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TickMathTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TickMathTest__factory {
    return super.connect(runner) as TickMathTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMathTestInterface {
    return new Interface(_abi) as TickMathTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TickMathTest {
    return new Contract(address, _abi, runner) as unknown as TickMathTest;
  }
}
