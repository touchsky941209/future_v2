/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPythAdaptor,
  IPythAdaptorInterface,
} from "../../../../contracts/oracle/interfaces/IPythAdaptor";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "asset",
        type: "bytes32",
      },
    ],
    name: "AssetIndexAlreadyAssigned",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "InvalidAssetIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "asset",
        type: "bytes32",
      },
    ],
    name: "PriceDataNotExist",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "asset",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AssetIndexAssigned",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "encodedVaas",
        type: "bytes32",
      },
    ],
    name: "LogVaas",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "assets",
        type: "bytes32[]",
      },
    ],
    name: "assignAssetsIndexes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "toClear",
        type: "bytes32[]",
      },
    ],
    name: "clearPrices",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "getPriceUnsafe",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64",
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64",
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32",
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256",
          },
        ],
        internalType: "struct IPythAdaptor.PythStructsPrice",
        name: "price",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isUpdater",
    outputs: [
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "setUpdater",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "PackedValue[]",
        name: "prices",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "minPublishTime",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "encodedVaas",
        type: "bytes32",
      },
    ],
    name: "updatePriceFeeds",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "affectedAssetIds",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IPythAdaptor__factory {
  static readonly abi = _abi;
  static createInterface(): IPythAdaptorInterface {
    return new Interface(_abi) as IPythAdaptorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPythAdaptor {
    return new Contract(address, _abi, runner) as unknown as IPythAdaptor;
  }
}
