/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMarketErrors,
  IMarketErrorsInterface,
} from "../../../../contracts/core/interfaces/IMarketErrors";

const _abi = [
  {
    inputs: [],
    name: "CallerNotLiquidator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredAmount",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientGlobalLiquidity",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "requiredRiskBufferFund",
        type: "uint128",
      },
    ],
    name: "InsufficientLiquidationFund",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "requiredLiquidity",
        type: "uint128",
      },
    ],
    name: "InsufficientLiquidityToDecrease",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientMargin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "size",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "requiredSize",
        type: "uint128",
      },
    ],
    name: "InsufficientSizeToDecrease",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredCaller",
        type: "address",
      },
    ],
    name: "InvalidCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLiquidityToOpen",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "tradePriceX96TimesSizeTotal",
        type: "int256",
      },
    ],
    name: "InvalidTradePrice",
    type: "error",
  },
  {
    inputs: [],
    name: "LastLiquidityPositionCannotBeClosed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "margin",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "maxLeverage",
        type: "uint32",
      },
    ],
    name: "LeverageTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidationFundLoss",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredAccount",
        type: "address",
      },
    ],
    name: "LiquidityPositionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unrealizedPnL",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "MarginRateTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "unrealizedPnL",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "MarginRateTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPremiumRateExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requiredAccount",
        type: "address",
      },
      {
        internalType: "Side",
        name: "requiredSide",
        type: "uint8",
      },
    ],
    name: "PositionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "RiskRateTooHigh",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "margin",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "maintenanceMargin",
        type: "uint256",
      },
    ],
    name: "RiskRateTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "requiredSize",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "maxSize",
        type: "uint128",
      },
    ],
    name: "SizeExceedsMaxSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "requiredSize",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "maxSizePerPosition",
        type: "uint128",
      },
    ],
    name: "SizeExceedsMaxSizePerPosition",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroSizeDelta",
    type: "error",
  },
] as const;

export class IMarketErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IMarketErrorsInterface {
    return new Interface(_abi) as IMarketErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMarketErrors {
    return new Contract(address, _abi, runner) as unknown as IMarketErrors;
  }
}
