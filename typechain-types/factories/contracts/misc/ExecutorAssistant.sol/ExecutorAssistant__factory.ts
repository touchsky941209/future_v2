/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ExecutorAssistant,
  ExecutorAssistantInterface,
} from "../../../../contracts/misc/ExecutorAssistant.sol/ExecutorAssistant";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPositionRouterState",
        name: "_positionRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint128",
        name: "_max",
        type: "uint128",
      },
    ],
    name: "calculateNextMulticall",
    outputs: [
      {
        internalType: "contract IMarketDescriptor[]",
        name: "markets",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "index",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "indexNext",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "indexEnd",
            type: "uint128",
          },
        ],
        internalType: "struct ExecutorAssistant.IndexPerOperation[4]",
        name: "indexPerOperations",
        type: "tuple[4]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionRouter",
    outputs: [
      {
        internalType: "contract IPositionRouterState",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007057601f61141f38819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051611393908161008c823960805181818160c30152610c990152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600091823560e01c806361ef161f14610c535763b6e256d31461003757600080fd5b34610c4f57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c4b5781359161007483610cc5565b61007c610e47565b946100a66100a161008c86610ee1565b6fffffffffffffffffffffffffffffffff1690565b610f31565b93819587519373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016908651957f27e39a8000000000000000000000000000000000000000000000000000000000875283878381865afa9687156106af578697610c2c575b508751967f5d3f5a7400000000000000000000000000000000000000000000000000000000885284888481875afa9788156106af578798610c09575b506101959061017f868401998a906fffffffffffffffffffffffffffffffff169052565b6fffffffffffffffffffffffffffffffff168252565b80516fffffffffffffffffffffffffffffffff16966101c761008c82516fffffffffffffffffffffffffffffffff1690565b976fffffffffffffffffffffffffffffffff9889821603610aa2575b505050828a015187517f0d8e0a8b00000000000000000000000000000000000000000000000000000000815284818481875afa9081156106af578791610a85575b508851907f94925eea00000000000000000000000000000000000000000000000000000000825285828581885afa9182156106af578892610a62575b5061029a906102848785019384906fffffffffffffffffffffffffffffffff169052565b6fffffffffffffffffffffffffffffffff168352565b81516fffffffffffffffffffffffffffffffff166102cb61008c83516fffffffffffffffffffffffffffffffff1690565b898216036108fb575b505050868a015187517f5d585edc00000000000000000000000000000000000000000000000000000000815284818481875afa9081156106af5787916108de575b508851907fbb11d2d000000000000000000000000000000000000000000000000000000000825285828581885afa9182156106af5788926108bb575b50610375906102848785019384906fffffffffffffffffffffffffffffffff169052565b81516fffffffffffffffffffffffffffffffff166103a661008c83516fffffffffffffffffffffffffffffffff1690565b89821603610726575b50505060608a0151938751907f27d95c5800000000000000000000000000000000000000000000000000000000825284828481875afa9182156106af578792610707575b508851917fe59e4d7000000000000000000000000000000000000000000000000000000000835285838581885afa9283156106af5788936106d4575b50610469906104538789019485906fffffffffffffffffffffffffffffffff169052565b6fffffffffffffffffffffffffffffffff168752565b85516fffffffffffffffffffffffffffffffff1661049a61008c84516fffffffffffffffffffffffffffffffff1690565b898216036104c8575b508b8a6104c48b6104b58f845161133e565b83510383525192839283610ce4565b0390f35b61053a9289806105029b9e999c9697989a9d9b6104eb61050a9661008c96610fb1565b93516fffffffffffffffffffffffffffffffff1690565b16911661134b565b6fffffffffffffffffffffffffffffffff16828901908152975b516fffffffffffffffffffffffffffffffff1690565b61055761008c89516fffffffffffffffffffffffffffffffff1690565b8a821610156106b4578151907fdef66c4e000000000000000000000000000000000000000000000000000000008252610140918281806105b2858983019190916fffffffffffffffffffffffffffffffff6020820193169052565b0381895afa9283156106af578c938a928a928e92610682575b50506106076105ee825173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b610618575b5050506001011661053a565b9261067561055795939961065a61064a60019561008c98015173ffffffffffffffffffffffffffffffffffffffff1690565b91610654816110cd565b9c6110fa565b9073ffffffffffffffffffffffffffffffffffffffff169052565b928a92945089915061060c565b6106a19250803d106106a8575b6106998183610dbf565b81019061128e565b38806105cb565b503d61068f565b610fa5565b509550505090506104b59194506104c493509392388080808080806104a3565b6104699193506106f990873d8911610700575b6106f18183610dbf565b810190610f8d565b929061042f565b503d6106e7565b61071f919250853d8711610700576106f18183610dbf565b90386103f3565b61008c610767928a809e99959c9697989a9d9b6105026104eb8861074997610fb1565b6fffffffffffffffffffffffffffffffff16838a0190815298610524565b61078461008c8a516fffffffffffffffffffffffffffffffff1690565b8b821610156108a8578251907f26624a41000000000000000000000000000000000000000000000000000000008252610120918281806107df858a83019190916fffffffffffffffffffffffffffffffff6020820193169052565b03818a5afa9283156106af578d938b928b928f9261087b575b505061081b6105ee825173ffffffffffffffffffffffffffffffffffffffff1690565b61082c575b50505060010116610767565b9261086e61078495939a61065a61085e60019561008c98015173ffffffffffffffffffffffffffffffffffffffff1690565b91610868816110cd565b9d6110fa565b928b9294508a9150610820565b61089a9250803d106108a1575b6108928183610dbf565b8101906111f0565b38806107f8565b503d610888565b50939895979492919096503880806103af565b6103759192506108d790873d8911610700576106f18183610dbf565b9190610351565b6108f59150853d8711610700576106f18183610dbf565b38610315565b61008c61091e928a809e99959c9697989a9d9b6105026104eb8861074997610fb1565b61093b61008c8a516fffffffffffffffffffffffffffffffff1690565b8b82161015610a4f578251907fa017dd6d00000000000000000000000000000000000000000000000000000000825261012091828180610996858a83019190916fffffffffffffffffffffffffffffffff6020820193169052565b03818a5afa9283156106af578d938b928b928f92610a22575b50506109d26105ee825173ffffffffffffffffffffffffffffffffffffffff1690565b6109e3575b5050506001011661091e565b92610a1561093b95939a61065a61085e60019561008c98015173ffffffffffffffffffffffffffffffffffffffff1690565b928b9294508a91506109d7565b610a419250803d10610a48575b610a398183610dbf565b81019061113d565b38806109af565b503d610a2f565b50939895979492919096503880806102d4565b61029a919250610a7e90873d8911610700576106f18183610dbf565b9190610260565b610a9c9150853d8711610700576106f18183610dbf565b38610224565b61008c610ac5928a809e99959c9697989a9d9b6105026104eb8861074997610fb1565b610ae261008c8a516fffffffffffffffffffffffffffffffff1690565b8b82161015610bf6578251907f6dca05d400000000000000000000000000000000000000000000000000000000825261010091828180610b3d858a83019190916fffffffffffffffffffffffffffffffff6020820193169052565b03818a5afa9283156106af578d938b928b928f92610bc9575b5050610b796105ee825173ffffffffffffffffffffffffffffffffffffffff1690565b610b8a575b50505060010116610ac5565b92610bbc610ae295939a61065a61085e60019561008c98015173ffffffffffffffffffffffffffffffffffffffff1690565b928b9294508a9150610b7e565b610be89250803d10610bef575b610be08183610dbf565b810190611024565b3880610b56565b503d610bd6565b50939895979492919096503880806101e3565b610195919850610c2590863d8811610700576106f18183610dbf565b979061015b565b610c44919750843d8611610700576106f18183610dbf565b953861011f565b8380fd5b8280fd5b8334610cc257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610cc25773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b80fd5b6fffffffffffffffffffffffffffffffff811603610cdf57565b600080fd5b9291906101a09081850191855280518092526101c08501602092838093019060005b818110610d645750505094016000905b60048210610d245750505050565b82606060019286516fffffffffffffffffffffffffffffffff80825116835280858301511685840152604080920151169082015201940191019092610d16565b825173ffffffffffffffffffffffffffffffffffffffff16845285949384019390920191600101610d06565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e0057604052565b610d90565b60405190610120820182811067ffffffffffffffff821117610e0057604052565b60405190610140820182811067ffffffffffffffff821117610e0057604052565b6040906040519160808084019367ffffffffffffffff9481811086821117610e0057604052809460009160005b848110610e8357505050505050565b855190606082019180831085841117610e00576020928852858152858382015285888201528184015201610e74565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60021b907003fffffffffffffffffffffffffffffffc6ffffffffffffffffffffffffffffffffc831692168203610f1457565b610eb2565b67ffffffffffffffff8111610e005760051b60200190565b90610f3b82610f19565b610f486040519182610dbf565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610f768294610f19565b0190602036910137565b5190610f8b82610cc5565b565b90816020910312610cdf5751610fa281610cc5565b90565b6040513d6000823e3d90fd5b9190916fffffffffffffffffffffffffffffffff80809416911601918211610f1457565b519073ffffffffffffffffffffffffffffffffffffffff82168203610cdf57565b51906bffffffffffffffffffffffff82168203610cdf57565b519067ffffffffffffffff82168203610cdf57565b80916101009283910312610cdf5760405191820182811067ffffffffffffffff821117610e00576110c59160e09160405261105e81610fd5565b845261106c60208201610fd5565b602085015261107d60408201610f80565b604085015261108e60608201610f80565b606085015261109f60808201610f80565b608085015260a081015160a08501526110ba60c08201610ff6565b60c08501520161100f565b60e082015290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f145760010190565b805182101561110e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081610120910312610cdf57611151610e05565b9061115b81610fd5565b825261116960208201610fd5565b602083015261117a60408201610f80565b604083015261118b60608201610f80565b606083015261119c60808201610f80565b608083015260a081015160a08301526111b760c08201610ff6565b60c08301526111c860e0820161100f565b60e08301526111db610100809201610fd5565b9082015290565b519060ff82168203610cdf57565b9081610120910312610cdf57611204610e05565b9061120e81610fd5565b825261121c60208201610fd5565b602083015261122d604082016111e2565b604083015261123e60608201610f80565b606083015261124f60808201610f80565b608083015261126060a08201610fd5565b60a083015260c081015160c083015261127b60e08201610ff6565b60e08301526111db61010080920161100f565b9081610140910312610cdf576112a2610e26565b906112ac81610fd5565b82526112ba60208201610fd5565b60208301526112cb604082016111e2565b60408301526112dc60608201610f80565b60608301526112ed60808201610f80565b60808301526112fe60a08201610fd5565b60a083015260c081015160c083015261131960e08201610ff6565b60e083015261010061132c81830161100f565b908301526111db610120809201610fd5565b91908203918211610f1457565b9080821015611358575090565b90509056fea26469706673582212202ecc196d0cb916adf418383cdd85455d72408292160685f76e61ea6545b102ea64736f6c63430008170033";

type ExecutorAssistantConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExecutorAssistantConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExecutorAssistant__factory extends ContractFactory {
  constructor(...args: ExecutorAssistantConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _positionRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_positionRouter, overrides || {});
  }
  override deploy(
    _positionRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_positionRouter, overrides || {}) as Promise<
      ExecutorAssistant & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExecutorAssistant__factory {
    return super.connect(runner) as ExecutorAssistant__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExecutorAssistantInterface {
    return new Interface(_abi) as ExecutorAssistantInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExecutorAssistant {
    return new Contract(address, _abi, runner) as unknown as ExecutorAssistant;
  }
}
